<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/01/15/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2-%E7%9F%A9%E9%98%B5/"/>
      <url>/2021/01/15/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2-%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>$(x, y)  -&gt;  (u, y)$</p><p>$u = a_1x+b_1y+c_1$</p><p>$v = a_2x+b_2+c_2$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>a_1 &amp; b_1\<br>a_2 &amp; b_2\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>c_1\<br>c_2\<br>\end{pmatrix}<br>$$</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>绕原点旋转。</p><p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>cos\theta &amp; -sin\theta\<br>-sin\theta &amp; cos\theta\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="刚体变换"><a href="#刚体变换" class="headerlink" title="刚体变换"></a>刚体变换</h2><p>旋转+平移也称刚体变换（Rigid Transform），就是说如果图像变换前后<strong>两点间的距离</strong>仍然保持不变，那么这种变化就称为刚体变换。<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>cos\theta &amp; -sin\theta\<br>sin\theta &amp; cos\theta\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>t_X\<br>t_y\<br>\end{pmatrix}<br>$$</p><h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h2><h3 id="垂直翻转"><a href="#垂直翻转" class="headerlink" title="垂直翻转"></a>垂直翻转</h3><p>$u=x; v=-y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>1 &amp; 0\<br>0 &amp; -1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h3 id="水平翻转"><a href="#水平翻转" class="headerlink" title="水平翻转"></a>水平翻转</h3><p>$u=-x; v=y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>-1 &amp; 0\<br>0 &amp; 1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h3 id="垂直水平翻转"><a href="#垂直水平翻转" class="headerlink" title="垂直水平翻转"></a>垂直水平翻转</h3><p>$u=-x; v=-y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>-1 &amp; 0\<br>0 &amp; -1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>$u = s_xx; v = s_yy$</p><p>矩阵形式</p><p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>s_x &amp; 0\<br>0 &amp; s_y\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="相似变换"><a href="#相似变换" class="headerlink" title="相似变换"></a>相似变换</h2><p>相似变换又称缩放旋转，相似变换包含了旋转、等比例缩放和平移等变换。<br>若缩放比例为scale，旋转角度为θ，旋转中心是$ (center_x,center_y) $，则仿射变换可以表示为：<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>\alpha &amp; \beta\<br>-\beta &amp; \alpha\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>(1-\alpha)center_x &amp; -\beta center_y\<br>\beta center_x &amp; (1-\alpha)center_y\<br>\end{pmatrix}<br>$$</p><h2 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h2><p><a href="https://baike.baidu.com/item/透视变换" target="_blank" rel="noopener">透视变换</a>（Perspective Transformation）是将二维的图片投影到一个三维视平面上，然后再转换到二维坐标下，所以也称为投影映射（Projective Mapping）。简单来说就是二维→三维→二维的一个过程。</p><p>$X=a_1x+b_1y+c_1 $</p><p>$Y=a_2x+b_2y+c_2$</p><p>$Z=a_3x+b_3y+c_3$<br>$$<br>\begin{pmatrix}<br>X\<br>Y\<br>Z<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>a_1 &amp; b_1 &amp; c_1\<br>a_1 &amp; b_1 &amp; c_1\<br>a_1 &amp; b_1 &amp; c_1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>1<br>\end{pmatrix}<br>$$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/01/14/opencv%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/01/14/opencv%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="opencv-笔记"><a href="#opencv-笔记" class="headerlink" title="opencv 笔记"></a>opencv 笔记</h1><p><a href="http://codec.wang/" target="_blank" rel="noopener">opencv教程</a></p><p><a href="https://www.runoob.com/numpy/numpy-ndarray-object.html" target="_blank" rel="noopener">numpy教程</a></p><ul><li><p><a href="https://blog.csdn.net/weixin_44049693/article/details/106271643" target="_blank" rel="noopener">cv2.waitKey用法</a></p></li><li><p><a href="https://blog.csdn.net/xbinworld/article/details/65660665" target="_blank" rel="noopener">线性插值，双线性插值</a></p></li><li><p><a href="http://codec.wang/#/opencv/start/extra-02-high-quality-save-and-matplotlib" target="_blank" rel="noopener">使用matplotlib.pyplot显示彩色图</a>  <code>img = img[:, :, ::-1]</code></p></li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 深浅拷贝 值传递 引用传递</title>
      <link href="/2021/01/14/python-copy/"/>
      <url>/2021/01/14/python-copy/</url>
      
        <content type="html"><![CDATA[<h2 id="可变对象-不可变对象"><a href="#可变对象-不可变对象" class="headerlink" title="可变对象 不可变对象"></a>可变对象 不可变对象</h2><p>参考内容:</p><p> <a href="https://zhuanlan.zhihu.com/p/34395671" target="_blank" rel="noopener">python可变对象与不可变对象</a></p><p><a href="http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/" target="_blank" rel="noopener">Python的函数参数传递：传值？引用？</a></p><p>可变对象：list dict set<br>不可变对象：tuple string int float bool</p><p>可变对象修改后地址不会改变，不可变对象修改后地址会改变。因为修改不可变对象时，原来的对象被丢弃，变量指向新的对象。修改可变对象时，比如修改列表中的第一个元素，是有一个新的对象被指定给列表对象的第一个元素，但是列表本身没有变化，只是内容发生了变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nfoo = <span class="number">1</span></span><br><span class="line">nfoo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">lstFoo = [<span class="number">1</span>]</span><br><span class="line">lstFoo[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>代码第2行中，内存中原始的1对象因为不能改变，于是被“抛弃”，另nfoo指向一个新的int对象，其值为2</p><p>代码第5行中，更改list中第一个元素的值，因为list是可改变的，所以，第一个元素变更为2。其实应该说，lstFoo指向一个<code>包含一个对象的数组</code>。赋值所发生的事情，是有一个新int对象被指定给lstFoo所指向的数组对象的第一个元素，但是对于lstFoo本身来说，所指向的数组对象并没有变化，只是数组对象的内容发生变化了。这个看似void*的变量所指向的对象仍旧是刚刚的那个有一个int对象的list。</p><p><img src="https://i.loli.net/2021/01/14/RkraAjZYH2gJtKq.jpg" alt=""></p><p>所以函数传参的时候不要传可变对象，否则可能会影响传入对象的值。</p><p>深浅拷贝的例子都可以在<a href="http://pythontutor.com/" target="_blank" rel="noopener">这个网站</a>上可视化编程，非常直观。</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>赋值是将一个对象的地址赋值给一个变量，让变量指向该地址。<br>修改不可变对象（int, str、tuple）需要开辟新的空间<br>修改可变对象（list等）不需要开辟新的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = a</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>a和b两个变量指向的内存空间完全相同，此时对a修改会影响b的值。<br><img src="https://i.loli.net/2021/01/14/qQBzXxC2iUbEsYo.png" alt=""></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是在另一块地址中创建一个新的变量或容器，但是容器内的元素的地址均是源对象的元素的地址的拷贝。也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = a.copy()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/01/14/EqosgdjKfwL6Tva.png" alt=""></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝完全拷贝了一个副本，容器内部元素地址都不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sdcv8K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/14/sdcv8K.png" alt="sdcv8K.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 深拷贝 </tag>
            
            <tag> 浅拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF跨站请求伪造</title>
      <link href="/2021/01/10/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
      <url>/2021/01/10/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>CSRF(Cross Site Request Forgery)是一种攻击者盗用用户身份，在当前<strong>已登录</strong>的Web上执行非本意操作的攻击方法。攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://zhuanlan.zhihu.com/p/46592479" target="_blank" rel="noopener">如何防止CSRF攻击？</a></p><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>受害者登录<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了<a href="https://link.zhihu.com/?target=http%3A//b.com" target="_blank" rel="noopener">http://b.com</a>。</li><li><a href="https://link.zhihu.com/?target=http%3A//b.com" target="_blank" rel="noopener">http://b.com</a> 向 <a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a> 发送了一个请求：<a href="https://link.zhihu.com/?target=http%3A//a.com/act%3Dxx" target="_blank" rel="noopener">http://a.com/act=xx</a>。浏览器会默认携带<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>的Cookie。</li><li><a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li><a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>执行了自己定义的操作。</li></ul><h2 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a><strong>CSRF的特点</strong></h2><ul><li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。</li><li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li></ul><p>CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul><li><p>阻止不明外域的访问</p></li><li><ul><li>同源检测</li><li>Samesite Cookie</li></ul></li><li><p>提交时要求附加本域才能获取的信息</p></li><li><ul><li>CSRF Token</li><li>双重Cookie验证</li></ul></li></ul><h3 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h3><h4 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h4><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。<br>如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>问题在于这种方法把安全性都依赖于浏览器来保障，从理论上来讲，这样并不安全。</p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>前面讲到CSRF的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。</p><p>而CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>CSRF Token的防护策略分为三个步骤：</p><ol><li>将CSRF Token输出到页面中</li></ol><p>首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，显然在提交时Token<strong>不能再放在Cookie中</strong>了，否则又会被攻击者冒用。因此，为了安全起见Token最好还是<strong>存在服务器的Session</strong>中，之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后<strong>动态生成</strong>的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。</p><ol start="2"><li>页面提交的请求携带这个Token</li></ol><p>对于GET请求，Token将附在请求地址之后，这样URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上：<br><code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>这样，就把Token以参数的形式加入请求了。</p><ol start="3"><li>服务器验证Token是否正确</li></ol><p>当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener">如何通过JWT防御CSRF</a></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin" target="_blank" rel="noopener">Origin</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener">Referer</a><br><a href="https://developer.ibm.com/zh/articles/1102-niugang-csrf/" target="_blank" rel="noopener">CSRF 攻击的应对之道</a><br><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener">CSRF JWT</a><br><a href="https://stackoverflow.com/questions/37959945/how-to-destroy-jwt-tokens-on-logout" target="_blank" rel="noopener">如何在logout时销毁JWT–在client端删除</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本攻击</title>
      <link href="/2021/01/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
      <url>/2021/01/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>跨站脚本攻击(Cross Site Sript)是指攻击者利用网站对<strong>用户输入过滤不足</strong>，输入内容可以<strong>显示在页面上</strong>对其他人造成影响的HTML代码，利用用户身份进行某种动作，从而完成盗取用户资料、进行病毒侵害的一种攻击方式。为了和层叠样式表(Cascading Style Sheets)的缩写区分，跨站脚本攻击通常简写为XSS。</p><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>原理：简单的将用户输入的数据直接或未经过完善的<strong>安全过滤</strong>就在浏览器中进行输出，导致输出的数据中存在可被浏览器执行的代码数据，由于此种类型的跨站代码存在于URL中，所以黑客通常需要诱骗或加密变形等方式将存在恶意代码的链接发给用户，<strong>只有用户点击以后才能使得攻击成功实施</strong>。</p><p>假如有个程序是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="meta">@route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello"</span> + name</span><br></pre></td></tr></table></figure><p>那么当访问’/?name=’Bob’时，网页会显示hello bob。但这个程序对用户输入内容没有过滤和转义，也就是说我们可以将一些js代码写在参数中，这样服务器返回的响应中就会包含着写代码。比如当把name的值改为js代码，也就是访问<code>/?name=&lt;script&gt;alert(1)&lt;/script&gt;</code>的时候，页面执行了<code>alert(1)</code>，然后会出现一个弹窗。所以黑客会把这段url藏到超链接中，然后诱导用户去点击链接，就能完成XSS攻击。</p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>原理：存储型XSS脚本攻击是指由于Web应用程序对用户输入数据的处理不严格，导致Web应用程序将黑客输入的恶意跨站攻击数据信息保存在服务端的数据库或其他文件中，当王爷进行数据查询展示时，会从数据库中获取数据内容，并将数据内容在网页中进行输出展示，进而导致XSS代码执行。</p><p>常见场景：留言板、博客、新闻发布系统中，恶意代码的数据信息直接写入文章、评论中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="meta">@route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="comment"># 返回所有消息</span></span><br><span class="line">message_list = Message.objects.all()</span><br><span class="line">  <span class="keyword">return</span> <span class="number">200</span>, &#123;message_list: message_list&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@route('/', method=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">message = request.form.get(<span class="string">'msg'</span>)</span><br><span class="line">  <span class="comment"># 数据库中新增一条记录</span></span><br><span class="line">  m = Message(text=message)</span><br><span class="line">  m.save()</span><br><span class="line">  <span class="comment"># 201 表示创建成功</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">201</span></span><br></pre></td></tr></table></figure><h2 id="反射型和存储型对比"><a href="#反射型和存储型对比" class="headerlink" title="反射型和存储型对比"></a>反射型和存储型对比</h2><p>反射型和存储型是根据表现形式来区分的，其实他们的本质都是一样的：网页可以直接显示用户输入的内容。区别在于：存储型xss指的是用户输入内容可以保存在服务器中，可以影响到其他用户的。</p><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ul><li>对输入、输出信息进行过滤和转义<ul><li>表单验证，对符合格式的输入允许通过检查。比如邮件地址必须是<a href="mailto:xx@xx.xx" target="_blank" rel="noopener">xx@xx.xx</a>格式，age必须是int类型。</li><li>对特殊字符进行过滤：比如HTML中的<code>&quot; &#39; &lt; &gt; % &amp;</code></li></ul></li><li>使用<a href="https://blog.csdn.net/qq_38553333/article/details/80055521" target="_blank" rel="noopener">HttpOnly</a>, 将重要的cookie标记为httponly，这样的话当浏览器向Web服务器发起请求的时就会带上<code>cookie</code>字段，<strong>但是在<code>js</code>脚本中却不能访问这个cookie</strong>，这样就避免了XSS攻击利用<code>JavaScript</code>的<code>document.cookie</code>获取<code>cookie</code>。</li></ul><h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p><a href="https://www.bilibili.com/video/BV1WK411V7Sz" target="_blank" rel="noopener">视频演示-XSS跨站脚本漏洞原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/37295186" target="_blank" rel="noopener">对于跨站脚本攻击（XSS攻击）的理解和总结</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 命令行参数</title>
      <link href="/2020/12/17/pyton-commandline-arguments/"/>
      <url>/2020/12/17/pyton-commandline-arguments/</url>
      
        <content type="html"><![CDATA[<p>本分翻译自 <a href="https://realpython.com/python-command-line-arguments" target="_blank" rel="noopener">https://realpython.com/python-command-line-arguments</a></p><p>python处理命令行参数的功能为一些<strong>基于文本命令行</strong>的程序提供了一个用户友好的界面。这类似于图形用户界面（一个由图形元素或部件操作的可视化应用程序）。</p><p>python提供了可以获取、提取命令行参数的机制。这些参数可以用来更改程序的行为。举个例子，假如你的程序要处理一个文件中的数据，那么你可以把文件路径传给程序，而不是在源代码中写死。</p><p><strong>通过此教程，你将会了解：</strong></p><ul><li>python命令行参数的起源</li><li>python命令行参数的底层支持</li><li>设计命令行界面的指导标准</li><li>手动定制以及处理命令行参数的简单方法</li><li>使用python中的库简化复杂命令行界面的开发</li></ul><p>如果你想在不使用专用库的情况下开发一个用户友好的命令行界面，或者是想更好的理解现有的python命令行参数库的一些共识，那么请继续阅读！</p><h2 id="命令行界面-The-Command-Line-Interface"><a href="#命令行界面-The-Command-Line-Interface" class="headerlink" title="命令行界面 The Command Line Interface"></a>命令行界面 The Command Line Interface</h2><p><strong>命令行界面(CLI)</strong> 为用户提供了一种方式，使用户可以和运行在<strong>基于文本的shell解释器</strong>中的程序进行交互。</p><p>shell解释器有Linux上的bash，windows上的命令提示行等。命令行界面由能显示命令提示符的shell解释器支持。它一般有以下几个要素：</p><ul><li>一个命令或一段程序</li><li>0或多个命令行参数</li><li>一个输出，代表命令结果</li><li>使用或帮助的参考文档</li></ul><p>不是每个命令行界面都提供以上要素，这些也不是命令行界面的全部特点。命令行的复杂性表现在从传递单个参数到多个参数和选项，很像领域专用语言(Domain Specific Language)。举个例子，一些程序可能会从命令行启动web版的文档，或者像python那样打开一个交互解释器。</p><p>下面两个python命令的例子展示出了命令行界面的样子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -c "print(Real Python)"</span><br><span class="line">Real Python</span><br></pre></td></tr></table></figure><p>在这个例子里，python解释器接收<code>-c</code>参数，它表示将在选项<code>-c</code>之后的参数作为Python程序执行。</p><p>下面这个例子展示了使用<code>-h</code>调用python来显示<code>help</code>信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -h</span><br><span class="line">usage: python3 [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options and arguments (and corresponding environment variables):</span><br><span class="line">-b     : issue warnings about str(bytes_instance), str(bytearray_instance)</span><br><span class="line">         and comparing bytes/bytearray with str. (-bb: issue errors)</span><br><span class="line">[ ... complete help text not shown ... ]</span><br></pre></td></tr></table></figure><h2 id="C语言历史遗留"><a href="#C语言历史遗留" class="headerlink" title="C语言历史遗留"></a>C语言历史遗留</h2><p>Python命令行参数是从c语言继承而来的。在<a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank" rel="noopener">Guido Van Rossum</a> 于1993年写的<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.4180" target="_blank" rel="noopener">写给Unix/C程序员的Python介绍</a>中提到了，C对Python是有很大的影响的。Guido提及了字面量的定义，标识符，操作符以及像<code>break</code>, <code>continue</code>,<code>return</code>之类的语句。Python命令行参数也很大程度上受到了C语言的影响。</p><p>为了说明两个语言之间的相似性，情况下面的C语言程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Arguments count: %d\n"</span>, argc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Argument %6d: %s\n"</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四行定义了<code>main()</code>, c程序的入口函数。下面的参数要记好笔记：</p><ol><li><p><strong>argc</strong> 是代表参数个数的一个整数</p></li><li><p><strong>argv</strong> 是是一个字符指针的数组，包含程序名(第一个参数)，后面是其他参数(如果有的话)</p></li></ol><p>你可以在linux环境下使用<code>gcc -o main main.c</code>上面的代码，然后用<code>./main</code>执行得到下面的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gcc -o main main.c</span><br><span class="line"><span class="meta">$</span> ./main</span><br><span class="line">Arguments count: 1</span><br><span class="line">Argument      0: ./main</span><br></pre></td></tr></table></figure><p>如果没有用<code>-o</code>选项指明，gcc编译器将默认使用<code>a.out</code>作为输出可执行文件名。它代表<strong>汇编输出(assembler output)</strong>, 让人想起在旧的UNIX系统上生成的可执行文件。而且观察到，可执行文件的名称./main是唯一的参数。<br>让我们使用同一个程序，并传递几个Python命令行参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./main Python Command Line Arguments</span><br><span class="line">Arguments count: 5</span><br><span class="line">Argument      0: ./main</span><br><span class="line">Argument      1: Python</span><br><span class="line">Argument      2: Command</span><br><span class="line">Argument      3: Line</span><br><span class="line">Argument      4: Arguments</span><br></pre></td></tr></table></figure><p>输出结果显示参数的个数是5，参数列表包括程序名main，后面是在命令行传递的“Python Command Line Arguments”的每个单词。</p><blockquote><p><strong>注意</strong>: <code>argc</code> 代表 <strong>argument count</strong>, 而 <code>argv</code> 代表 <strong>argument vector</strong>. 想知道更多内容, 可以查看 <a href="https://en.wikibooks.org/wiki/A_Little_C_Primer/C_Command_Line_Arguments" target="_blank" rel="noopener">A Little C Primer/C Command Line Arguments</a>.</p></blockquote><p>上述编译<code>main.c</code>文件假定你是用的是Linux或Mac OS系统。在Windows上你也可以用以下几个方法来编译C程序。</p><ul><li><a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noopener"><strong>Windows Subsystem for Linux (WSL):</strong></a> It’s available in a few Linux distributions, like <a href="https://ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a>, <a href="https://www.opensuse.org/" target="_blank" rel="noopener">OpenSUSE</a>, and <a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a>, among others. You can install it from the Microsoft Store.</li><li><a href="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019" target="_blank" rel="noopener"><strong>Windows Build Tools:</strong></a> This includes the Windows command line build tools, the Microsoft C/C++ compiler <a href="https://docs.microsoft.com/en-us/cpp/build/walkthrough-compiling-a-cpp-cli-program-on-the-command-line?view=vs-2019" target="_blank" rel="noopener"><code>cl.exe</code></a>, and a compiler front end named <a href="https://en.wikipedia.org/wiki/Clang" target="_blank" rel="noopener"><code>clang.exe</code></a> for C/C++.</li><li><a href="https://visualstudio.microsoft.com/downloads/" target="_blank" rel="noopener"><strong>Microsoft Visual Studio:</strong></a> This is the main Microsoft integrated development environment (IDE). To learn more about IDEs that can be used for both Python and C on various operating systems, including Windows, check out <a href="https://realpython.com/python-ides-code-editors-guide/" target="_blank" rel="noopener">Python IDEs and Code Editors (Guide)</a>.</li><li><a href="http://mingw-w64.org/" target="_blank" rel="noopener"><strong>mingw-64 project:</strong></a> This supports the <a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC compiler</a> on Windows.</li></ul><p>如果你已经安装了Microsoft Visual Studio或者Windows Build Tools，那么你可以用下面的方法编译main.c:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/&gt;cl main.c</span><br></pre></td></tr></table></figure><p> 你将会获得一个名为<code>main.exe</code>的可执行文件，可以用下面命令执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:/&gt;main</span><br><span class="line">Arguments count: 1</span><br><span class="line">Argument      0: main</span><br></pre></td></tr></table></figure><p>你可以实现一个Python程序，main.py，这和上面的C程序main.c是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">f"Arguments count: <span class="subst">&#123;len(sys.argv)&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">for</span> i, arg <span class="keyword">in</span> enumerate(sys.argv):</span><br><span class="line">        print(<span class="string">f"Argument <span class="subst">&#123;i:&gt;<span class="number">6</span>&#125;</span>: <span class="subst">&#123;arg&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>在代码中并没有看到像C语言中argc的变量，他在Python中并不存在，因为<code>sys.argv</code>已经够用了。你可以不用知道参数列表长度，来解析<code>sys.argv</code>的命令行参数，如果你的程序需要知道参数长度的话，也可以调用内置<code>len()</code>函数。</p><p>请注意<code>enumerate()</code>，当应用于一个可迭代对象时，他返回一个可枚举对象(enumerate object)，该对象可以同时返回sys.argv元素的索引和它对应的值。这让我们可以遍历sys.argv，而不用维护一个计数变量。</p><p>main.py运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python main.py Python Command Line Arguments</span><br><span class="line">Arguments count: 5</span><br><span class="line">Argument      0: main.py</span><br><span class="line">Argument      1: Python</span><br><span class="line">Argument      2: Command</span><br><span class="line">Argument      3: Line</span><br><span class="line">Argument      4: Arguments</span><br></pre></td></tr></table></figure><p>sys.argv包含了和C语言中argv相同的信息:</p><ul><li><strong>程序名称</strong><code>main.py</code>是参数列表第一个参数</li><li><code>Python</code>, <code>Command</code>, <code>Line</code>, and <code>Arguments</code>是剩下的参数</li><li>译者注：代码中:&gt;6是让变量i代表的字符串占据6个字符宽度并且右对齐，类似于C语言中的”%6d”</li></ul><p>通过对C语言比较难懂部分的一些简短的介绍，你现在可以去学习更多关于Python命令行参数的内容了。</p><h2 id="两个Unix实用工具"><a href="#两个Unix实用工具" class="headerlink" title="两个Unix实用工具"></a>两个Unix实用工具</h2><p>为了在本教程中使用Python命令行参数，你将实现Unix生态系统中两个实用程序的部分功能。</p><ol><li><a href="https://en.wikipedia.org/wiki/Sha1sum" target="_blank" rel="noopener">sha1sum</a></li><li><a href="https://en.wikipedia.org/wiki/Seq_(Unix" target="_blank" rel="noopener">seq</a>)</li></ol><p>在下面几个部分中，你将会熟悉这些unix工具。</p><h3 id="sha1sum"><a href="#sha1sum" class="headerlink" title="sha1sum"></a>sha1sum</h3><p>sha1sum 计算SHA-1哈希值，它通常用来验证文件的完整性。给定一个输入，哈希函数返回相同的值。任何对输入的改变都将会导致输出不同的哈希值。在使用带有具体参数的实用工具之前，你可以先打印一下help信息。</p><blockquote><p>译者注：<strong>SHA-1</strong>（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种<a href="https://baike.baidu.com/item/密码散列函数" target="_blank" rel="noopener">密码散列函数</a>。SHA-1可以生成一个被称为消息摘要的160位散列值，通常为40个十六进制数。（1个十六进制数是4位二进制数）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum --help</span><br><span class="line">Usage: sha1sum [OPTION]... [FILE]...</span><br><span class="line">Print or check SHA1 (160-bit) checksums.</span><br><span class="line"></span><br><span class="line">With no FILE, or when FILE is -, read standard input.</span><br><span class="line"></span><br><span class="line">  -b, --binary         read in binary mode</span><br><span class="line">  -c, --check          read SHA1 sums from the FILEs and check them</span><br><span class="line">      --tag            create a BSD-style checksum</span><br><span class="line">  -t, --text           read in text mode (default)</span><br><span class="line">  -z, --zero           end each output line with NUL, not newline,</span><br><span class="line">                       and disable file name escaping</span><br><span class="line">[ ... complete help text not shown ... ]</span><br></pre></td></tr></table></figure><p>显示命令行程序的帮助信息是命令行界面提供的常用功能。</p><p>要计算一个文件内容的SHA-1 hash值，可以按如下操作进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.c</span><br><span class="line">125a0f900ff6f164752600550879cbfabb098bc3  main.c</span><br></pre></td></tr></table></figure><p>返回的结果第一部分显示的是SHA-1哈希值，第二部分是文件名。而且此命令可以接受多个文件名作为参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.c main.py</span><br><span class="line">125a0f900ff6f164752600550879cbfabb098bc3  main.c</span><br><span class="line">d84372fc77a90336b6bb7c5e959bcb1b24c608b4  main.py</span><br></pre></td></tr></table></figure><p>由于Unix终端的通配符扩展特性，也可以提供带有通配符字符的命令行参数。这其中一个字符是asterisk，或者可以称作星号(*)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.*</span><br><span class="line">3f6d5274d6317d580e2ffc1bf52beee0d94bf078  main.c</span><br><span class="line">f41259ea5835446536d2e71e566075c1c1bfc111  main.py</span><br></pre></td></tr></table></figure><p>shell把main.*转换成main.c和main.py并且把他们传入sha1sum，因为当前文件夹下的这两个文件，都和main.*所匹配。该程序会计算参数列表的每个文件的SHA1值。在Windows上你会发现他的行为有所不同。Windows没有通配符扩展，所以程序可能必须得适应这一点。你可能需要在内部扩展通配符。</p><p>在没有参数的情况下，sha1sum从标准输入中读取。你可以通过在键盘上输入字符来传入数据。输入的字符流包括任何字符，包括回车键。要终止输入，必须用Enter发出文件结束的信号，然后输入Ctrl+D。</p><p>结果是为文本<code>Real\nPython\n</code>生成的SHA1哈希值。文件的名称是-。这是一个表示标准输入的惯例。当你执行以下命令时，会得到相同的哈希值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -c "print('Real\nPython\n', end='')" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br><span class="line"><span class="meta">$</span> python -c "print('Real\nPython')" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br><span class="line"><span class="meta">$</span> printf "Real\nPython\n" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br></pre></td></tr></table></figure><p>接下来，你将会阅读的是对<strong>seq</strong>的简单介绍 。</p><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p><a href="https://en.wikipedia.org/wiki/Seq_%28Unix%29" target="_blank" rel="noopener">seq</a>可以生成数字<strong>序列</strong>。在最基本的形式中，比如生成1-5的序列，你可以依照如下指令执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> seq 5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>为了seq提供的所有功能，你可以在命令行打印出帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ seq --<span class="built_in">help</span></span><br><span class="line">Usage: seq [OPTION]... LAST</span><br><span class="line">  or:  seq [OPTION]... FIRST LAST</span><br><span class="line">  or:  seq [OPTION]... FIRST INCREMENT LAST</span><br><span class="line">Print numbers from FIRST to LAST, <span class="keyword">in</span> steps of INCREMENT.</span><br><span class="line"></span><br><span class="line">Mandatory arguments to long options are mandatory <span class="keyword">for</span> short options too.</span><br><span class="line">  -f, --format=FORMAT      use <span class="built_in">printf</span> style floating-point FORMAT</span><br><span class="line">  -s, --separator=STRING   use STRING to separate numbers (default: \n)</span><br><span class="line">  -w, --equal-width        equalize width by padding with leading zeroes</span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">      --version  output version information and <span class="built_in">exit</span></span><br><span class="line">[ ... complete <span class="built_in">help</span> text not shown ... ]</span><br></pre></td></tr></table></figure><p>在此教程中，你将会编写一些sha1sum和seq的简单变体。在每个例子中，你将会了解到Python命令行参数不同的特点和功能。</p><p>在Mac OS和Linux上，sha1sum和seq需要预先安装，尽管不同的系统或发布版本的特性和帮助信息可能会有所不同。如果你正在使用Windows 10，那么运行sha1sum和seq的最简单的方法则是在<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">WSL</a>中安装Linux环境。如果你无法访问提供标准Unix实用程序的终端，你或许可以使用一些在线终端：</p><ul><li>在<a href="https://www.pythonanywhere.com/" target="_blank" rel="noopener">PythonAnywhere</a>上创建一个免费账户，然后启动一个Bash控制台。</li><li>在<a href="https://repl.it/languages" target="_blank" rel="noopener">repl.it</a>上创建一个临时Bash。</li></ul><p>以上只是两个例子，你也可以找到其他的替代品。</p><h2 id="sys-argv-Arrary"><a href="#sys-argv-Arrary" class="headerlink" title="sys.argv.Arrary"></a>sys.argv.Arrary</h2><p>在探索一些公认的约定和了解如何处理Python命令行参数之前，你需要知道对所有Python命令行参数的底层支持是由<a href="https://docs.python.org/library/sys.html?highlight=sys argv#sys.argv" target="_blank" rel="noopener"><code>sys.argv</code></a>所提供的。 以下各节中的示例将向你展示如何处理存储在sys.argv中的Python命令行参数以及处理当访问它时所遇到的典型的错误。在这章你将会了解：</p><ul><li>如何<strong>访问</strong>sys.argv的内容</li><li>如何<strong>消除</strong>sys.argv的全局特性所带来的副作用</li><li>如何在Pythobn命令行参数中<strong>处理</strong>空格</li><li>如何在访问Python命令行参数时<strong>处理</strong>错误 </li><li>如何<strong>接收</strong>以字节形式传递的Python命令行参数的原始格式</li></ul><p>让我们开始吧！</p><h3 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h3><p>sys模块提供了一个列表叫做argv，它包括：</p><ol><li>argv[0] 包含当前Python程序的名称</li><li>argv[1:]，列表剩余部分，包含所有传给这个程序的Python命令行参数</li></ol><p>下面这个例子展示了sys.argv的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">f"Name of the script      : <span class="subst">&#123;sys.argv[<span class="number">0</span>]=&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"Arguments of the script : <span class="subst">&#123;sys.argv[<span class="number">1</span>:]=&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>下面是代码解释：</p><ul><li>第2行倒入了Python的内部模块sys。</li><li>第4行通过访问sys.argv的第一个元素提取了程序名称。</li><li>第5行通过获取sys.argv的剩余元素，显示了Python命令行参数。</li></ul><blockquote><p><strong>注意：</strong>在上面argv.py中使用的<a href="https://realpython.com/python-f-strings/" target="_blank" rel="noopener">f-string</a>语法使用了Python 3.8中的新调试说明符。 要了解有关此f字符串新功能和其他功能的更多信息，请查看Python 3.8中的新功能。</p><p>如果你的Python版本低于3.8，那么只需要移除两个f-string中的=使程序得以运行。输出结果回展示变量名而不是它们的名字。</p></blockquote><p>使用任意参数列表执行上面的脚本argv.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python argv.py un deux trois quatre</span></span><br><span class="line">Name of the script      : sys.argv[0]='argv.py'</span><br><span class="line">Arguments of the script : sys.argv[1:]=['un', 'deux', 'trois', 'quatre']</span><br></pre></td></tr></table></figure><h3 id="反转首个参数"><a href="#反转首个参数" class="headerlink" title="反转首个参数"></a>反转首个参数</h3><p>现在你对sys.argv有了足够的了解，接下来你将会对命令行传递的参数进行操作。示例程序example.py把在命令行传递的第一个参数逆转了过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arg = sys.argv[<span class="number">1</span>]</span><br><span class="line">print(arg[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>在reverse.py中程序通过以下几个步骤反转第一个参数：</p><ul><li>第5行获取程序存储在<code>sys.argv</code>中的index为1的参数。记住程序名存储在sys.argv的index 0的位置。</li><li>第6行打印了反转字符串。 args[::-1]是python中使用分片操作来反转列表的方法。</li></ul><p>按照下面运行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python reverse.py <span class="string">"Real Python"</span></span></span><br><span class="line">nohtyP laeR</span><br></pre></td></tr></table></figure><p>如预期的那样，<code>reverse.py</code>对”Real Python”进行处理，并且反转了唯一参数并输出”nohtyP laeR”。注意多个单词”Real Python”周围的引号确保解释器将其处理为唯一参数而不是两个。你将在后面的部分中深入探讨参数分隔符。</p><h3 id="转换-sys-argv"><a href="#转换-sys-argv" class="headerlink" title="转换 sys.argv"></a>转换 sys.argv</h3><p>sys.argv对正在运行的Python程序全局可用。 在执行过程中导入的所有模块都可以直接访问sys.argv。 这种全局访问可能很方便，但是sys.argv并非一成不变。 您可能想要实现一种更可靠的机制，以<em>将程序参数提供给Python程序中的不同模块</em>，尤其是在具有多文件的复杂程序中。</p><p>观察如果你随意使用<code>sys.argv</code>会发生什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv_pop.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line">sys.argv.pop()</span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p>调用<a href="https://docs.python.org/tutorial/datastructures.html#more-on-lists" target="_blank" rel="noopener"><code>.pop()</code></a>方法移除<code>sys.argv</code>中最后一个元素。</p><p>执行上面的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python argv_pop.py un deux trois quatre</span></span><br><span class="line">['argv_pop.py', 'un', 'deux', 'trois', 'quatre']</span><br><span class="line">['argv_pop.py', 'un', 'deux', 'trois']</span><br></pre></td></tr></table></figure><p>注意，第四个参数从sys.argv中被移除。</p><p>在上述简短的脚本中，您可以安全地依靠对sys.argv的全局访问，但是在较大规模的程序中，您可能希望将参数存储在单独的变量中。 前面的示例可以进行如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv_var_pop.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line">args = sys.argv[<span class="number">1</span>:]</span><br><span class="line">print(args)</span><br><span class="line">sys.argv.pop()</span><br><span class="line">print(sys.argv)</span><br><span class="line">print(args)</span><br></pre></td></tr></table></figure><p>这次尽管<code>sys.argv</code>移除了最后一个元素，但<code>args</code>仍然保持不变。<code>args</code>不是全局的，你可以将其传递给程序，以根据程序的逻辑来解析参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        args = sys.argv[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><p>在此摘录自<a href="https://realpython.com/what-is-pip/" target="_blank" rel="noopener"><code>pip</code></a> 源码中，main()将sys.argv切片保存到args中，该片仅包含参数而不包含文件名。 sys.argv保持不变，并且对sys.argv的任何更改都不会影响arg。</p><h3 id="转义空格字符"><a href="#转义空格字符" class="headerlink" title="转义空格字符"></a>转义空格字符</h3><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h3 id="计算sha1sum"><a href="#计算sha1sum" class="headerlink" title="计算sha1sum"></a>计算sha1sum</h3><h5 id="剖析python命令行参数"><a href="#剖析python命令行参数" class="headerlink" title="剖析python命令行参数"></a>剖析python命令行参数</h5><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><h3 id="选项-option"><a href="#选项-option" class="headerlink" title="选项 option"></a>选项 option</h3><h3 id="参数-arguments"><a href="#参数-arguments" class="headerlink" title="参数 arguments"></a>参数 arguments</h3><h3 id="子命令-subcommand"><a href="#子命令-subcommand" class="headerlink" title="子命令 subcommand"></a>子命令 subcommand</h3><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><h2 id="一些解析python命令行参数的方法"><a href="#一些解析python命令行参数的方法" class="headerlink" title="一些解析python命令行参数的方法"></a>一些解析python命令行参数的方法</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><h3 id="标准输出和标准错误"><a href="#标准输出和标准错误" class="headerlink" title="标准输出和标准错误"></a>标准输出和标准错误</h3><h3 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h3><h2 id="一些验证python命令行参数的方法"><a href="#一些验证python命令行参数的方法" class="headerlink" title="一些验证python命令行参数的方法"></a>一些验证python命令行参数的方法</h2><h3 id="使用python-data-classes进行类型验证"><a href="#使用python-data-classes进行类型验证" class="headerlink" title="使用python data classes进行类型验证"></a>使用python data classes进行类型验证</h3><h3 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h3><h2 id="python标准库"><a href="#python标准库" class="headerlink" title="python标准库"></a>python标准库</h2><h3 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h3><h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="Click"><a href="#Click" class="headerlink" title="Click"></a>Click</h3><h3 id="Python-Prompt-Toolkit"><a href="#Python-Prompt-Toolkit" class="headerlink" title="Python Prompt Toolkit"></a>Python Prompt Toolkit</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python2 </tag>
            
            <tag> 命令行 </tag>
            
            <tag> 参数 </tag>
            
            <tag> commandline </tag>
            
            <tag> arguments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim笔记</title>
      <link href="/2020/11/21/vim-notes/"/>
      <url>/2020/11/21/vim-notes/</url>
      
        <content type="html"><![CDATA[<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p>gg 移动到第一行<br>G    移动到最后一行<br>0 到行首（第 1 列）<br>^ 到第一个非空白字符<br>$ 到行尾</p><p><n>gg  移动到第n行<br>Ctrl-d 向下移动半页<br>Ctrl-u 向上移动半页</n></p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>a (append)<br>i (insert)<br>o (open a line)<br>以上三种都是在当前字符/行后插入</p><p>A    行尾插入<br>I    行头插入<br>O    向上新建一行</p><h3 id="删-d-delete"><a href="#删-d-delete" class="headerlink" title="删 d delete"></a>删 d delete</h3><p>d$    删除当前字符到行末的内容<br>x    删除当前字符<br>dd    剪切当前行<br>di(    删除()中间的字符<br>dw    删除当前单词</p><h3 id="改-c-change"><a href="#改-c-change" class="headerlink" title="改 c change"></a>改 c change</h3><p>u    撤销<br>.     重复<br>:%s/a/b   全局把a替换成b<br>:s/a/b    替换当前行第一个a为b<br>:s/a/b/g    替换当前行所有a为b<br>:n,$s/a/b    替换第n行到最后一行的a为b</p><p>ciw     change inner word</p><ul><li>比如(asdasd) 输入ci(就可以修改括号中间的内容<br>ctw    change to word</li><li>比如ct) 就修改 asdasd) 做括号左边的内容</li></ul><h3 id="查-f-find"><a href="#查-f-find" class="headerlink" title="查 f find"></a>查 f find</h3><p>f<x>    在当前行查找第一个字符x，按;查找下一个，按,查找上一个<br>F<x>    反向查找</x></x></p><p>/word    全文查找单词 按n查找下一个，按N查找上一个<br>?word    反向查找</p><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><p>y    复制<br>yy    复制当前行<br>p    粘贴<br>P    在上一行粘贴</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><opration> <motion><br>d3h    向左删除三个字符<br>df:    删除当前行:前的内容<br>y$    复制当前字符到末尾</motion></opration></p><h2 id="配置文件-vimrc"><a href="#配置文件-vimrc" class="headerlink" title="配置文件 .vimrc"></a>配置文件 .vimrc</h2><p>在<code>~</code>文件夹下新建一个.vimrc文件</p><h2 id="visual-模式"><a href="#visual-模式" class="headerlink" title="visual 模式"></a>visual 模式</h2><p>在普通模式下按v进入可视模式<br>V    进入可视行模式</p><ul><li>选中后输入:normal <command> 可以执行normal指令</li><li>选中后:normal A.png 在每行后面添加.png后缀<br>ctrl+v    进入可视块模式</li></ul><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>到<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a>根据提示安装<code>vim-plug</code> 并且修改配置文件</p>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装系统</title>
      <link href="/2020/11/05/raspberry-os/"/>
      <url>/2020/11/05/raspberry-os/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/" target="_blank" rel="noopener">系统镜像下载地址</a></p><ol><li>插上读卡器</li><li>查看存储设备 <code>df -h</code></li><li>卸载sd卡: <code>sudo diskutil unmount /Volumes/BOOT</code></li><li>烧录系统 <code>sudo dd if=/Users/chenbai/Downloads/2020-08-20-raspios-buster-armhf.img of=/dev/rdisk2 bs=128m</code></li><li>根目录创建空ssh文件，以及<code>wpa_supplicant.conf</code>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;624net&quot;</span><br><span class="line">    psk=&quot;imsosorry&quot;</span><br><span class="line">    priority=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>sd卡插入树莓派 启动</li><li>获取ip  用ssh连接</li></ol>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
            <tag> 烧录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2020/08/17/linux/"/>
      <url>/2020/08/17/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="ps-elf"><a href="#ps-elf" class="headerlink" title="ps -elf"></a>ps -elf</h2><p>-e 显示所有进程</p><p>-f full format 完整格式</p><p>-l long formart </p><p>UID： 说明该程序被谁拥有<br>PID：就是指该程序的 ID<br>PPID： 就是指该程序父级程序的 ID<br>C： 指的是 CPU 使用的百分比<br>STIME： 程序的启动时间<br>TTY： 指的是登录终端<br>TIME : 指程序使用掉 CPU 的时间<br>CMD： 下达的指令</p><h2 id="软硬链接-ln"><a href="#软硬链接-ln" class="headerlink" title="软硬链接 ln"></a>软硬链接 ln</h2><p>软链接：ln -s target linkname<br>硬链接：ln target linkname</p><p>硬链接 不占用空间，源文件和硬链接实际上是同一个文件，当两个文件都删除时，这个文件才会被删除，不能对目录进行链接</p><p>软链接相当于一个快捷方式，指向源文件，修改一个文件另一个文件也会跟着改变，但是删除源文件后，软链接就会失效，可以对目录进行链接</p><h2 id="复制-cp-r"><a href="#复制-cp-r" class="headerlink" title="复制 cp [-r]"></a>复制 cp [-r]</h2><p>cp src target</p><p>cp -r src target  // 复制文件夹</p><h2 id="删除-rm-r"><a href="#删除-rm-r" class="headerlink" title="删除 rm [-r]"></a>删除 rm [-r]</h2><p>rm -r dir // 递归删除</p><p>##chmod</p><p><a href="https://blog.csdn.net/pythonw/article/details/80263428" target="_blank" rel="noopener">https://blog.csdn.net/pythonw/article/details/80263428</a></p><p>修改文件权限</p><p>chomod 用户 操作符 权限 filename</p><p>用户有 u(文件所有者), g(文件所隶属的用户组), o(其他用户), a(全部用户)</p><p>权限分为w, r, x 分别是只读 只写 可执行</p><p>7 = 4 + 2 + 1    读写运行权限</p><p>5 = 4 + 1       读和运行权限</p><p>4 = 4          只读权限</p><p><code>chmod a=rwx main.go</code> 给所有用户读写执行main.go的权限</p><p><code>chmod 777 main.go</code> 三个7分别给文件所有者、群组用户、其他用户权限</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>匹配正则表达式</p><p><code>ps -ef | grep pid</code>查找特定进程</p><h2 id="查看命令历史-history"><a href="#查看命令历史-history" class="headerlink" title="查看命令历史 history"></a>查看命令历史 history</h2><p>hitory</p><h2 id="查看磁盘使用状况"><a href="#查看磁盘使用状况" class="headerlink" title="查看磁盘使用状况"></a>查看磁盘使用状况</h2><p><code>df -hl</code></p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><code>netstat -l</code> 显示监听的套接字</p><p><code>netstat -lnp</code> l 显示监听，n不解析name，p显示程序/进程名称</p><h2 id="查看-修改主机名2"><a href="#查看-修改主机名2" class="headerlink" title="查看/修改主机名2"></a>查看/修改主机名2</h2><p><code>hostname</code></p><p>显示： ecs-sn3-medium-2-linux-20200107151549</p><p>修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=centos6.5-1</span><br></pre></td></tr></table></figure><p>##进程状态</p><p>running 可执行状态，只有在该状态的进程才可能在CPU上运行。</p><p>sleeping 中断 在等待某个条件的形成或接收到信号</p><p>stopped</p><p>zombie  进程已终止，但进程描述还在，等到父进程调用wait后释放</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>性能分析工具，能够实时显示系统中各个进程的资源占用状况</p><p>shift+f可以设置排序, 显示字段等选项</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 排序算法</title>
      <link href="/2020/08/17/sort-go/"/>
      <url>/2020/08/17/sort-go/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// n个元素只要走n-1趟</span></span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">BubbleSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 不断地将尚未排好序的数插入到已经排好序的部分</span></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Insertionsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 第一个认为是有序的，从第二个元素开始，一共n-1次插入</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j&gt;<span class="number">0</span>; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[j<span class="number">-1</span>] &#123;</span><br><span class="line">arr[j], arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>], arr[j]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">Insertionsort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 在每次遍历后，把未排序的最小的元素放到前面</span></span><br><span class="line"><span class="comment">// 不稳定  eg  3 2 3 1 第一个3和1交换  破坏了稳定性</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">var</span> minIndex <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j&lt;n; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[minIndex] &#123;</span><br><span class="line">minIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> minIndex != i &#123;</span><br><span class="line">arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">SelectionSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔"><a href="#希尔" class="headerlink" title="希尔"></a>希尔</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 希尔排序是按照不同步长对元素进行插入排序</span></span><br><span class="line"><span class="comment">// 不稳定  eg  5 2 2 步长为2时，5和第二个2交换，破坏稳定性</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShellSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 遍历间隔</span></span><br><span class="line"><span class="keyword">for</span> gap:=n/<span class="number">2</span>; gap&gt;<span class="number">0</span>; gap/=<span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">// 从第gap个开始</span></span><br><span class="line"><span class="keyword">for</span> i:=gap; i&lt;n; i++ &#123;</span><br><span class="line"><span class="comment">// 之前的分组都要过一遍，比如gap=2时，42比较，21比较</span></span><br><span class="line"><span class="keyword">for</span> j:=i; j-gap&gt;=<span class="number">0</span> &amp;&amp; arr[j-gap] &gt; arr[j]; j -= gap&#123;</span><br><span class="line">arr[j-gap], arr[j] = arr[j], arr[j-gap]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">ShellSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 一开始先把数组从中间划分成两个子数组，一直递归地把子数组划分成更小的子数组，直到子数组里面只有一个元素，这个时候才开始排序，排序的方法就是按照大小顺序合并两个元素，接着依次按照递归的返回顺序，不断地合并排好序的子数组，直到最后把整个数组的顺序排好。</span></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(nlogn)  进行logn层切分, 每层合并复杂度都是O(n)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(n)结果需要用一个O(n)的数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Merge</span><span class="params">(left []<span class="keyword">int</span>, right []<span class="keyword">int</span>)</span> <span class="params">(res []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">res = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">m, n := <span class="built_in">len</span>(left), <span class="built_in">len</span>(right)</span><br><span class="line">i, j:=<span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ; i&lt;m &amp;&amp; j&lt;n;  &#123;</span><br><span class="line"><span class="keyword">if</span> left[i] &lt; right[j] &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, left[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, right[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i == m &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, right[j:]...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> j == n &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, left[i:]...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MergeSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> <span class="params">(res []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i := <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">left := MergeSort(arr[<span class="number">0</span>:i])</span><br><span class="line">right := MergeSort(arr[i:])</span><br><span class="line"></span><br><span class="line">result := Merge(left, right)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;</span><br><span class="line">res := MergeSort(arr)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 一开始先把数组从中间划分成两个子数组，一直递归地把子数组划分成更小的子数组，直到子数组里面只有一个元素，这个时候才开始排序，排序的方法就是按照大小顺序合并两个元素，接着依次按照递归的返回顺序，不断地合并排好序的子数组，直到最后把整个数组的顺序排好。</span></span><br><span class="line"><span class="comment">// 不稳定  eg 1 2 2* 3 把2*作为key 那么2将会放在2*后</span></span><br><span class="line"><span class="comment">// 时间复杂度O(nlogn) logn次分解，每次都要进行n次比较  最佳情况：每次选出来的数都是中间值  最坏：数组为逆序</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(logn)递归次数为logn, 每次都需要额外的O(1)空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="keyword">int</span>, start <span class="keyword">int</span>, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i, j := start, end</span><br><span class="line">key := arr[(start+end)/<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt;= j &#123;</span><br><span class="line"><span class="keyword">for</span> arr[i] &lt; key  &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arr[j] &gt; key &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt;= j &#123;</span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">i++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start &lt; j &#123;</span><br><span class="line">QuickSort(arr, start, j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; end &#123;</span><br><span class="line">QuickSort(arr, i, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;</span><br><span class="line">QuickSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapAdjust</span><span class="params">(arr []<span class="keyword">int</span>, k, length <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// k为父节点，i为左子节点</span></span><br><span class="line">i := <span class="number">2</span>*k+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= length &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择左右节点中最大的, 如果没有有右节点就是左节点最大</span></span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> &lt; length &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>] &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父节点和最大的子节点交换</span></span><br><span class="line"><span class="keyword">if</span> arr[k] &lt; arr[i] &#123;</span><br><span class="line">arr[k], arr[i] = arr[i], arr[k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续调整子节点</span></span><br><span class="line">k = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 自底向上调整</span></span><br><span class="line"><span class="keyword">for</span> i:=n/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">HeapAdjust(arr, i, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">arr[n<span class="number">-1</span>], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[n<span class="number">-1</span>]</span><br><span class="line">n--</span><br><span class="line">HeapAdjust(arr, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">124</span>&#125;</span><br><span class="line">HeapSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> sort </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题(计算机基础)</title>
      <link href="/2020/08/05/interview/"/>
      <url>/2020/08/05/interview/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul><li><p>A, atomacity 原子性 事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p></li><li><p>C, consistency 一致性</p><p>事务在完成时，必须使所有的数据都保持一致状态（各种 constraint 不被破坏）。</p></li><li><p>I, isolation 隔离性  一个事务的影响在该事务提交前对其他事务都不可见。</p></li><li><p>D, durability 持久性</p><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p></li></ul><h4 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h4><p><a href="https://cloud.tencent.com/developer/article/1415705" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1415705</a></p><p><a href="https://juejin.im/post/6844904029617651720" target="_blank" rel="noopener">https://juejin.im/post/6844904029617651720</a></p><h5 id="1NF"><a href="#1NF" class="headerlink" title="1NF:"></a>1NF:</h5><p>数据原子性，表中的字段不可再分。eg地区字段可以分解为省份，城市，和具体地址三个字端。</p><h5 id="2NF"><a href="#2NF" class="headerlink" title="2NF:"></a>2NF:</h5><p>在1NF的基础上，消除了部分函数依赖，即每个非主属性完全依赖于主键。</p><p>eg：一个选课关系表有（学号，姓名，课号）三个字段，因为一个学生对应多个课程，一个课程对应多个学生，所以（学号，课号）可以唯一确定一条记录。用（学号，课号）作为主键，但是姓名可以根据学号唯一确定，所以姓名部分函数依赖于学号，这不符合第二范式的定义。</p><p><strong>带来的问题</strong></p><p>数据冗余</p><p>增删改出现问题 eg：如果想增加一个课程，这个课程如果没有人选就无法添加，如果一个课程只有一个人选，那么退课的时候也会删除课程，如果要更新课程的名称，那就要更新所有包含此课程的记录。</p><h5 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h5><p>在2NF的基础上，消除非主属性对主属性的传递函数依赖。</p><p>不符合3NF会带来数据冗余和更新异常的问题。（更新异常：有重复的冗余信息，修改时需要同时修改多条记录，否则会出现数据不一致的情况 。）</p><p>eg：（学号，系号，系名）中，学号决定系号，系号决定系名，这样存在传递函数依赖学号决定系名。</p><p>范式化的优点：</p><ul><li>可以尽量的减少数据冗余，数据表更新快体积小</li><li>范式化的更新操作比反范式化更快</li><li>范式化的表通常比反范式化更小</li></ul><p>缺点：</p><ul><li>对于查询需要对多个表进行关联（导致性能降低）</li><li>更难进行索引优化</li></ul><h4 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h4><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>osi模型</p><ol><li>应用层(数据):是计算机用户以及各种应用程序和网络之间的接口</li><li>表示层(数据):它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。</li><li><p>会话层(数据):不同机器上的用户建立会话</p></li><li><p>传输层(段):实现网络不同主机上用户进程之间的数据通信，可靠与不可靠的传输，传输层的错误检测，流量控制等</p></li><li>网络层(包):提供逻辑地址(IP)、通过路径选择算法将数据从源端到目的端</li><li>数据链路层(帧):将比特流数据封装成帧，增加错误检测与修正等功能，增加可靠性</li><li>物理层(比特流):利用物理介质提供物理连接，提供比特流传输</li></ol><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><p>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</p><p>网络层：负责路由以及把分组报文发送给目标网络或主机。点对点</p><p>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</p><p>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</p><h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><p>1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。</p><p>2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。</p><p>3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。</p><p>4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><p>广播发送ARP请求，单播发送ARP响应。</p><ul><li><p>作用</p><p>ARP 为 IP 地址到对应的硬件地址提供动态映射。</p></li><li><p>点对点链路使用 ARP 吗?</p><p>不使用</p></li><li><p>ARP 高效运行的关键是什么?</p><p>关键是每个主机上都有一个 ARP 的高速缓存。</p></li></ul><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="TCP-UDP简单介绍"><a href="#TCP-UDP简单介绍" class="headerlink" title="TCP UDP简单介绍"></a>TCP UDP简单介绍</h4><p>TCP提供的是面向连接，可靠的字节流服务。即客户端和服务器交换数据前，必须现在双方之间建立一个TCP连接，之后才能传输数据。并且提供超时重发，流量控制等功能，保证数据能从一端传到另一端。</p><p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。</p><p><strong>使用场景</strong></p><p>对实时性要求高和高速传输的场合下使用UDP;在可靠性要求低，追求效率的情况下使用UDP;<br>需要传输大量数据且对可靠性要求高的情况下使用TCP</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>三次握手的目的是为了建立安全可靠的连接。</p><p>第一次握手：客户端给服务端发送一个报文，报文中SYN位置1</p><p>第二次握手：服务端接收到报文后，就知道客户端想建立一个连接，然后服务端给客户端发送一个确认报文，在这个报文中 ACK位置1</p><p>两次握手之后，对于客户端而言，已经知道服务端的接收、发送能⼒是正常的，但是服务端并不能确认客户端的接收能力是否正常，所以要进行第三次握手</p><p>第三次握手：客户端给服务端发送报文，报文中ACK位置1</p><p>通过三次握手之后，服务端和客户端都知道彼此的发送和接收能力都是正常的，那么这个连接就可以被安全的建立了。</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>四次挥手也是由客户端首先发起的</p><p>第一次挥手：客户端会发送一个报文，在报文中FIN位置1</p><p>第二次挥手：当服务端收到这个报文后，会发送报文 ACK=1作为应答，此时服务端知道客户端想和他断开连接，但此时服务端不一定能做好准备，所以此时服务端只能告诉客户端已经收到断开连接的请求</p><p>第三次挥手：当服务端做好断开连接的准备时，发送一个报文给客户端，报文中FIN标志位 置1</p><p>第四次挥手：当这个报文发给客户端时，客户端同样要给服务端发送一个确认报文，ACK=1</p><p>通过这四次挥手就能得出客户端和服务端都做好了断开连接的准备，于是连接可以断开了。</p><ul><li><p>为什么客户端发送 ACK 之后不直接关闭，⽽而是要等一阵子才关闭（TIME_WAIT）。</p><p>这其中的原因就是，要确保服务器是否已经收到了ACK 报文。如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到报⽂之后，就知道之前的报⽂文丢失了，然后再次发送 ACK 报⽂。</p></li></ul><h4 id="tcp拥塞控制"><a href="#tcp拥塞控制" class="headerlink" title="tcp拥塞控制"></a>tcp拥塞控制</h4><p><a href="https://blog.csdn.net/qq_43313035/article/details/89069962" target="_blank" rel="noopener">https://blog.csdn.net/qq_43313035/article/details/89069962</a></p><p>拥塞：对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降。</p><p>拥塞控制是为了提高网络利用率，降低丢包率。发送方维护一个拥塞窗口。</p><p>主要是下面四种机制：</p><p><strong>1- 慢开始</strong></p><p> 慢开始是指在TCP开始发送报文段时先设置拥塞窗口为1。然后指数增加窗口大小</p><p><strong>2-拥塞避免</strong></p><p>当窗口大小&gt;阈值时，拥塞窗口大小增加改为线型增加。</p><p><strong>3- 快速重传</strong></p><ol><li>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设 置的重传计时器时间到期。</li><li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量。</li></ol><p><strong>4- 快速恢复</strong><br>连续收到3个对数据包的重复确认，发送端就知道需要马上重传。并且把 ssthresh（慢开始门限）和窗口大小设置为当前窗口的一半，然后开始执行拥塞避免算法。</p><h4 id="tcp流量控制"><a href="#tcp流量控制" class="headerlink" title="tcp流量控制"></a>tcp流量控制</h4><p>如果发送端发送数据太快，接收端来不及接收，可能会丢失数据。所以流量控制是控制发送端发送速率，要让接收端来得及接收。</p><p>具体就是：</p><p>接收方每次收到数据包，可以在发送确定报⽂的时候，同时告诉发送方⾃己的缓存区还剩余多少是空闲的，我们也把缓存区的剩余⼤小称之为接收窗口⼤小。</p><p>发送方收到之后，便会调整自己的发送速率，也就是调整自己发送窗口的大小，当发送方收到接收窗口的大小为0时，发送方就会停止发送数据，防止出现大量丢包情况的发生。</p><p>发送方如果收到零窗口通知，就会启动计时器。若计时器的时间到期，就会发送一个报文：如果接收方可以接收数据就告诉他此时接收窗口的大小，如果接收大小还是为0，发送方就重新设置计时器。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p><a href="[https://troywu0.gitbooks.io/interview/content/http%E5%8D%8F%E8%AE%AE.html](https://troywu0.gitbooks.io/interview/content/http协议.html">http协议-面试</a></p><p>http协议是超文本传输协议，它规定了浏览器怎样向万维网请求文档，以及服务器如何把文档传递给浏览器。从层次的角度来看，http协议是一个应用层协议。</p><p>在浏览器和服务器之间的请求和响应，必须按照规定的格式和遵循一定格式，这些格式和规则就是http。</p><p>HTTP就是一种无状态协议，它对用户的操作没有记忆功能。为了解决这种情况，引出了<strong>Cookie&amp;Session</strong>机制，让浏览器具备了记忆功能</p><p>他的工作流程大概是这样的：每个站点都有一个服务器进程，不断监听tcp的80端口，查看是否有浏览器向它发送连接请求。一旦监听到连接请求并建立了tcp连接之后，浏览器就向服务器发出页面请求，服务器就要返回所请求的页面作为响应。最后tcp连接被释放。</p><h4 id="从输入URL到页面加载发生了什么"><a href="#从输入URL到页面加载发生了什么" class="headerlink" title="从输入URL到页面加载发生了什么"></a><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">从输入URL到页面加载发生了什么</a></h4><ol><li>浏览器请求dns解析域名的ip地址</li><li>浏览器和服务器建立tcp连接</li><li>浏览器向服务器发出请求</li><li>服务器给出响应，并把相应的文件发送给浏览器</li><li>释放tcp连接</li><li>浏览器渲染文本</li></ol><h4 id="http-1-0-1-1"><a href="#http-1-0-1-1" class="headerlink" title="http 1.0 / 1.1"></a>http 1.0 / 1.1</h4><p>http1.1相较于1.0有以下新的特性：</p><ul><li>支持长连接   一个tcp连接上有多个请求，不用重复建立和断开连接，提高带宽利用率</li><li>增加host字段</li><li>新增了24个状态码 （410表示对象被永久删除）</li><li>引入range字段，支持之请求资源的一部分，节省了带宽</li><li>缓存控制字段 cache-control  服务端响应时，回传<strong>max-age参数</strong>，那么客户端在下次请求时，根据上次回传的max-age值，首先判断缓存的<strong>相对时间</strong>如果还未超过时间，则不发起请求，直接从Cache中读取。反之，则重新请求。</li><li>支持断点传输</li></ul><h4 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http 2.0"></a>http 2.0</h4><ul><li>支持二进制传输</li><li>服务器推送：服务器可以额外的向客户端推送资源，而无需客户端明确的请求</li><li>多路复用，一个Tcp中多个http请求是并行的</li></ul><h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p><a href="https://blog.csdn.net/qq_31967569/article/details/84296432" target="_blank" rel="noopener">https加密原理</a></p><p><strong>发送者-&gt;接收者：</strong></p><ol><li>message通过hash生成消息摘要</li><li>用private key加密摘要生成签名</li><li>把message和签名一起发送给接收者</li><li>接收者对message进行hash处理得到消息摘要，再用public key把签名解密，两者相等表示验证成功</li></ol><p><strong>公钥证书：</strong></p><ol><li>服务端生成密钥对，私钥自己保管，公钥交给CA</li><li>CA生成密钥对，用自己的私钥对服务端的公钥进行签名生成数字证书，证书中包含服务端公钥</li><li>客户端获取证书</li><li>用公钥对证书进行签名认证，成功说明公钥匙服务端的</li><li>客户端可以用公钥加密消息发送给服务端</li><li>服务端收到密文后用私钥解密</li></ol><p><a href="https://segmentfault.com/a/1190000019976390" target="_blank" rel="noopener">https流程</a></p><p><a href="https://www.jianshu.com/p/e30a8c4fa329" target="_blank" rel="noopener">流程详细解释</a></p><ol><li>client请求server获取证书</li><li>客户端验证证书合法性</li><li>若合法，则生成一个随机值（之后对称加密信息要用到）</li><li>用证书中的公钥对这个随机值加密，发送给服务端</li><li>服务端用私钥对密文解密，获取随机值</li><li>服务端将随机值和信息混合在一起进行对称加密，发送给客户端</li><li>客户端解密</li></ol><h4 id="get-post-区别"><a href="#get-post-区别" class="headerlink" title="get post 区别"></a>get post 区别</h4><ul><li>在浏览器回退时，GET是无害的，POST会再次提交请求。</li><li>GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留</li><li>GET参数通过URL传递，POST放在Request body中。</li><li>GET 请求在url中传送的参数有长度限制，而POST没有</li><li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p></li><li><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p></li></ul><h4 id="cookie-session区别"><a href="#cookie-session区别" class="headerlink" title="cookie session区别"></a>cookie session区别</h4><ul><li>cookie是把用户的数据写在用户本地浏览器上, 其他网站也可以扫描使用你的cookie，容易泄露自己网站用户的隐私，而且一般浏览器对单个网站站点有cookie数量与大小的限制。</li><li>Session是把用户的数据写在用户的独占session上，存储在服务器上，一般只将session的id存储在cookie中。但将数据存储在服务器对服务器的成本会高。 </li><li>session是由服务器创建的，开发人员可以在服务器上通过request对象的getsession方法得到session 一般情况，登录信息等重要信息存储在session中，其他信息存储在cookie中</li><li>工作流程：<br>  服务器会为每一个访问服务器的用户创建一个session对象，并且把session对象的id保存在本地cookie上，只要用户再次访问服务器时，带着session的id，服务器就会匹配用户在服务器上的session，根据session中的数据，还原用户上次的浏览状态或提供其他人性化服务。</li></ul><h4 id="url各部分都是什么"><a href="#url各部分都是什么" class="headerlink" title="url各部分都是什么"></a>url各部分都是什么</h4><p>　protocol :// hostname[:port] / path / [?query]</p><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><p>dns的作用是把域名和主机名转换成ip地址。</p><p>解析流程：</p><p>（需要明确的是，每一级域名都有自己的NS记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。）</p><p>dns解析是分级查询。</p><p><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">dns查询原理</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h4 id="进程线程区别"><a href="#进程线程区别" class="headerlink" title="进程线程区别"></a>进程线程区别</h4><p><strong>（1）联系</strong></p><p> 线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p><p><strong>（2）区别：</strong></p><p>根本区别：进程是CPU资源分配的基本单位，线程是独立运行和独立调度的基本单位（CPU上真正运行的是线程）。</p><p>地址空间：线程共享本进程的地址空间，而进程之间是独立的地址空间。</p><p>资源方面：线程本身不拥有系统资源，只拥有一些在运行过程中必不可少的资源（如程序计数器，寄存器等），所以线程之间切换的开销比较小，而进程之间的切换开销会大一些。</p><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>协程是一种用户态的轻量级线程，<strong>协程的调度完全由用户控制</strong>。协程切换开销比较小。</p><p>线程是抢占式的调度，而协程是协同式的调度，协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，协程也失去了标准线程使用多CPU的能力（协程不支持并行）。</p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p><a href="https://www.jianshu.com/p/1f5195dcc75b" target="_blank" rel="noopener">什么是CPU密集型、IO密集型</a></p><p><strong>1）需要频繁创建销毁的优先用线程</strong></p><p><strong>2)   线程和协程推荐在IO密集型的任务(比如网络调用)中使用，而在CPU密集型的任务中，表现较差。</strong></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p><a href="https://www.cnblogs.com/shan1393/p/9046140.html" target="_blank" rel="noopener">产生死锁的四个条件和解决办法</a></p><h4 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h4><p><a href="https://blog.csdn.net/u010889616/article/details/48424501" target="_blank" rel="noopener">批处理系统、分时处理系统、实时处理系统简介</a></p><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><p><a href="https://zhuanlan.zhihu.com/p/135395279" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/135395279</a></p><p>目的：实现信息交换，实现进程的互斥和同步</p><ol><li><p>共享内存</p><p>在内存中划出一块共享存储区域，各个进程可通过对该共享区的读写来实现通信。</p><p><strong>特点</strong>：<br> ​   1. 不用从用户态到内核态的频繁切换和拷贝数据，直接从内存中读取就可以。<br> ​   2. 共享内存是临界资源，所以需要操作时必须要保证原子性。使用信号量或者互斥锁都可以。</p></li><li><p>管道通信系统</p><p>管道指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件。发送进程以字符流形式将数据送入管道，接收进程从管道中接受数据。</p><p><strong>特点</strong>:</p><ol><li>半双工。一个进程对pipe进行读写时，另一进程需要等待。</li><li>数据单向流动。</li><li>只能在父子进程或兄弟进程间使用</li></ol><p>named_pipe 命名管道：可以在无亲缘关系的进程之间进行通讯</p></li><li><p>socket</p><p> <strong>优点</strong>：1）传输数据为字节级，传输数据可自定义，数据量小效率高；2）传输数据时间短，性能高；3) 适合于客户端和服务器端之间信息实时交互；4) 可以加密,数据安全性强</p><p><strong>缺点</strong>：1) 需对传输的数据进行解析，转化成应用级的数据。</p></li><li><p>消息队列</p><p>消息队列是消息的链表。克服了管道只能承载无格式字节流以及缓冲区大小受限等特点。</p><p>可以实现任意进程间的通信，并通过系统调用函数来实现消息发送和接收之间的同步，无需考虑同步问题</p></li><li><p>信号量</p><p>本质是一个计数器，用pv操作实现进程间的通信和互斥。</p><p>​        PV操作用于同一进程，实现互斥。</p><p>​        PV操作用于不同进程，实现同步。</p></li></ol><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul><li><p>golang</p><p><a href="http://golang.iswbm.com/en/latest/chapters/p02.html" target="_blank" rel="noopener">http://golang.iswbm.com/en/latest/chapters/p02.html</a></p></li><li><p>jwt</p><p><a href="http://blacston.com/2019/07/26/jwt-go/#more">http://blacston.com/2019/07/26/jwt-go/#more</a></p></li><li><p><a href="https://segmentfault.com/a/1190000011450120" target="_blank" rel="noopener">cors</a></p></li><li><p><a href="https://blog.csdn.net/dc8899/article/details/21336467" target="_blank" rel="noopener">mvc架构</a></p></li><li><p>orm</p></li><li><p><a href="https://www.cnblogs.com/wangyongsong/articles/10004370.html" target="_blank" rel="noopener">restful</a></p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="noopener">稳定性</a></p><p><img src="https://img-blog.csdn.net/20180117112126129?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQyODAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker将应用程序及其所有依赖项打包在一起。这可以保证无论其环境如何，软件始终运行相同。</p><p><a href="https://hit-alibaba.github.io/interview/basic/arch/Concurrency.html" target="_blank" rel="noopener">面试总结</a></p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> os </tag>
            
            <tag> database </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 父子组件通信</title>
      <link href="/2020/03/29/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
      <url>/2020/03/29/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="父到子"><a href="#父到子" class="headerlink" title="父到子"></a>父到子</h2><p>通过在父组件的prop属性向子组件传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;student :student=&quot;liming&quot;&gt;&lt;/student&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    姓名: &#123;&#123; student.name &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      student: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        default: ()=&gt;(&#123;&#125;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="子到父"><a href="#子到父" class="headerlink" title="子到父"></a>子到父</h2><p>子组件通过<code>$emit(&#39;eventName&#39;, data)</code>产生事件, 在父组件中监听此事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;MyInput @update:data=&quot;handleUpdate&quot;&gt;&lt;/MyInput&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">      handleUpdate(data) &#123;</span><br><span class="line">        // do something</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">// 当el-input的输入框的值发生改变, 会触发input事件</span><br><span class="line">&lt;el-input @input=&quot;$emit(&apos;update:data&apos;, value)&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h2><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><p>用v-model实现, v-model只是语法糖, 以下两种写法等同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 转换后：</span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;message&quot;</span><br><span class="line">  v-on:input=&quot;message=$event.target.value&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>v-bind把message变量赋值给input的value, 这是<code>input</code>接收数据</li><li>v-on监听input事件, 当检测到数据变化, 修改message的值, 这是input发送数据</li><li>两者在一起实现了当input的value改变, 则修改message变量</li></ul><p>实现思想: 统一数据源</p><h3 id="方案1-用model属性"><a href="#方案1-用model属性" class="headerlink" title="方案1 用model属性"></a>方案1 用model属性</h3><p>这个方案和上面的一样, 只不过v-model默认绑定属性名为value, 默认事件名为input, 这个方法可以<strong>自定义prop和event</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;SearchBar v-models=&quot;text&quot;&gt;&lt;/SearchBar&gt;</span><br><span class="line">&lt;!--等价于--&gt;、</span><br><span class="line">&lt;SearchBar :search=&quot;text&quot; @update:search=&quot;this.text = $event.target.value&quot;&gt;&lt;/SearchBar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data: ()=&gt; &#123;</span><br><span class="line">      text: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleUpdate(val) &#123;</span><br><span class="line">        this.text = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;SearchBar&quot;,</span><br><span class="line">    model: &#123;</span><br><span class="line">      prop: &apos;search&apos;,</span><br><span class="line">      event: &apos;update:search&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      search: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方案2-用setter-getter"><a href="#方案2-用setter-getter" class="headerlink" title="方案2: 用setter, getter"></a>方案2: 用setter, getter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;model&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">          return this.value</span><br><span class="line">        &#125;,</span><br><span class="line">        set (newVal) &#123;</span><br><span class="line">          this.$emit(&apos;update:value&apos;, newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上例子中, 父组件传来值为value, 如果直接修改子组件中的value，并不会告知父组件数据已修改, 所以设置一个<strong>中间变量</strong>, 把它的getter设置为value, <strong>setter则通知父组件修改数据</strong></p><h3 id="方案3-使用watch"><a href="#方案3-使用watch" class="headerlink" title="方案3: 使用watch"></a>方案3: 使用watch</h3><p>此方法也是通过监听属性改变, 然后用emit产生事件 实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input :value=&quot;searchText&quot; @update:value=&quot;handleUpdate&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data: ()=&gt; &#123;</span><br><span class="line">searchText: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleUpdate(val) &#123;</span><br><span class="line">        this.searchText = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data: ()=&gt; &#123;</span><br><span class="line">text: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    watch: &#123;</span><br><span class="line">      text(newVal, oldVal) &#123;</span><br><span class="line">        this.text = newVal;  // 修改子组件的值</span><br><span class="line">        this.$emit(&apos;update:value&apos;, newVal)// 并且通知父组件</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方案4-使用-sync-修饰符"><a href="#方案4-使用-sync-修饰符" class="headerlink" title="方案4: 使用 .sync 修饰符"></a>方案4: 使用 .sync 修饰符</h3><p>事实上，<code>.sync</code>修饰符是一个简写，它做了一件事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;    </span><br><span class="line">&lt;children :msg.sync=&quot;parentMsg&quot;&gt;&lt;/children&gt;    </span><br><span class="line"></span><br><span class="line">&lt;!-- 等价于 --&gt;    </span><br><span class="line">&lt;children :msg=&quot;parentMsg&quot; @update:msg=&quot;parentMsg = $event&quot;&lt;/children&gt;    &lt;!-- 这里的$event就是子组件$emit传递的参数 --&gt; </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>只是少写了个update:[prop]的监听事件而已, 当然子组件该怎么写还怎么写</p><h3 id="minxin"><a href="#minxin" class="headerlink" title="minxin"></a>minxin</h3><p>为了实现双向数据绑定，每次创建组件时都需要写相同的代码，所以可以写一个mixin文件，增加重用性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// formMixin.js</span><br><span class="line">const formMixin = &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &quot;data&quot;,</span><br><span class="line">    event: &quot;update&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    formData: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.data;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        this.$emit(&quot;update&quot;, val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default formMixin;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
            <tag> 组件通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask+gunicorn+nginx部署</title>
      <link href="/2019/12/29/nginx%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/12/29/nginx%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<ol><li>买服务器</li><li>ubuntu系统</li><li>开启80 8080端口 <a href="https://www.cnblogs.com/codeman-hf/p/10535923.html" target="_blank" rel="noopener">教程</a></li></ol><ol><li><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li><li><p>测试nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>然后访问ip地址 <a href="https://blog.csdn.net/ssssSFN/article/details/89501469" target="_blank" rel="noopener">如何查看公网ip</a></p></li><li><p>安装docker <a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">docker安装教程</a></p></li><li><p>编写dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">RUN</span> mkdir /home/web &amp;&amp; cd /home/web</span><br><span class="line">WORKDIR /home/web</span><br><span class="line">COPY ./backend/* /home/web/</span><br><span class="line">RUN pip install -r ./requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/  \</span><br><span class="line">    &amp;&amp; pip install gunicorn</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [ "gunicorn", "-w", "5",  "api:app"]</span><br></pre></td></tr></table></figure></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build . flask:0.1</span><br><span class="line">docker save [image_id] &gt; docker.tar</span><br></pre></td></tr></table></figure></li><li><p>在服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i docker.tar</span><br></pre></td></tr></table></figure></li><li><p><code>npm run build &amp;&amp; scp dist/* root@ip:path/</code></p></li><li><p>编写nginx配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">server_name  ipAddr;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root /root/app;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen       8081;</span><br><span class="line">server_name  ipAddr;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass  http://127.0.0.1:8080</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Forwarded-For</span><br><span class="line">$proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>docker run -d -p 8080:8080 image_id gunicorn -w 4 api:app</code></p><p>报错说明端口占用</p><p><code>ps aux | grep 8080</code></p><p><code>ps -ef | grep 8080</code></p></li></ol><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="https://www.cnblogs.com/doocool/p/8847288.html" target="_blank" rel="noopener">Vue+Flask部署到阿里云服务器</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> vue </tag>
            
            <tag> nginx </tag>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack和vue配合使用</title>
      <link href="/2019/11/18/Vuejs%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%92%8C/"/>
      <url>/2019/11/18/Vuejs%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── dist  # 打包后的资源</span><br><span class="line">│   ├── bundle.js  # 打包后的js文件</span><br><span class="line">│   └── img</span><br><span class="line">├── index.html# 最外层文件</span><br><span class="line">├── node_modules# 模块</span><br><span class="line">├── src# 源代码，在此编写代码</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   ├── js</span><br><span class="line">│   ├── main.js# </span><br><span class="line">│   └── vue# 存放vue组件文件</span><br><span class="line">└── webpack.config.js# 配置</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>vue实例中不要写太多代码，把代码都写到<code>*.vue</code>文件中，以模块的方式导入</li><li>实例化一个vue对象时，vue会将el选择的节点替换为template的内容</li><li><a href="[https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C](https://cn.vuejs.org/v2/guide/components-registration.html#局部注册">组件注册</a>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button class="btn" @click="btnClick"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                message: <span class="string">'hello webpack'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.message = <span class="string">"changed"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">        background: url('../img</span><span class="regexp">/timg.jpeg');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .btn &#123;</span></span><br><span class="line"><span class="regexp">        width: 50px;</span></span><br><span class="line"><span class="regexp">        height: 30px;</span></span><br><span class="line"><span class="regexp">        background: red;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>script标签里的<code>export default</code>是es6的语法，导出默认对象，这样再其他文件中import的时候就不需要知道原模块定义的变量名</p></li><li><p><a href="https://www.runoob.com/w3cnote/es6-module.html" target="_blank" rel="noopener">ES6模块</a></p></li></ul><h2 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h2><ol><li>npm 下载</li><li>webpack.config.js 配置<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3>打包代码到dist文件夹后，index.html不在文件夹内，那么打包的js文件也没有意义了，现在用<code>HtmlWebpackPlugin</code>插件解决这个问题</li><li><code>npm install html-webpack-plugin --save-dev</code></li><li>修改<code>webpack.config.js</code>中plugin部分如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><ul><li>template指明根据什么模板来生成index.html</li></ul><p><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin</a></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>使用 <code>UglifyjsWebpackPlugin</code>将打包后的代码进行压缩</p><ol><li><code>$ npm install uglifyjs-webpack-plugin --save-dev</code></li><li>修改<code>webpack.config.js</code>中plugin部分如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyjsWebpackPlugin</a></p><h2 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h2><p>不用每次写完代码都npm run build，让页面实时刷新</p><ol><li><code>npm install --save-dev webpack-dev-server</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ... </span><br><span class="line">  devServer: &#123;</span><br><span class="line">      contentBase: <span class="string">'./dist'</span>,<span class="comment">// 把这个文件夹作为</span></span><br><span class="line">      inline: <span class="literal">true</span>,<span class="comment">// 实时更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>输入<code>./node_modules/.bin/webpack-dev-server</code>即可开启，但是这样太麻烦，可以在<code>package.json</code>里配置scripts</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"></span><br><span class="line">  "dev": "webpack-dev-server --open"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>–open 表示用浏览器打开</li></ul></li></ol><h2 id="配置文件的分离"><a href="#配置文件的分离" class="headerlink" title="配置文件的分离"></a>配置文件的分离</h2><p>上一个例子中为了实现本地开发服务器配置了一些东西，但是在实际编译的时候不需要，压缩代码的插件UglifyJsPlugin在编译的时候才用到，所以要分离配置文件</p><ol><li><p><code>npm install --save-dev webpack-merge</code></p></li><li><p>根目录新建一个build目录, 新建三个文件 base.config.js dev.config.js prod.config.js 分别存放公共部分配置，开发配置，生产配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">              &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8192</span>,</span><br><span class="line">                    name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">              loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            loader: <span class="string">'vue-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">          template: <span class="string">'index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dev.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./base.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prod.config.js</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./base.config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>记得修改base.config.js力path中的dist为../dist</li></ul></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/baichen99/webpack_test" target="_blank" rel="noopener">github</a></p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go net/http使用方法</title>
      <link href="/2019/08/13/go-http/"/>
      <url>/2019/08/13/go-http/</url>
      
        <content type="html"><![CDATA[<h2 id="get-post"><a href="#get-post" class="headerlink" title="get, post"></a>get, post</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resp, err := http.Get(<span class="string">"http://example.com/"</span>)</span><br><span class="line"></span><br><span class="line">resp, err := http.Post(<span class="string">"http://example.com/upload"</span>, <span class="string">"image/jpeg"</span>, &amp;buf)</span><br><span class="line"></span><br><span class="line">resp, err := http.PostForm(<span class="string">"http://example.com/form"</span>,</span><br><span class="line">url.Values&#123;<span class="string">"key"</span>: &#123;<span class="string">"Value"</span>&#125;, <span class="string">"id"</span>: &#123;<span class="string">"123"</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用完respone后要关闭连接</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取响应中的内容</span></span><br><span class="line">b, _ := ioutil.ReadAll(resp.Body) <span class="comment">// b 为[]byte类型 需要类型转换</span></span><br><span class="line">s := <span class="keyword">string</span>(b)</span><br></pre></td></tr></table></figure><p>Post方法参数分别为 url, content-type, data。data要和content-type对应。<a href="https://zhuanlan.zhihu.com/p/129057481" target="_blank" rel="noopener">具体看这里</a></p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>要管理HTTP客户端的头域、重定向策略和其他设置，创建一个Client：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Transport RoundTripper</span><br><span class="line">  CheckRedirect <span class="function"><span class="keyword">func</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function">  <span class="title">Jar</span> <span class="title">CookieJar</span> // 给<span class="title">client</span>插入<span class="title">cookie</span>，每次请求都会带上它</span></span><br><span class="line"><span class="function">  <span class="title">Timeout</span> <span class="title">time</span>.<span class="title">Duration</span> // 说明每次请求的最大时间</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>使用 <code>func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</code>创建一个request 后，可以管理header<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数：请求方法，url，请求数据</span></span><br><span class="line"> req, _ := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://blacston.com"</span>, <span class="literal">nil</span>)</span><br><span class="line"> req.Header.Add(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar := cookiejar.Jar&#123;&#125;</span><br><span class="line">jar.SetCookies(<span class="string">"url"</span>, cookies)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cookie <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">Path       <span class="keyword">string</span>    <span class="comment">// optional</span></span><br><span class="line">Domain     <span class="keyword">string</span>    <span class="comment">// optional</span></span><br><span class="line">Expires    time.Time <span class="comment">// optional</span></span><br><span class="line">RawExpires <span class="keyword">string</span>    <span class="comment">// for reading cookies only</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MaxAge=0 means no 'Max-Age' attribute specified.</span></span><br><span class="line"><span class="comment">// MaxAge&lt;0 means delete cookie now, equivalently 'Max-Age: 0'</span></span><br><span class="line"><span class="comment">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span></span><br><span class="line">MaxAge   <span class="keyword">int</span></span><br><span class="line">Secure   <span class="keyword">bool</span></span><br><span class="line">HttpOnly <span class="keyword">bool</span></span><br><span class="line">SameSite SameSite</span><br><span class="line">Raw      <span class="keyword">string</span></span><br><span class="line">Unparsed []<span class="keyword">string</span> <span class="comment">// Raw text of unparsed attribute-value pairs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ul><li><p>header</p><p>content-type: application/json</p></li><li><p>body:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"passowrd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := http.DefaultClient</span><br><span class="line">    reqUrl := <span class="string">"http://121.36.63.57:8888/user/login"</span></span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    data[<span class="string">"username"</span>] = <span class="string">"admin"</span></span><br><span class="line">    data[<span class="string">"password"</span>] = <span class="string">"password"</span></span><br><span class="line"></span><br><span class="line">    jsonData, err := json.Marshal(data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req, _ := http.NewRequest(http.MethodPost, reqUrl, strings.NewReader(<span class="keyword">string</span>(jsonData)))</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    resp, _ := client.Do(req)</span><br><span class="line">    b, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AdrianDuan/CCSL/blob/master/utils/password.go" target="_blank" rel="noopener">ShuLogin</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gocv的使用</title>
      <link href="/2019/08/07/gocv/"/>
      <url>/2019/08/07/gocv/</url>
      
        <content type="html"><![CDATA[<h1 id="gocv"><a href="#gocv" class="headerlink" title="gocv"></a>gocv</h1><h3 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(img)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="创建纯色图片"><a href="#创建纯色图片" class="headerlink" title="创建纯色图片"></a>创建纯色图片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateImgByBGR</span><span class="params">(sizex <span class="keyword">int</span>, sizey <span class="keyword">int</span>, b <span class="keyword">float64</span>, g <span class="keyword">float64</span>, r <span class="keyword">float64</span>)</span> <span class="title">gocv</span>.<span class="title">Mat</span></span> &#123;</span><br><span class="line">img := gocv.NewMatWithSizeFromScalar(gocv.NewScalar(b, g, r, <span class="number">255</span>), sizex, sizey, gocv.MatTypeCV8UC3)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">dst := gocv.NewMat()</span><br><span class="line">gocv.CvtColor(img, &amp;dst, gocv.ColorBGRToHSV)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(dst)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="inRange"><a href="#inRange" class="headerlink" title="inRange"></a>inRange</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">lb := gocv.NewScalar(<span class="number">68</span>, <span class="number">84</span>, <span class="number">153</span>, <span class="number">255</span>)</span><br><span class="line">ub := gocv.NewScalar(<span class="number">80</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">hsv := gocv.NewMat()</span><br><span class="line">mask := gocv.NewMat()</span><br><span class="line">gocv.CvtColor(img, &amp;hsv, gocv.ColorBGRToHSV)</span><br><span class="line">gocv.InRangeWithScalar(hsv, lb, ub, &amp;mask)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(mask)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="替换绿幕"><a href="#替换绿幕" class="headerlink" title="替换绿幕"></a>替换绿幕</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gocv.io/x/gocv"</span></span><br><span class="line"><span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateImg create a solid image based on params</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateImgByBGR</span><span class="params">(sizex <span class="keyword">int</span>, sizey <span class="keyword">int</span>, b <span class="keyword">float64</span>, g <span class="keyword">float64</span>, r <span class="keyword">float64</span>)</span> <span class="title">gocv</span>.<span class="title">Mat</span></span> &#123;</span><br><span class="line">img := gocv.NewMatWithSizeFromScalar(gocv.NewScalar(b, g, r, <span class="number">255</span>), sizex, sizey, gocv.MatTypeCV8UC3)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convert</span><span class="params">(srcPath <span class="keyword">string</span>, dstPath <span class="keyword">string</span>, r, g, b <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lb := gocv.NewScalar(<span class="number">68</span>, <span class="number">84</span>, <span class="number">153</span>, <span class="number">255</span>)</span><br><span class="line">ub := gocv.NewScalar(<span class="number">80</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">hsv := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> hsv.Close()</span><br><span class="line">mask := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> mask.Close()</span><br><span class="line">mask_inv := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> mask.Close()</span><br><span class="line">frame := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> frame.Close()</span><br><span class="line">person := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> frame.Close()</span><br><span class="line">kernel := gocv.GetStructuringElement(gocv.MorphRect, image.Pt(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">defer</span> kernel.Close()</span><br><span class="line"><span class="comment">//result := gocv.NewMat()</span></span><br><span class="line"><span class="comment">//defer frame.Close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capt, err := gocv.VideoCaptureFile(<span class="string">"video.mp4"</span>)</span><br><span class="line"><span class="keyword">defer</span> capt.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//count := capt.Get(gocv.VideoCaptureFrameCount)</span></span><br><span class="line"></span><br><span class="line">fps := capt.Get(gocv.VideoCaptureFPS)</span><br><span class="line">width := <span class="keyword">int</span>(capt.Get(gocv.VideoCaptureFrameWidth))</span><br><span class="line">height := <span class="keyword">int</span>(capt.Get(gocv.VideoCaptureFrameHeight))</span><br><span class="line">writer, err := gocv.VideoWriterFile(<span class="string">"output.mp4"</span>, <span class="string">"avc1"</span>, fps, width, height, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ok := capt.Read(&amp;frame); ok &#123;</span><br><span class="line">gocv.CvtColor(frame, &amp;hsv, gocv.ColorBGRToHSV)</span><br><span class="line">gocv.InRangeWithScalar(hsv, lb, ub, &amp;mask)</span><br><span class="line"></span><br><span class="line">gocv.BitwiseNot(mask, &amp;mask_inv)</span><br><span class="line">gocv.Erode(mask_inv, &amp;mask, kernel)</span><br><span class="line">gocv.BitwiseAndWithMask(frame, frame, &amp;person, mask_inv)</span><br><span class="line"></span><br><span class="line">err = writer.Write(person)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"err occur when write frame: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt-go的使用</title>
      <link href="/2019/07/26/jwt-go/"/>
      <url>/2019/07/26/jwt-go/</url>
      
        <content type="html"><![CDATA[<h1 id="go-jwt"><a href="#go-jwt" class="headerlink" title="go jwt"></a>go jwt</h1><h2 id="什么是jwt"><a href="#什么是jwt" class="headerlink" title="什么是jwt"></a>什么是jwt</h2><p>JSON Web Token通常用于 Oauth 2中的<code>Bearer</code> tokens</p><p>一个token分成三个部分，用<code>.</code>连接，前两个部分是用base64url编码的json对象，最后一部分是签名，使用相同的编码方式编码。</p><ol><li><p>第一部分叫header，包含JWT和签名算法比如HMAC, SHA256, RSA</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"typ"</span>: <span class="string">"JWT"</span>,</span><br><span class="line"><span class="string">"alg"</span>: <span class="string">"HS256"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二部分叫Playload(Claims)，存储数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"userId"</span>: <span class="string">"23581935-afsakngh12i-asdfaf"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>JWT规定了7个官方字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Signature<br>signature是对前两部分的签名，首先需要指定一个算法，按照下面的公式产生<br>HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret)</li></ol><h2 id="jwt使用方式"><a href="#jwt使用方式" class="headerlink" title="jwt使用方式"></a>jwt使用方式</h2><p>客户端收到服务器的JWT后，可以放在cookie里和localstorage里，但是这样不能跨域，更好的方法是放在请求头信息。<br>以后每次客户端与服务器通信都要带上jwt<br><code>Authorization: Bearer &lt;token&gt;</code><br>另一种做法是跨域的时候，jwt放在post数据体中</p><h2 id="对称加密方法"><a href="#对称加密方法" class="headerlink" title="对称加密方法"></a>对称加密方法</h2><p>比如HSA使用单个密钥，所以任意<code>[]byte</code>类型都可以当作一个合法的密钥。对称加密在双方都被信任的情况下最好用。因为签名和验证使用相同的算法，所以不能简单地分发key来验证。</p><h2 id="非对称加密方法"><a href="#非对称加密方法" class="headerlink" title="非对称加密方法"></a>非对称加密方法</h2><p>非对称加密方法，比如RSA使用不同的key来签名和验证token，这就可以用private key产生token，再允许使用者用public key来验证。</p><p>每种签名方法使用不同的类型来签名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The HMAC signing method (HS256,HS384,HS512) expect []byte values for signing and validation</span><br><span class="line"></span><br><span class="line">The RSA signing method (RS256,RS384,RS512) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation</span><br><span class="line"></span><br><span class="line">The ECDSA signing method (ES256,ES384,ES512) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation</span><br></pre></td></tr></table></figure></p><h3 id="HMAC方法演示"><a href="#HMAC方法演示" class="headerlink" title="HMAC方法演示"></a>HMAC方法演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(mc *jwt.MapClaims, secret []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用HS256算法(输入HMAC,是对称加密算法)</span></span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodHS256, mc)</span><br><span class="line"><span class="comment">// 签名并且获得完整的字符串</span></span><br><span class="line">tokenString, err := token.SignedString(secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"GenerateToken err: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tokenString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>, secret []<span class="keyword">byte</span>)</span> <span class="params">(jwt.MapClaims ,error)</span></span>  &#123;</span><br><span class="line">token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 验证加密算法</span></span><br><span class="line"><span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Unexpected signing method: %v"</span>, token.Header[<span class="string">"alg"</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> secret, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 类型</span></span><br><span class="line"><span class="keyword">if</span> claims, ok := token.Claims.(jwt.MapClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line"><span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">secret := []<span class="keyword">byte</span>(<span class="string">"secret_key"</span>)</span><br><span class="line">mc := jwt.MapClaims&#123;</span><br><span class="line"><span class="string">"foo"</span>: <span class="string">"bar"</span>,</span><br><span class="line"><span class="string">"issat"</span>: time.Now().Unix(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印token</span></span><br><span class="line">tokenString := GenerateToken(&amp;mc, secret)</span><br><span class="line">fmt.Println(tokenString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token</span></span><br><span class="line">claims, err := ParseToken(tokenString, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, claims)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rsa加密方法演示"><a href="#rsa加密方法演示" class="headerlink" title="rsa加密方法演示"></a>rsa加密方法演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/rsa"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenerateToken receive MapClaims and return a tokenString</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(mc jwt.MapClaims, privateKey *rsa.PrivateKey)</span> <span class="params">(tokenString <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodRS256, mc)</span><br><span class="line">tokenString, err = token.SignedString(privateKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseToken parse the token and return a MapClaims</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>, publicKey *rsa.PublicKey)</span> <span class="params">(claims jwt.MapClaims, err error)</span></span> &#123;</span><br><span class="line">token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 验证加密方法是否符合</span></span><br><span class="line"><span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodRSA); !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unexpected signing method: %v"</span>, token.Header[<span class="string">"alg"</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> publicKey, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> claims, ok := token.Claims.(jwt.MapClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line"><span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path, err := filepath.Abs(<span class="string">"./demo.rsa"</span>)</span><br><span class="line">privateByte, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">path, err = filepath.Abs(<span class="string">"./demo.rsa.pub"</span>)</span><br><span class="line">publicByte, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">privateKey, _ := jwt.ParseRSAPrivateKeyFromPEM(privateByte)</span><br><span class="line">publicKey, _ := jwt.ParseRSAPublicKeyFromPEM(publicByte)</span><br><span class="line"></span><br><span class="line">mc := jwt.MapClaims&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"baichen"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tokenString, err := GenerateToken(mc, privateKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"GenerateToken error: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">claims, err := ParseToken(tokenString, publicKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"ParseToken error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, claims)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JWT</a><br><a href="http://web.chacuo.net/netrsakeypair" target="_blank" rel="noopener">公钥密钥生成</a><br><a href="https://blog.csdn.net/skh2015java/article/details/78954293" target="_blank" rel="noopener">go读取文本内容</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go func</title>
      <link href="/2019/06/13/go-func/"/>
      <url>/2019/06/13/go-func/</url>
      
        <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>多个返回值</li><li>参数传递都是值传递</li><li>函数可以作为变量值</li><li>函数可以作为参数和返回值</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>参数数量可变<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(ops ...<span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">  res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> _, op := <span class="keyword">range</span> ops &#123;</span><br><span class="line">    res += op</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ol><li>defer会在函数执行完成后调用</li><li>panic不会影响defer的执行</li></ol>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go map</title>
      <link href="/2019/06/13/go-map/"/>
      <url>/2019/06/13/go-map/</url>
      
        <content type="html"><![CDATA[<h2 id="声明赋值初始化"><a href="#声明赋值初始化" class="headerlink" title="声明赋值初始化"></a>声明赋值初始化</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">b[<span class="string">"age"</span>] = <span class="number">1</span></span><br><span class="line">c = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 10为容量</span></span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">  fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他要注意的地方"><a href="#其他要注意的地方" class="headerlink" title="其他要注意的地方"></a>其他要注意的地方</h2><h3 id="访问不存在的key会返回0值"><a href="#访问不存在的key会返回0值" class="headerlink" title="访问不存在的key会返回0值"></a>访问不存在的key会返回0值</h3><p>不能通过判断是否为nil来判断是否存在<br>如何判断是0还是不存在？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">if</span> v, ok := a[<span class="number">3</span>]; ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"%d's value exists"</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"%d's value does not exists"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map的value可以是一个方法"><a href="#map的value可以是一个方法" class="headerlink" title="map的value可以是一个方法"></a>map的value可以是一个方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;&#125;</span><br><span class="line">  m1 := <span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> op &#125;</span><br><span class="line">  m2 := <span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> op*op &#125;</span><br><span class="line">  m[<span class="string">"one"</span>] = m1</span><br><span class="line">  m[<span class="string">"two"</span>] = m2</span><br><span class="line">  fmt.Println(m[<span class="string">"one"</span>](<span class="number">4</span>), m[<span class="string">"two"</span>](<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用map实现set"><a href="#用map实现set" class="headerlink" title="用map实现set()"></a>用map实现set()</h3><ol><li>元素唯一<br><code>map[type] bool</code></li><li>添加<br><code>m[1]=true</code></li><li>判断存在<br><code>if m[1]</code></li><li>删除<br><code>delete(m, 1)</code></li><li>个数<br><code>len(m)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go string</title>
      <link href="/2019/06/13/go-string/"/>
      <url>/2019/06/13/go-string/</url>
      
        <content type="html"><![CDATA[<h2 id="定义赋值初始化"><a href="#定义赋值初始化" class="headerlink" title="定义赋值初始化"></a>定义赋值初始化</h2><p>string是不可变的只读的[]byte类型<br>unicode是一种字符集<br>UTF-8是unicode的一种实现，是变长编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"中国"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"中国"</span></span><br></pre></td></tr></table></figure><p>len(str)获取的是字节数，不一定是字符数</p><p>通过下标访问得到的是字节，需要进行转换或者格式化打印<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"世界"</span></span><br><span class="line">    <span class="comment">//方法一：格式化打印</span></span><br><span class="line">    <span class="keyword">for</span> _, ch1 := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%q"</span>,ch1) <span class="comment">//单引号围绕的字符字面值，由go语法安全的转义</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二：转化输出格式</span></span><br><span class="line">    <span class="keyword">for</span> _, ch2 := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(ch2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="strings包"><a href="#strings包" class="headerlink" title="strings包"></a>strings包</h2><p><a href="https://golang.org/pkg/strings/" target="_blank" rel="noopener">strings</a></p><h2 id="strconv包"><a href="#strconv包" class="headerlink" title="strconv包"></a>strconv包</h2><p><a href="https://golang.org/pkg/strconv/#example_AppendBool" target="_blank" rel="noopener">strconv</a></p><h2 id="string常见用法"><a href="#string常见用法" class="headerlink" title="string常见用法"></a>string常见用法</h2><p><a href="http://c.biancheng.net/view/17.html" target="_blank" rel="noopener">http://c.biancheng.net/view/17.html</a></p><h2 id="rune-和-byte-区别"><a href="#rune-和-byte-区别" class="headerlink" title="rune 和 byte 区别"></a>rune 和 byte 区别</h2><p><a href="https://www.cnblogs.com/wanghui-garcia/p/10568354.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanghui-garcia/p/10568354.html</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 面向对象</title>
      <link href="/2019/06/13/go-object/"/>
      <url>/2019/06/13/go-object/</url>
      
        <content type="html"><![CDATA[<h2 id="封装数据和方法"><a href="#封装数据和方法" class="headerlink" title="封装数据和方法"></a>封装数据和方法</h2><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID    <span class="keyword">int</span></span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化:<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e := Employee(<span class="number">1</span>, <span class="string">"bob"</span>)</span><br><span class="line">e1 := Employee(ID: <span class="number">2</span>, Name: <span class="string">"bob"</span>)</span><br><span class="line">e2 := <span class="built_in">new</span>(Employee) <span class="comment">// 这里返回的是指针</span></span><br><span class="line">e2.ID = <span class="number">3</span>  <span class="comment">// 指针可以直接用.访问属性</span></span><br></pre></td></tr></table></figure></p><h4 id="结构体可以内嵌"><a href="#结构体可以内嵌" class="headerlink" title="结构体可以内嵌"></a>结构体可以内嵌</h4><ul><li>可以内嵌，而且只有字段的类型是必须的</li><li>内嵌的结构体可以直接访问其成员变量<br>结构体实例访问任意一级的嵌入结构体成员时都只用给出字段名，而无须像传统结构体字段一样，通过一层层的结构体字段访问到最终的字段。例如，ins.a.b.c的访问可以简化为ins.c。</li><li>内嵌结构体的字段名是它的类型名</li><li><a href="http://c.biancheng.net/view/74.html" target="_blank" rel="noopener">初始化</a></li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Base <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">Base</span><br><span class="line">  Name  <span class="keyword">string</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 初始化</span></span><br><span class="line">e := &amp;Employee&#123;Base: Base&#123;ID: <span class="string">"12313"</span>&#125;, Name: <span class="string">"bob"</span>, <span class="keyword">int</span> :<span class="number">4</span>&#125;</span><br><span class="line">e1 := <span class="built_in">new</span>(Employee)</span><br><span class="line">e1.ID = <span class="string">"123"</span></span><br><span class="line">e1.Name = <span class="string">"Amy"</span></span><br><span class="line">fmt.Println(e)</span><br><span class="line">fmt.Println(e.<span class="keyword">int</span>)</span><br><span class="line">fmt.Println(e1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">"ID: %d - Name: %s"</span>, e.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">"ID: %d - Name: %s"</span>, e.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种定义的方法在调用的时候会复制实例对象, 为了避免内存拷贝选择第二种</p><h3 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h3><ul><li><p>因为接口类型不会和特定的实现细节绑定在一起，通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力。</p></li><li><p>如果一个任意类型 T 的方法集为一个接口类型的方法集的超集，则我们说类型 T 实现了此接口类型。T 可以是一个非接口类型，也可以是一个接口类型。实现关系在Go语言中是隐式的。两个类型之间的实现关系不需要在代码中显式地表示出来</p></li><li><p>接口类型命名一般以er结尾</p></li><li><p>定义函数的时候参数定义成 interface，调用函数的时候就可以做到非常的灵活以。</p></li><li><p>函数的参数为interface时，调用函数要传入strcut的指针类型的原因是，*S实现了方法，而不是S。</p></li><li><p>尽可能依赖较小的接口，这样才能在更多的地方复用。</p></li></ul><p>以下代码中，file struct实现了WriteData方法，所以file类型也是DataWriter类型，所以才可以 <code>writer = f</code></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个数据写入器</span></span><br><span class="line"><span class="keyword">type</span> DataWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    WriteData(data <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义文件结构，用于实现DataWriter</span></span><br><span class="line"><span class="keyword">type</span> file <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现DataWriter接口的WriteData方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *file)</span> <span class="title">WriteData</span><span class="params">(data <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟写入数据</span></span><br><span class="line">    fmt.Println(<span class="string">"WriteData:"</span>, data)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化file</span></span><br><span class="line">    f := <span class="built_in">new</span>(file)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个DataWriter的接口</span></span><br><span class="line">    <span class="keyword">var</span> writer DataWriter</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将接口赋值f，也就是*file类型</span></span><br><span class="line">    writer = f</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用DataWriter接口进行数据写入</span></span><br><span class="line">    writer.WriteData(<span class="string">"data"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。</li><li>多个嵌套结构体实现共同实现一个接口，使用者并不关心某个接口的方法是通过一个类型完全实现的，还是通过多个结构嵌入到一个结构体中拼凑起来共同实现的。</li></ul><h4 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h4><p><a href="https://juejin.im/post/6844904153056034823" target="_blank" rel="noopener">类型断言</a></p><h4 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h4><p>因为所有类型都实现了空接口的方法，所以所有类型都是空接口类型。<br>可以给空接口随意赋值，但不可以随意取出（要进行类型断言） <a href="http://c.biancheng.net/view/84.html" target="_blank" rel="noopener">http://c.biancheng.net/view/84.html</a></p>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> object oriented </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go-切片</title>
      <link href="/2019/06/13/go-slice/"/>
      <url>/2019/06/13/go-slice/</url>
      
        <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000012326168" target="_blank" rel="noopener">数组和切片区别</a><br>数组容量固定，不可伸缩，相同维数和长度的数组可以比较，但是切片不可比较</p><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b []<span class="keyword">string</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">fmt.<span class="built_in">println</span>(a == <span class="literal">nil</span>)</span><br><span class="line">fmt.<span class="built_in">println</span>(b == <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><p>输出结果为<code>true, false</code></p><p>原因是:</p><ol><li>声明但是未使用的切片默认值是nil</li><li>已经给b分配了内存空间，所以不为空</li></ol><h3 id="使用make-构造切片"><a href="#使用make-构造切片" class="headerlink" title="使用make()构造切片"></a>使用make()构造切片</h3><p>make函数的原型是<code>make([]T, size, cap)</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>, <span class="number">10</span>)</span><br><span class="line">d := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(c == <span class="literal">nil</span>, d == <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果肯定是false, false 因为使用make函数一定发生了内存分配</p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>Go 语言的内建函数 append() 可以为切片动态添加元素。当空间不能容纳足够多的元素时，切片就会进行“扩容”。“扩容”操作往往发生在 append() 函数调用时。<br>容量的扩展规律按容量的 2 倍数扩充，例如 1、2、4、8、16……，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    numbers = <span class="built_in">append</span>(numbers, i)</span><br><span class="line">    fmt.Printf(<span class="string">"len: %d  cap: %d pointer: %p\n"</span>, <span class="built_in">len</span>(numbers), <span class="built_in">cap</span>(numbers), numbers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">len: 1  cap: 1 pointer: 0xc0420080e8</span><br><span class="line">len: 2  cap: 2 pointer: 0xc042008150</span><br><span class="line">len: 3  cap: 4 pointer: 0xc04200e320</span><br><span class="line">len: 4  cap: 4 pointer: 0xc04200e320</span><br><span class="line">len: 5  cap: 8 pointer: 0xc04200c200</span><br><span class="line">len: 6  cap: 8 pointer: 0xc04200c200</span><br><span class="line">len: 7  cap: 8 pointer: 0xc04200c200</span><br><span class="line">len: 8  cap: 8 pointer: 0xc04200c200</span><br><span class="line">len: 9  cap: 16 pointer: 0xc042074000</span><br><span class="line">len: 10  cap: 16 pointer: 0xc042074000</span><br></pre></td></tr></table></figure></p><p>切片的cap大小取决于原数组，比如：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">b := a[<span class="number">2</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure></p><p>b的cap不是4-2, 而是从原数组2的位置到末尾，所以cap应该是5-2=3</p><h3 id="append-函数"><a href="#append-函数" class="headerlink" title="append()函数"></a>append()函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个元素</span></span><br><span class="line"><span class="built_in">append</span>(car, <span class="string">"Ice"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加多个元素</span></span><br><span class="line"><span class="built_in">append</span>(car, <span class="string">"BMW"</span>, <span class="string">"Monk"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接两个切片</span></span><br><span class="line">x := []<span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">y := []<span class="keyword">int</span> &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(car)</span><br><span class="line">fmt.Println(appebd(x, y...))</span><br></pre></td></tr></table></figure><h3 id="复制切片内容"><a href="#复制切片内容" class="headerlink" title="复制切片内容"></a>复制切片内容</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ &#123;</span><br><span class="line">c[i] = i*i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值只是引用而不是复制</span></span><br><span class="line">refData := c</span><br><span class="line"><span class="built_in">println</span>(refData[<span class="number">2</span>])</span><br><span class="line">c[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">println</span>(refData[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">println</span>(<span class="string">"----------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用copy函数</span></span><br><span class="line">copyData := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">9</span>)</span><br><span class="line"><span class="built_in">copy</span>(copyData, c)</span><br><span class="line">c[<span class="number">3</span>] = <span class="number">0</span></span><br><span class="line"><span class="built_in">println</span>(copyData[<span class="number">3</span>])</span><br><span class="line"><span class="comment">// println(copyData[9]) 报错</span></span><br></pre></td></tr></table></figure><ol><li>直接赋值只是引用而不是复制</li><li>copy函数并不会自动使copyData扩容</li></ol><h3 id="删除切片元素"><a href="#删除切片元素" class="headerlink" title="删除切片元素"></a>删除切片元素</h3><p>Go 语言并没有对删除切片元素提供专用的语法或者接口，需要使用切片本身的特性来删除元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">// 删除3</span></span><br><span class="line">index := <span class="number">2</span></span><br><span class="line">a = <span class="built_in">append</span>(a[:index], a[index+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Printf(<span class="string">"%X"</span>, a)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 切片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask06-数据库</title>
      <link href="/2018/11/24/flask06/"/>
      <url>/2018/11/24/flask06/</url>
      
        <content type="html"><![CDATA[<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><p>在web应用里使用原声sql语句操作数据库主要存在以下两类问题:</p><ol><li>手动编写sql语句乏味，而且会降低代码易读性。还会出现安全问题</li><li>常见的开发模式时在开发时使用简单的SQLite，在部署时切换到MySQL等更健壮的DBMS。但是对于不同的DMBS，我们需要使用不同的python借口库，这让DBMS切换不那么容易。</li></ol><hr><p>尽管使用ORM可以避免sql注入问题，但你仍然需要对传入的查询参数进行验证。另外在执行原生SQL语句时也要注意避免使用字符串拼接或字符串格式化的方式传入参数。</p><hr><p>使用ORM可以很大程度上结局这些问题：</p><ol><li>自动处理查询参数的转义，避免sql注入。</li><li>为不同dbms提供统一接口，让切换工作变得简单。</li><li>ORM将python语言转换成dbms能够读懂的sql指令，能让我们利用python操控数据库。</li></ol><h4 id="ORM的三层映射关系"><a href="#ORM的三层映射关系" class="headerlink" title="ORM的三层映射关系"></a>ORM的三层映射关系</h4><ul><li>表 –&gt; Python类</li><li>字段(列)  –&gt;  类属性</li><li>记录(行)  –&gt;  类实例</li></ul><h2 id="使用Flask-SQLAlchemy管理数据库"><a href="#使用Flask-SQLAlchemy管理数据库" class="headerlink" title="使用Flask-SQLAlchemy管理数据库"></a>使用Flask-SQLAlchemy管理数据库</h2><p>安装Flask-SQLAlchemy及其依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pipenv install flask-sqlalchemy</span><br></pre></td></tr></table></figure></p><p>实例化Flask-SQLAlchemy提供的SQLAlchemy类，传入程序实例完成初始化，吧实例化扩展类的对象命名为db，这个db对象代表我们的数据库。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from flask_sqlalchemy import SQLAlchemy</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br></pre></td></tr></table></figure><h3 id="连接数据库服务器"><a href="#连接数据库服务器" class="headerlink" title="连接数据库服务器"></a>连接数据库服务器</h3><table><thead><tr><th style="text-align:left">DBMS</th><th style="text-align:center">URI</th></tr></thead><tbody><tr><td style="text-align:left">MySQL</td><td style="text-align:center">mysql://username:password@host/databasename</td></tr><tr><td style="text-align:left">SQLite(Unix)</td><td style="text-align:center">sqlite:////absolute/path/to/foo.db</td></tr><tr><td style="text-align:left">SQLite(Windows)</td><td style="text-align:center">sqlite:///absolute\path\to\foo.db</td></tr><tr><td style="text-align:left">SQLite(内存型)</td><td style="text-align:center">sqlite:///或sqlite:///:memory</td></tr></tbody></table><p>在Flask-SQLAlchemy中，数据库的URI通过配置变量SQLALCHEMY_DATABASE_URI设置，默认为SQLite内存型数据库。<br>SQLite是基于文件的dbms，不需要设置数据库服务器，只需要制定数据库文件的绝对路径。使用app.root_path来定位数据库文件的绝对路径，并将数据库文件命名为data.py。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">...</span><br><span class="line">app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;] = os.getenv(&apos;DATABASE_URL&apos;, &apos;sqlite:///&apos; + </span><br><span class="line">    os.path.jpin(app.root_path, &apos;data.db&apos;))</span><br></pre></td></tr></table></figure><p><code>os.getenv(key, default)</code> Return the value of the environment variable key if it exists, or default if it doesn’t.</p><p>安装并初始化Flask-SQLAlchemy后，启动程序会看到命令行有一段警告信息。这是因为Flask-SQLAlchemy建议你设置<code>SQLALCHEMY_TRACK_MODIFICATIONS</code>配置变量，这个配置决定是否追踪对象的修改，这用语Flask-SQLAlchemy的事件通知系统，如果没有特殊需求设置为False，来关闭警告信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.config[&apos;SQLALCHEMY_TRACK_MODIFICATIONS&apos;] = False</span><br></pre></td></tr></table></figure></p><h3 id="定义数据库模型"><a href="#定义数据库模型" class="headerlink" title="定义数据库模型"></a>定义数据库模型</h3><p>用来映射到数据库表的python类被称为数据库模型(models)。一个数据库模型类对应数据库中的一个表，所有的模型类都需要继承Flask-SQLAlchemy提供的db.Model基类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Note</span><span class="params">(db.model)</span>:</span></span><br><span class="line">    id = db.Colum(db.integer, primary_key=<span class="keyword">True</span>)</span><br><span class="line">    body = db.Colum(db.Text)</span><br></pre></td></tr></table></figure></p><p><strong>SQLAlchemy常用字段类型</strong><br><img src="https://s1.ax1x.com/2018/11/24/FFhmPe.png" alt=""><br>字段类型一般直接声明，如果要传入参数，也可以添加括号。</p><hr><p>默认情况下，Flask-SQLAlchemy会根据模型类的名称生成一个名称，生成规则如下:</p><ul><li>单个单词转换为小写</li><li>多个单词转换为小写并使用下划线分割</li></ul><p>如果想自己指定表名称，可以通过定义<strong>tablename</strong>属性来实现。</p><p><strong>实例化字段类常用的字段参数</strong><br><img src="https://s1.ax1x.com/2018/11/24/FFhsaT.png" alt=""></p><p>实例化字段类时，通过把参数<code>primary_key</code>设为True将其定义为主键。主键是每一条记录独一无二的标识，也是模型类中必须定义的字段。</p><h3 id="创建数据库和表"><a href="#创建数据库和表" class="headerlink" title="创建数据库和表"></a>创建数据库和表</h3><p>创建模型类后，我们需要手动创建数据库和对应的表。这通过db对象的<code>create_all()</code>方法实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from app import db</span><br><span class="line"></span><br><span class="line">db.create_all()</span><br></pre></td></tr></table></figure></p><hr><p>数据库和表一旦建立后，之后对模型的改动不会自动作用到实际的表中。比如在模型类中添加或删除字段，修改字段的名称和类型，这时再次调用<code>create_all()</code>方法也不会更新表结构。如果要使改动生效，最简单的方式是调用<code>db.drop_all()</code>方法删除数据库和表，然后再用<code>create_all()</code>方法创建。</p><hr><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>SQLAlchemy使用<em>数据库会话/事务(transaction)</em>来管理数据库操作，Flask-SQLAlchemy自动帮我们创建绘画，可以通过<code>db.session</code>属性来获取。这里的会话对象和Flask中的session无关。</p><p>数据库中的会话代表一个临时储存去，你对数据库做的改动都在这里，只有对session对象调用<code>commit()</code>方法时，改动才会被提交到数据库。会话也支持回滚操作，当调用<code>rollback()</code>方法是，添加到会话中且未提交的改动都将被撤销。</p><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><p>添加一条新记录到数据库主要分为三步</p><ol><li>实例化模型类作为一条记录</li><li>添加新创建的记录到数据库会话</li><li>提交数据库会话<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> db, Note</span><br><span class="line"></span><br><span class="line">note1 = Note(body=<span class="string">"text one"</span>)</span><br><span class="line">note2 = Note(body=<span class="string">"text two"</span>)</span><br><span class="line">note3 = Note(body=<span class="string">"text three"</span>)</span><br><span class="line">db.session.add(note1)</span><br><span class="line">db.session.add(note2)</span><br><span class="line">db.session.add(note3)</span><br><span class="line"></span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure></li></ol><p>Note类继承自db.Model类，db.Model基类会为Note类提供一个构造函数，接收匹配类属性名称的参数值，并赋值给对应的类属性。</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>使用模型的query属性<strong>附加调用</strong>各种过滤方法及查询方法可以从数据库中取出数据。<br>一般来说，一个完整的查询模式遵循下面的模式。</p><p>&lt;模型类&gt;.query.&lt;过滤方法&gt;.&lt;查询方法&gt;</p><p>常用的SQLAlchemy查询方法</p><table><thead><tr><th style="text-align:left">查询方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left">all()</td><td>返回包含所有查询记录的列表</td></tr><tr><td style="text-align:left">first()</td><td>返回查询的第一条记录，如果未找到，则返回None</td></tr><tr><td style="text-align:left">one()</td><td>返回第一条记录，若记录数量!=1则抛出错误</td></tr><tr><td style="text-align:left">get(indent)</td><td>传入主键值作为参数，返回指定主键值的记录，如果未找到，则返回None</td></tr><tr><td style="text-align:left">count()</td><td>返回查询结果的数量</td></tr><tr><td style="text-align:left">one_or_none()</td><td>如果结果数量不唯一，则返回None</td></tr><tr><td style="text-align:left">first_or_404</td><td>返回第一条，如果未找到则返回404错误响应</td></tr><tr><td style="text-align:left">get_or_404(indent)</td><td>传入主键值作为参数，返回对应主键值的记录，如果未找到，则返回404错误响应</td></tr><tr><td style="text-align:left">paginate</td><td>返回一个Pagination对象，可以对记录进行分页处理</td></tr><tr><td style="text-align:left">with_parent(instance)</td><td>传入模型实例作为参数，返回和这个实例相关联的对象</td></tr></tbody></table><p>SQLAlchemy还提供了许多过滤方法，可以获取更精确的查询。因为对Query对象调用过滤方法将返回一个更精确的Query对象，使用过滤器可以叠加使用。</p><p>常用的SQLAlchemy过滤方法</p><table><thead><tr><th style="text-align:left">查询过滤器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">filter()</td><td style="text-align:left">使用指定的规则过滤记录，返回新产生的查询对象</td></tr><tr><td style="text-align:left">filter_by()</td><td style="text-align:left">使用指定规则过滤记录，返回新的查询对象</td></tr><tr><td style="text-align:left">order_by</td><td style="text-align:left">根据指定条件对记录进行排序，返回新产生的查询对象</td></tr><tr><td style="text-align:left">limit(limit)</td><td style="text-align:left">根据指定的值限制原查询返回的记录数量，返回新产生的查询对象</td></tr><tr><td style="text-align:left">group_by()</td><td style="text-align:left">根据指定的值对记录进行分组，返回新产生的查询对象</td></tr><tr><td style="text-align:left">offset(offset)</td><td style="text-align:left">使用指定的值偏移原查询结果，返回新产生的查询对象</td></tr></tbody></table><p><code>Note.query.filter(Note.body==&#39;note one&#39;).first()</code><br>其他常用查询操作符：<br><strong>LIKE</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(Note.body.like(&apos;%foo%&apos;))</span><br></pre></td></tr></table></figure></p><p><strong>IN</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(Note.body.in([&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]))</span><br></pre></td></tr></table></figure></p><p><strong>NOT IN</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(~Note.body.in([&apos;foo&apos;, &apos;bar&apos;, &apos;baz&apos;]))</span><br></pre></td></tr></table></figure></p><p><strong>AND</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import and_</span><br><span class="line"># 使用and_()</span><br><span class="line">filter(and_(Note.body==&apos;bar&apos;, Note.title==&apos;foo&apos;))</span><br><span class="line"></span><br><span class="line"># 使用逗号分隔</span><br><span class="line">filter(Note.body==&apos;bar&apos;, Note.title==&apos;foo&apos;)</span><br><span class="line"></span><br><span class="line"># 叠加使用过滤方法</span><br><span class="line">filter(...).filter(...)</span><br></pre></td></tr></table></figure></p><p><strong>OR</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from sqlalchemy import or_</span><br><span class="line">filter(or_(Note.body==&apos;foo&apos;, Note.title==&apos;bar&apos;))</span><br></pre></td></tr></table></figure></p><h3 id="Upate"><a href="#Upate" class="headerlink" title="Upate"></a>Upate</h3><p>直接赋值给模型类的字段属性就可以改变字段值，然后调用<code>commit()</code>方法提交会话即可。</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p>和添加记录类似，不过要用<code>delete()</code>方法，最后调用<code>commit()</code>方法提交修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; note = Note.query(2)  # 主键为2</span><br><span class="line">&gt;&gt;&gt; db.session.delete(note)</span><br><span class="line">&gt;&gt;&gt; db.commit()</span><br></pre></td></tr></table></figure></p><h2 id="在视图函数中操作数据库"><a href="#在视图函数中操作数据库" class="headerlink" title="在视图函数中操作数据库"></a>在视图函数中操作数据库</h2><h3 id="Create-1"><a href="#Create-1" class="headerlink" title="Create"></a>Create</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/new&apos;, methods=[&apos;POST&apos;, &apos;GET&apos;])</span><br><span class="line">def new_note():</span><br><span class="line">    form = NewNoteForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        body = form.body.data</span><br><span class="line">        note = Note(body=body)</span><br><span class="line">        db.session.add(note)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;your note is saved&apos;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    return render_template(&apos;new_note.html&apos;, form=form)</span><br></pre></td></tr></table></figure><h3 id="Read-1"><a href="#Read-1" class="headerlink" title="Read"></a>Read</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/&apos;)</span><br><span class="line">def index():</span><br><span class="line">    form.DeleteForm()</span><br><span class="line">    notes = Note.query.all()</span><br><span class="line">    return render_template(&apos;index.html&apos;, notes=notes, form=form)</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>和create相似<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/edit/&lt;int:note_id&gt;&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def edit_note(note_id):</span><br><span class="line">    form = EditNoteForm()</span><br><span class="line">    note = Note.query.get(note_id)</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        note.body = form.body.data</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;note is updated&apos;)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    form.body.data = note.body</span><br><span class="line">    return render_template(&apos;edit_note.html&apos;, form)</span><br></pre></td></tr></table></figure></p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>不能添加一个指向删除视图的链接，因为有CSRF攻击的风险，像删除这类修改数据的操作绝对不能通过get请求实现，<strong>正确的做法</strong>是为删除操作创建一个表单。如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeleteNoteForm</span><span class="params">(FlaskForm)</span>:</span></span><br><span class="line">    submit = SubmitField(<span class="string">'Delete'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@app.route(&apos;/delete/&lt;int:note_id&gt;&apos;, methods=[&apos;POST&apos;])</span><br><span class="line">def delete_note(note_id):</span><br><span class="line">    form = DeleteNoteForm()</span><br><span class="line">    if form.validate_on_submit():   # 主要是验证CSRF令牌，要在模板中手动渲染form.csrf_token</span><br><span class="line">        note = Note.query.get(note_id)</span><br><span class="line">        db.session.delete(note)</span><br><span class="line">        db.session.commit()</span><br><span class="line">        flash(&apos;note is deleted&apos;)</span><br><span class="line">    else:</span><br><span class="line">        abort(400)</span><br><span class="line">    return redirect(url_for(&apos;index&apos;))</span><br></pre></td></tr></table></figure><h2 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h2><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Author(db.Model):</span><br><span class="line">    id</span><br><span class="line">    name</span><br><span class="line">    phone</span><br><span class="line"></span><br><span class="line">class Article(db.Model):</span><br><span class="line">    id</span><br><span class="line">    title</span><br><span class="line">    body</span><br></pre></td></tr></table></figure><p>目的是在Author类中添加一个articles属性，当对特定的Author对象调用articles属性会返回相关Article对象。</p><h4 id="一、定义外键"><a href="#一、定义外键" class="headerlink" title="一、定义外键"></a>一、定义外键</h4><p>外键是在表A存储表B的<em>主键值</em>，以便和表B建立联系的关系字段。因为怪键只能存储单一数据（标量），使用外键总是在“多”的一侧定义，多篇文章属于一个作者，所以我们需要在文章添加外键，存储作者的主键值以指向对应的作者。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Article(db.Model):</span><br><span class="line">    ...</span><br><span class="line">    author_id = db.Colum(db.Interger, db.ForeignKey(&apos;author.id&apos;))</span><br></pre></td></tr></table></figure></p><p>外键字段的命名没有限制，但传入ForeignKey类的参数<code>author.id</code>中，author指的是表名，id是字段名。默认为类的名称的小写形式，多个单词通过下划线分割。可以通过<code>__tablename__</code>属性指定。</p><h4 id="二、定义关系属性"><a href="#二、定义关系属性" class="headerlink" title="二、定义关系属性"></a>二、定义关系属性</h4><p>定义关系的第二部是使用关系函数定义关系属性。<strong>关系属性在关系的出发侧定义</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class Author(db.Model):</span><br><span class="line">    ...</span><br><span class="line">    articles = db.relationship(&apos;Aticle&apos;)</span><br></pre></td></tr></table></figure></p><p>这个属性并没有使用Column类来声明为列，而是使用了<code>db.relationship()</code>定义为关系属性。因为这个关系属性返回多条记录，我们称之为<em>集合关系属性</em>。<br>relationship()函数的第一个参数为关系另一侧模型的名称，他会告诉SQLAlchemy将Author类与Article类建立关系。当这个关系被调用时，SQLAlchemy会找到关系另一侧的外键字段(author_id)，然后反响查询article表中所有author_id值为当前主键值(author.id)的记录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; foo = Author(name=&apos;foo&apos;)</span><br><span class="line">&gt;&gt;&gt; spam = Aticle(title=&apos;spam&apos;)</span><br><span class="line">&gt;&gt;&gt; ham = Article(title=&apos;ham&apos;)</span><br><span class="line">&gt;&gt;&gt; db.session.add(foo)</span><br><span class="line">&gt;&gt;&gt; db.session.add(spam)</span><br><span class="line">&gt;&gt;&gt; db.session.add(ham)</span><br></pre></td></tr></table></figure></p><h3 id="三、建立关系"><a href="#三、建立关系" class="headerlink" title="三、建立关系"></a>三、建立关系</h3><p>有两种方式，第一种是为外键赋值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; spam.author_id = 1</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></p><p>将spam的author_id设为1，会和id为1的Author建立关系。</p><p>另一种方式是通过操作关系属性，将关系属性赋值给实际的对象即可建立关系。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; foo.articles.append(spam)</span><br><span class="line">&gt;&gt;&gt; foo.articles.append(ham)</span><br><span class="line">&gt;&gt;&gt; db.session.commit()</span><br></pre></td></tr></table></figure></p><p>使用<code>remove()</code>方法可以解除关系，<code>pop()</code>方法可以与关系属性列表的最后一个对象解除关系并返回该对象。</p><p>常用的SQLAlchemy关系函数参数</p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">back_populates</td><td style="text-align:left">定义反向引用，用于建立双向关系，在关系的另一侧也必须现实定义关系属性</td></tr><tr><td style="text-align:left">backref</td><td style="text-align:left">添加反向引用，自动在另一侧建立关系属性</td></tr><tr><td style="text-align:left">lazy</td><td style="text-align:left">指定如何加载相关记录</td></tr><tr><td style="text-align:left">useklist</td><td style="text-align:left">指定是否使用列表形式加载记录</td></tr><tr><td style="text-align:left">cascade</td><td style="text-align:left">设置级联操作</td></tr><tr><td style="text-align:left">order_by</td><td style="text-align:left">指定家在相关记录时的排序方式</td></tr><tr><td style="text-align:left">secondary</td><td style="text-align:left">在多对多关系中指定关联表</td></tr><tr><td style="text-align:left">primaryjoin</td><td style="text-align:left">指定多对多关系中的一级联结条件</td></tr><tr><td style="text-align:left">secondaryjoin</td><td style="text-align:left">指定多对多关系中的二级联结条件</td></tr></tbody></table><p>常用的SQLAlchemy关系记录加载方式(lazy参数可选值)</p><table><thead><tr><th style="text-align:left">关系加载方式</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">select</td><td style="text-align:left">在必要时一次性加载疾苦，返回包含记录的列表，等同于lazy=True</td></tr><tr><td style="text-align:left">joined</td><td style="text-align:left">和父查询一样加载记录，但使用联结，等同于lazy=False</td></tr><tr><td style="text-align:left">immediate</td><td style="text-align:left">一旦父查询加载就加载</td></tr><tr><td style="text-align:left">subquery</td><td style="text-align:left">类似joined，不过使用自查询</td></tr><tr><td style="text-align:left">dymamic</td><td style="text-align:left">不知加载记录，而是返回一个包含相关记录的query对象</td></tr></tbody></table><h3 id="建立双向关系"><a href="#建立双向关系" class="headerlink" title="建立双向关系"></a>建立双向关系</h3><p>两侧都添加关系属性获取对方记录的关系为双向关系。双向关系的建立很简单，通过在关系的另一侧也创建一个relationship()函数，我们就可以在两个表之间建立双向关系。</p>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 数据库 </tag>
            
            <tag> ORM </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask05-表单</title>
      <link href="/2018/11/22/flask05/"/>
      <url>/2018/11/22/flask05/</url>
      
        <content type="html"><![CDATA[<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h2 id="html表单"><a href="#html表单" class="headerlink" title="html表单"></a>html表单</h2><p>在html表单中，<code>&lt;input&gt;</code>标签表示各种输入字段，<code>&lt;label&gt;</code>标签则用文字来定义字段的标签文字。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">mehtod</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">placeholder</span>=<span class="string">"请输入"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"1414124"</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remenber"</span> <span class="attr">id</span>=<span class="string">"remember"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"remenber"</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="WTForms"><a href="#WTForms" class="headerlink" title="WTForms"></a>WTForms</h2><p>WTForms支持在python中使用<strong>类</strong>来定义表单，然后通过类定义生成对应的html代码，这种方式方面，易于重用，所以一般不会再模板中直接使用html编写表单。</p><h2 id="使用Flask-WTF处理表单"><a href="#使用Flask-WTF处理表单" class="headerlink" title="使用Flask-WTF处理表单"></a>使用Flask-WTF处理表单</h2><p>Flask-WTF集成了WTForms使用它可以在flask中更方便地使用WTFormss。Flask-WTF将表单数据解析，CSRF保护，文件上传等功能与flask集成，还增加了reCAPTCHA支持。</p><p>安装Flask-WTF及其依赖<br><code>$ pipenv install flask-wtf</code></p><p>Flask-WTF默认为每个表单启用CSRF保护，他会为我们自动生成和验证CSRF令牌。默认情况使用程序密钥来对令牌进行签名，配置键<code>WTF_CSRF_ENABLED</code>来设置是否开启CSRF保护，默认为True。flask-wtf会自动在实例化表单类时添加一个包含CSRF令牌值的<em>隐藏字段</em>，字段名为<code>cstf_token</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.secret_key = &apos;secret string&apos;</span><br></pre></td></tr></table></figure><h3 id="定义WTForms表单类"><a href="#定义WTForms表单类" class="headerlink" title="定义WTForms表单类"></a>定义WTForms表单类</h3><p>当使用WTForms创建表单时，表单由python来表示，这个类继承从WTForms导入Form基类。一个表单由若干输入字段(Field)组成，字段由表单类的类属性表示。下面自定义了一个LoginForm类。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> Form, StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtfroms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span><span class="params">(Form)</span>:</span></span><br><span class="line">    username = StringField(<span class="string">'Username'</span>, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(<span class="string">'Password'</span>, validators=[DataRequired(), Length(<span class="number">8</span>, <span class="number">128</span>)])</span><br><span class="line">    remember = BooleanField(<span class="string">'Remember me'</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">'Login'</span>)</span><br></pre></td></tr></table></figure></p><p>每隔字段属性通过实例化WTForms提供的字段表示，字段属性的名称将作为对应input元素的name属性和id属性。<br><br>字段名称大小写敏感，不能以下划线和validate开头。</p><h3 id="常用WTForms字段"><a href="#常用WTForms字段" class="headerlink" title="常用WTForms字段"></a>常用WTForms字段</h3><p><img src="https://s1.ax1x.com/2018/11/22/FPNu9J.png" alt=""></p><h3 id="实例化字段类常用参数"><a href="#实例化字段类常用参数" class="headerlink" title="实例化字段类常用参数"></a>实例化字段类常用参数</h3><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:left">label</td><td style="text-align:center">字段标签<label>的值，也就是渲染后显示在输入字段前的文字</label></td></tr><tr><td style="text-align:left">render_kw</td><td style="text-align:center">一个字典，用来设置对应input标签的属性</td></tr><tr><td style="text-align:left">valiadtors</td><td style="text-align:center">一个列表，包含一系列验证器，会在表单提交后被逐一调用验证表单数据</td></tr><tr><td style="text-align:left">default</td><td style="text-align:center">字符串或可调用对象，用来为表单字段设置默认值</td></tr></tbody></table><h3 id="常用WTForms验证器"><a href="#常用WTForms验证器" class="headerlink" title="常用WTForms验证器"></a>常用WTForms验证器</h3><p><img src="https://s1.ax1x.com/2018/11/22/FPNQj1.png" alt=""></p><p>验证器的第一个参数一般为促物体时消息，可以使用message参数传入错误消息来覆盖内置消息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = StringField(&apos;Your name&apos;, validators=[DataRequired(message=u&quot;名字不能为空&quot;)])</span><br></pre></td></tr></table></figure></p><h3 id="使用Flask-WTF"><a href="#使用Flask-WTF" class="headerlink" title="使用Flask-WTF"></a>使用Flask-WTF</h3><p>使用Flask-WTF定义表单时，<strong>仍然使用WTForms提供的字段类和验证器</strong>，只不过表单类药继承Flask-WTF提供的FlaskForm类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from flask-wtf import FlaskForm</span><br><span class="line">from wtforms import StringField, PasswordField, BooleanField, SubmitField</span><br><span class="line">from wtfroms.validators import DataRequired, Length</span><br><span class="line">class LoginForm(FlaskForm):</span><br><span class="line">    username = StringField(&apos;Username&apos;, validators=[DataRequired()])</span><br><span class="line">    password = PasswordField(&apos;Password&apos;, validators=[DataRequired(), Length(8, 128)])</span><br><span class="line">    remember = BooleanField(&apos;Remember me&apos;)</span><br><span class="line">    submit = SubmitField(&apos;Login&apos;)</span><br></pre></td></tr></table></figure></p><h2 id="输出html代码"><a href="#输出html代码" class="headerlink" title="输出html代码"></a>输出html代码</h2><p>实例化表单类，然后将实例属性转换成字符串或直接调用获取表单字段对应的html代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; form = LoginForm()</span><br><span class="line">&gt;&gt;&gt; form.username()</span><br><span class="line">u&apos;&lt;input id=&quot;username&quot; name=&quot;username&quot; type=&quot;text&quot; value=&quot;&quot;&gt;&apos;</span><br></pre></td></tr></table></figure></p><p>字段的label元素的html代码可以通过<code>form.字段名.label</code>的形式获取</p><h3 id="为字段添加额外属性"><a href="#为字段添加额外属性" class="headerlink" title="为字段添加额外属性"></a>为字段添加额外属性</h3><h4 id="使用render-kw属性"><a href="#使用render-kw属性" class="headerlink" title="使用render_kw属性"></a>使用render_kw属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = StringField(&apos;Username&apos;, render_kw=&#123;&apos;placeholder&apos;:&apos;Your name&apos;&#125;)</span><br></pre></td></tr></table></figure><h4 id="在调用字段时传入"><a href="#在调用字段时传入" class="headerlink" title="在调用字段时传入"></a>在调用字段时传入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">form.username(style=&apos;width: 200px;&apos;, class_=&apos;bar&apos;)</span><br></pre></td></tr></table></figure><p>用class_代替class，渲染后的input标签会获取正确的class属性。</p><h2 id="在模板中渲染表单"><a href="#在模板中渲染表单" class="headerlink" title="在模板中渲染表单"></a>在模板中渲染表单</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from forms import LoginForm</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/basic&apos;)</span><br><span class="line">def basic():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    return render_template(&apos;login.html&apos;, form=form)</span><br></pre></td></tr></table></figure><p>在模板中通过调用属性获取字段对应的html代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form method=&quot;post&quot;&gt;</span><br><span class="line">    &#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">    &#123;&#123; form.username.label &#125;&#125;  &#123;&#123; from.username &#125;&#125;&lt;/br&gt;</span><br><span class="line">    &#123;&#123; form.password.label &#125;&#125;  &#123;&#123; form.password &#125;&#125;&lt;/br&gt;</span><br><span class="line">    &#123;&#123; form.remember &#125;&#125;  &#123;&#123;form.remember.label&#125;&#125;&lt;/br&gt;</span><br><span class="line">    &#123;&#123; form.submit &#125;&#125;&lt;/br&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>csrf_token在提交表单后会被自动验证，为了确保表单通过验证，必须在表单中手动渲染这个字段。</p><h2 id="处理表单数据"><a href="#处理表单数据" class="headerlink" title="处理表单数据"></a>处理表单数据</h2><ol><li>解析请求，获取表单数据</li><li>对数据进行必要的转换</li><li>验证数据和CSRF令牌</li><li>如果验证未通过则生成错误消息</li><li>如果通过验证则把数据保存到数据库或做进一步处理</li></ol><h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p><form>标签的提交行为主要由三个属性控制。</form></p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:center">默认值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">action</td><td style="text-align:center">当前url</td><td style="text-align:left">表单提交时发送请求的url</td></tr><tr><td style="text-align:left">method</td><td style="text-align:center">get</td><td style="text-align:left">提交方法，仅支持get和post</td></tr><tr><td style="text-align:left">enctype</td><td style="text-align:center">application/x-www-form-urlencoded</td><td style="text-align:left">表单编码类型</td></tr></tbody></table><h3 id="验证表单数据"><a href="#验证表单数据" class="headerlink" title="验证表单数据"></a>验证表单数据</h3><h4 id="wtforms验证机制"><a href="#wtforms验证机制" class="headerlink" title="wtforms验证机制"></a>wtforms验证机制</h4><p>实例化表单类时传入表单数据，然后对表单实例调用<code>validate()</code>方法。这会对每个字段调用相应的验证器，返回验证结果的布尔值。如果验证失败，就把错误消息储存到表单实例的errors属性对应的字典中。</p><hr><p>注意：使用post方法提交的表单数据会被解析成一个字典，可以通过<code>request.form</code>获取。使用get方法提交的数据同样被解析成字典，通过<code>request.args</code>获取。</p><hr><h4 id="在视图函数中验证表单"><a href="#在视图函数中验证表单" class="headerlink" title="在视图函数中验证表单"></a>在视图函数中验证表单</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if request.method==&apos;POST&apos; and form.validate():</span><br></pre></td></tr></table></figure><p>Flask-WTF提供的<code>validate_on_submit()</code>合并了这两个操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if form.validate_on_submit():</span><br></pre></td></tr></table></figure><p>通过form.字段名.date获取对应字段的数据。</p><h4 id="Post-Redirect-Get"><a href="#Post-Redirect-Get" class="headerlink" title="Post/Redirect/Get"></a>Post/Redirect/Get</h4><p>在浏览器中，刷新/重载时的默认行为时发送上一个请求，如果上一个请求时post，那么就会弹出一个窗口，询问用户是否再次提交此表单，为了避免这个提示，我们尽量不要让post请求作为最后一个请求，所以我们在处理表单后返回一个重定向响应，让浏览器发送一个get请求到相应url。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@app.route(&apos;/basic&apos;, methods=[&apos;GET&apos;, &apos;POST&apos;])</span><br><span class="line">def basic():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    if form.validate_on_submit():</span><br><span class="line">        username = form.username.data</span><br><span class="line">        flash(&quot;Welcome Home %s&quot;, % username)</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    return render_template(&apos;basic.html&apos;, form=form)</span><br></pre></td></tr></table></figure></p><h3 id="在模板中渲染错误消息"><a href="#在模板中渲染错误消息" class="headerlink" title="在模板中渲染错误消息"></a>在模板中渲染错误消息</h3><p>我们一般会通过字段名来获取<strong>对应字段的错误消息列表</strong>，即<code>form.字段名.errors</code>。</p><h2 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h2><h3 id="行内验证器"><a href="#行内验证器" class="headerlink" title="行内验证器"></a>行内验证器</h3><p>当表单类中包含以<code>validate_字段属性名</code>形式命名的方法时，在验证字段数据时会同时调用这个方法来验证对应的字段。验证方法接收两个位置参数，以此为form和field，分别是表单类实例和字段对象。验证出错跑出从<code>wtforms.validators</code>模块导入的<code>ValidatorError</code>异常。</p><p>注：不需要传入参数时使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from wtforms import IntegetField, SubmitField</span><br><span class="line">from wtforms.validators import ValidationError</span><br><span class="line"></span><br><span class="line">class FourtyTwoForm(FlaskForm):</span><br><span class="line">    answer = IntegerField(&apos;The Number&apos;)</span><br><span class="line">    submit = SubmitField()</span><br><span class="line">    </span><br><span class="line">    def validate_answer(form, field):</span><br><span class="line">        if field.data != 42:</span><br><span class="line">            raise VlidationError(&quot;Must be 42&quot;)</span><br></pre></td></tr></table></figure><h3 id="全局验证器"><a href="#全局验证器" class="headerlink" title="全局验证器"></a>全局验证器</h3><p>如果想定义一个可重用的验证器，可以通过一个函数实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def is_42(message=None):</span><br><span class="line">    if message is None:</span><br><span class="line">        message = &apos;Must be 42&apos;</span><br><span class="line">    def _is_42(form, field):</span><br><span class="line">        if field.data != 42:</span><br><span class="line">            raise ValidationError(message)</span><br><span class="line">    </span><br><span class="line">    return _is_42</span><br></pre></td></tr></table></figure></p><p>注意：自定义验证器要返回可调用对象</p>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 表单 </tag>
            
            <tag> forms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文分词正向最大匹配算法(C++)</title>
      <link href="/2018/11/12/fenci/"/>
      <url>/2018/11/12/fenci/</url>
      
        <content type="html"><![CDATA[<h3 id="机械分词法"><a href="#机械分词法" class="headerlink" title="机械分词法"></a>机械分词法</h3><blockquote><p>它是按照一定的策略将待分析的汉字串与一个“充分大的”机器词典中的词条进行配，若在词典中找到某个字符串，则匹配成功。按照扫描方向的不同，串匹配分词方法可以分为正向匹配和逆向匹配；按照不同长度优先匹配的情况，可以分为最大匹配和最小匹配。</p></blockquote><p>正向最大匹配算法是从左到右将待分词文本中的几个连续字符与词表匹配，如果匹配上，则切分出一个词。但如果要切分出最大长度的词该怎么办呢？</p><p>这里有个办法是设定最大词长度Max，每次切下Max个字符串，然后将这个字符串与词库中的词比对，如果存在相同的则输出，否则切下最后一个词继续与词库中的词匹配。直到匹配成功或者剩余字符串长度为1（不输出单字）。这时候将原字符串str修改为str减去切下的词。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>这里有个简单的例子：<br>假设词库里有 <code>“大学生”, “学生”, “上海大学”, “自强不息”</code>这几个词,  现有待分词字符串<code>”上海大学的大学生自强不息”</code> 首先确定Max为4, 切下字符串上海大学, 检测在词库中, 输出, 修改字符串为 ”的大学生自强不息”, 切下字符串 ”的大学生”, 检测不在词库中, 切下一个字变成 ”的大学”, 仍不在词库中, 一直到”的” 仍不在词库中此时不输出单字, 修改字符串为”大学生自强不息”, 重复上述步骤,<br>输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上海大学</span><br><span class="line">大学生</span><br><span class="line">自强不息</span><br></pre></td></tr></table></figure><p>用流程图表示为<br><img src="https://s1.ax1x.com/2018/11/12/iOEdeA.png" alt=""></p><p>主要实现的函数有<br><code>int isinDict(string word);</code>  // 遍历词典, 查询word是否在词典中</p><p><code>string CutDown(string&amp; str);</code>   // 分出一个词并返回, 修改str为str – sub</p><p><code>void Out(string&amp; str);</code>     // 当str长度大于一个字符时变继续分词, 并把结果输出</p><p><code>void SetDict()</code>  // 统计词典词的个数, 并把词储存在string数组中.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- dict.text   // 字典</span><br><span class="line">- text.txt    // 未分词文本</span><br><span class="line">- result.txt  //分词结果</span><br><span class="line">- main.cpp</span><br><span class="line">- Cut.cpp</span><br><span class="line">- Cut.h</span><br></pre></td></tr></table></figure><p>下面只放出Cut类的实现代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cut.h</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Cut.h</span></span><br><span class="line"><span class="comment">//  中文分词</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Chen Bai on 2018/10/24.</span></span><br><span class="line"><span class="comment">//  Copyright © 2018 Chen Bai. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Cut_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cut_h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cut</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDictPath</span><span class="params">(<span class="built_in">string</span> path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetResPath</span><span class="params">(<span class="built_in">string</span> path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetTextPath</span><span class="params">(<span class="built_in">string</span> path)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetDict</span><span class="params">()</span></span>;   <span class="comment">//</span></span><br><span class="line"><span class="keyword">int</span> count;   <span class="comment">//词典词的个数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> DictPath;</span><br><span class="line"><span class="built_in">string</span> ResPath;</span><br><span class="line"><span class="built_in">string</span> TextPath;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetText</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">CutDown</span><span class="params">(<span class="built_in">string</span>&amp; str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isinVs</span><span class="params">(<span class="built_in">string</span> str)</span></span>;</span><br><span class="line"><span class="keyword">int</span> Max = <span class="number">60</span>;  <span class="comment">//最长词的字数</span></span><br><span class="line"><span class="built_in">string</span> *Dict;</span><br><span class="line"><span class="comment">//在GetText()函数中规定了读取文本时一行的中文字符数为10000个</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* Cut_h */</span></span></span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cut.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Cut.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cut::SetDict()</span><br><span class="line">&#123;</span><br><span class="line">    fstream fs;</span><br><span class="line">    <span class="keyword">char</span> vac[Max];</span><br><span class="line">    <span class="keyword">int</span> line=<span class="number">0</span>, i=<span class="number">0</span>;</span><br><span class="line">    fs.open(DictPath);</span><br><span class="line">    <span class="keyword">if</span>(!fs) <span class="built_in">cout</span> &lt;&lt; <span class="string">"字典文件打开失败"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 统计行数</span></span><br><span class="line">    <span class="keyword">while</span> (fs.getline(vac, Max))</span><br><span class="line">        line++;</span><br><span class="line">    count = line;   <span class="comment">//设置词的个数, 方便遍历</span></span><br><span class="line">    Dict = <span class="keyword">new</span> <span class="built_in">string</span>[line];</span><br><span class="line">    fs.clear();</span><br><span class="line">    fs.seekp(ios::beg);</span><br><span class="line">    <span class="keyword">while</span> (fs.getline(vac, Max))</span><br><span class="line">    &#123;</span><br><span class="line">        Dict[i] = <span class="built_in">string</span>(vac);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Cut::isinVs(<span class="built_in">string</span> str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;count; i++)</span><br><span class="line">    <span class="keyword">if</span>(str == Dict[i])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Cut::CutDown(<span class="built_in">string</span>&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> sub;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(str.length() &gt; Max)</span><br><span class="line">    &#123;</span><br><span class="line">        sub = str.substr(<span class="number">0</span>, Max);</span><br><span class="line">        i = Max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sub = str;</span><br><span class="line">        i = str.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( isinVs(sub) )</span><br><span class="line">        &#123;</span><br><span class="line">            str = str.substr(i, str.length());</span><br><span class="line">            <span class="keyword">return</span> sub;</span><br><span class="line">        &#125;</span><br><span class="line">        sub = sub.substr(<span class="number">0</span>, i= i<span class="number">-3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    str = str.substr(i, str.length());</span><br><span class="line">    <span class="keyword">return</span> sub.substr(<span class="number">0</span>, <span class="number">3</span>);  <span class="comment">// 单个汉字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cut::Out()</span><br><span class="line">&#123;</span><br><span class="line">    fstream fs;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="comment">//    string root = GetRoot(ResPath);</span></span><br><span class="line">    fs.open(ResPath, ios::out);</span><br><span class="line">    <span class="keyword">if</span>(!fs)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"结果文件打开失败"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">string</span> str = GetText();</span><br><span class="line">    <span class="keyword">while</span> (str.length() &gt;= <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">if</span>( (temp = CutDown(str)).length()&gt; <span class="number">3</span> )</span><br><span class="line">    fs &lt;&lt; temp &lt;&lt; <span class="string">"/"</span>;</span><br><span class="line">    fs.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cut::SetDictPath(<span class="built_in">string</span> path)</span><br><span class="line">&#123;</span><br><span class="line">    DictPath = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cut::SetResPath(<span class="built_in">string</span> path)</span><br><span class="line">&#123;</span><br><span class="line">    ResPath = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Cut::SetTextPath(<span class="built_in">string</span> path)</span><br><span class="line">&#123;</span><br><span class="line">    TextPath = path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Cut::GetText()</span><br><span class="line">&#123;</span><br><span class="line">    fstream fs;</span><br><span class="line">    fs.open(TextPath);</span><br><span class="line">    <span class="keyword">if</span>(!fs) <span class="built_in">cout</span>&lt;&lt;<span class="string">"文本文件打开失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> temp[<span class="number">30000</span>];</span><br><span class="line">    <span class="built_in">string</span> res;</span><br><span class="line">    <span class="keyword">while</span> (fs.getline(temp, <span class="number">30000</span>))</span><br><span class="line">        res += <span class="built_in">string</span>(temp);</span><br><span class="line">    fs.close();</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分词 </tag>
            
            <tag> 最大匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 数组传参</title>
      <link href="/2018/11/08/cppshuzuchuancan/"/>
      <url>/2018/11/08/cppshuzuchuancan/</url>
      
        <content type="html"><![CDATA[<p><strong>在C/C++中，在进行数组传参时，c虽然传递的是收地址，但是在函数内部就成了普通指针，不是数组首地址了，所以在函数里得到数组长度是不可以的，所以函数参数中有数组时一般要传入数组大小</strong></p><h3 id="错误示范"><a href="#错误示范" class="headerlink" title="错误示范"></a>错误示范</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetLen</span><span class="params">(<span class="keyword">int</span> *arr)</span></span></span><br><span class="line">return sizeof(arr)/sizeof(*a);</span><br></pre></td></tr></table></figure><h3 id="正确例子"><a href="#正确例子" class="headerlink" title="正确例子"></a>正确例子</h3><ol><li><p><code>void func(int *a, int length){}</code></p></li><li><p><code>void func(int a[length]</code></p></li><li><p><code>void func(int a[], int length){}</code></p></li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/spring-hailong/p/6110685.html" target="_blank" rel="noopener">C/C++数组传参</a><br><a href="https://blog.csdn.net/u013025203/article/details/54379104" target="_blank" rel="noopener">C/C++数组参数传递后，还能计算长度吗？</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask04-模板</title>
      <link href="/2018/11/05/flask04/"/>
      <url>/2018/11/05/flask04/</url>
      
        <content type="html"><![CDATA[<p>flask使用的默认模板引擎是<code>jinja2</code></p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="三种界定符"><a href="#三种界定符" class="headerlink" title="三种界定符"></a>三种界定符</h3><ol><li>语句，比如if、for</li></ol>{% ... %} <ol start="2"><li>表达式比如字符串，变量，函数调用</li></ol>{{ ... }}<ol start="3"><li>注释</li></ol>{# ... #}<p>在jinja2使用<code>.</code>来获取变量的属性，比如user字典中的username键值通过<code>.</code>来获取j，即<code>user.username</code>, 等同于<code>user[username]</code></p><ol><li>jinja2并不支持所有Python所有语法，使用处于效率和代码组织等方面考虑<strong>应该适度使用模板，仅把和输出控制有关的逻辑操作放到模板中</strong></li><li>Jinja2提供了多种控制结构来控制模板的输出，其中<code>for</code> 和 <code>if</code> 是最常用的两种，在语句结束时要添加 <strong>结束标签</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if user.bio %&#125;</span><br><span class="line">&lt;i&gt; &#123;&#123; user.bio &#125;&#125; &lt;/i&gt;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">&lt;i&gt; This user has not provided a bio. &lt;/i&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for movie in movies %&#125;</span><br><span class="line">&lt;li&gt; &#123;&#123; movie.name &#125;&#125; -- &#123;&#123; movie.year &#125;&#125; &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="for循环特殊变量"><a href="#for循环特殊变量" class="headerlink" title="for循环特殊变量"></a>for循环特殊变量</h3><table><thead><tr><th style="text-align:center">变量名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">loop.index</td><td style="text-align:center">当前迭代数（从1开始计数）</td></tr><tr><td style="text-align:center">loop.index()</td><td style="text-align:center">当前迭代书（从0开始计数）</td></tr><tr><td style="text-align:center">loop.revindex</td><td style="text-align:center">当前反向迭代数（从1开始计数）</td></tr><tr><td style="text-align:center">loop.revindex()</td><td style="text-align:center">当前反向迭代数（从0开始计数）</td></tr><tr><td style="text-align:center">loop.first</td><td style="text-align:center">如果时第一个元素则返回True</td></tr><tr><td style="text-align:center">loop.last</td><td style="text-align:center">如果时最后一个元素则返回True</td></tr><tr><td style="text-align:center">loop.previtem</td><td style="text-align:center">上一迭代条目</td></tr><tr><td style="text-align:center">loop.nextitem</td><td style="text-align:center">下一迭代条目</td></tr><tr><td style="text-align:center">loop.length</td><td style="text-align:center">序列包含的元素数量</td></tr></tbody></table><h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>渲染一个模板就是执行模板中的代码，并传入所有在模板中使用的变量，渲染后的结果就是我们要返回客户端的HTML响应，在视图函数中我们并不直接使用Jinjia2提供的函数，而是使用Flask提供的渲染函数<code>render_template()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/watchlist')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">watchlist</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">"watchlist.html"</span>, user=user, movies=movies)</span><br></pre></td></tr></table></figure><p>在<code>render_template()</code>函数中，第一个参数时模板的文件名, Flask会在程序根目录下的templates文件夹里寻找模板文件，所以这里传入的路径时相对于templates根目录的。以关键字的形式传入了模板中使用的变量值，其他类型的变量通过相同的方式传入，传入的变量值可以时字符串、列表和字典，也可以时函数、类和实例</p><p>如果想传入函数，在模板调用，那么需要传入函数对象本身，而不是函数调用（函数的返回值），使用仅写出函数名即可，传入模板后，在函数名称后面添加括号以调用，以可以在括号中传入参数</p><h2 id="模板辅助工具"><a href="#模板辅助工具" class="headerlink" title="模板辅助工具"></a>模板辅助工具</h2><h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>模板上下文包含了很多变量，其中包裹我们调用<code>render_template()</code>时传入的变量，除了在渲染时传入变量，也可以在模板中定义d变量，使用{% %}标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set navigation =[ (&apos;/&apos;, &apos;Home&apos;), (&apos;/about&apos;, &apos;About&apos;) ] %&#125;</span><br></pre></td></tr></table></figure><p>也可以将一部分模板数据定义为变量使用 <code>set</code>和<code>endset</code>来声明开始和结束<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% set navigation %&#125;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;/&quot;&gt;Home&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/li&gt;</span><br><span class="line">&#123;% endset %&#125;</span><br></pre></td></tr></table></figure></p><h4 id="内置上下文变量"><a href="#内置上下文变量" class="headerlink" title="内置上下文变量"></a>内置上下文变量</h4><table><thead><tr><th style="text-align:center">变量</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">config</td><td style="text-align:center">当前的配置对象</td></tr><tr><td style="text-align:center">request</td><td style="text-align:center">当前的请求对象，在已激活的请求环境下可用</td></tr><tr><td style="text-align:center">session</td><td style="text-align:center">当前的会话对象，在已激活的请求环境下可用</td></tr><tr><td style="text-align:center">g</td><td style="text-align:center">与请求绑定的全局变量，在已激活的请求环境下可用</td></tr></tbody></table><h4 id="自定义上下文"><a href="#自定义上下文" class="headerlink" title="自定义上下文"></a>自定义上下文</h4><p>如果很多个模板都需要使用同一变量，那么可以设置一个模板全局变量避免在多个视图函数中重复传入。flask提供了一个<code>app.context_processor</code>装饰器，可以用来注册模板上下文处理函数，它可以帮我们完成统一传入变量的工作。模板上下文处理函数需要返回一个<strong>包含变量键值对的字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.context_processor()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_foo</span><span class="params">()</span>:</span></span><br><span class="line">foo = <span class="string">"I am foo"</span></span><br><span class="line"><span class="keyword">return</span> dict(foo=foo)</span><br></pre></td></tr></table></figure><p>当我们调用<code>render_template()</code>函数渲染任意一个模板时，所有使用<code>app.context_processor</code>装饰器注册注册的模板上下文处理函数（包括flask内置的上下文处理函数）都会被执行，这些函数的返回值会被添加到模板中，因此我们可以直接在模板中使用<code>foo</code>变量</p><p>除了使用<code>app.context_processor</code>装饰器，也可以直接将其作为方法调用，传入模板上下文处理函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject_foo</span><span class="params">()</span>:</span></span><br><span class="line">foo = <span class="string">"I am foo"</span></span><br><span class="line"><span class="keyword">return</span> dict(foo=foo)</span><br><span class="line"></span><br><span class="line">app.context_processor(inject_foo)</span><br></pre></td></tr></table></figure></p><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>全局对象是指在所有的模板中都可以直接使用的对象</p><h3 id="内置全局函数"><a href="#内置全局函数" class="headerlink" title="内置全局函数"></a>内置全局函数</h3><p>Jinjia2在模板中默认提供了一些全局函数，常用的三个函数</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">range([start, ] stop[, step])</td><td style="text-align:left">和python中range()用法相同</td></tr><tr><td style="text-align:left">lipsum(n=5, html=True, min=20, max=100)</td><td style="text-align:left">生成随机文本，可以在测试时调用来填充页面，默认生成5段html文本，每段包含20～100个单词</td></tr><tr><td style="text-align:left">dict(**items)</td><td style="text-align:left">和python中dict()用法相同</td></tr></tbody></table><p>flask在模板中内置了两个全局函数</p><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">url_for()</td><td style="text-align:left">用于生成url</td></tr><tr><td style="text-align:left">get_flashed_messages()</td><td style="text-align:left">获取flash消息</td></tr></tbody></table><p>url_for()传入视图端点</p><h3 id="自定义全局函数"><a href="#自定义全局函数" class="headerlink" title="自定义全局函数"></a>自定义全局函数</h3><p>我们可以使用<code>app.template_global</code>装饰器直接将函数注册为模板全局函数。默认使用函数名称传入模板，在<code>app.template_global()</code>装饰器中使用name参数可以指定一个自定义名称。</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>在jinja2中，过滤器是一些可以用来修改和过滤变量值的特殊函数，过滤器和变量之间用<code>|</code>隔开，需要参数的过滤器可以用括号进行传递</p><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight plain"><figcaption><span>这会将name变量的值标题化，相当于在Python中调用`name.title()`</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#### 例子2</span><br><span class="line">```&#123;movies|length&#125;```可以获取watchlist列表的长度，类似在Python中调用`len(movies)`&lt;/br&gt;</span><br><span class="line"></span><br><span class="line">另一种方法时将过滤器作用于一部分模板数据，使用`filter`和`endfilter`标签声明开始和结束</span><br><span class="line">```jinjia2</span><br><span class="line">&#123;%filter upper%&#125;</span><br><span class="line">    This text will be uppercase.</span><br><span class="line">&#123;%endfilter%&#125;</span><br></pre></td></tr></table></figure><h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><table><thead><tr><th style="text-align:left">过滤器</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">default(value, default_value=u’’, boolean=False)</td><td style="text-align:left">设置默认值，默认值作为参数传入，别名为d</td></tr><tr><td style="text-align:left">escape(s)</td><td style="text-align:left">转移html文本，别名为e</td></tr><tr><td style="text-align:left">first(seq)</td><td style="text-align:left">返回序列的第一个元素</td></tr><tr><td style="text-align:left">last(seq)</td><td style="text-align:left">返回序列的最后一个元素</td></tr><tr><td style="text-align:left">length(object)</td><td style="text-align:left">返回变量的长度</td></tr><tr><td style="text-align:left">random(seq)</td><td style="text-align:left">返回序列中的随机元素</td></tr><tr><td style="text-align:left">safe(value)</td><td style="text-align:left">将变量值标记为安全，避免转义</td></tr></tbody></table><p>更多过滤器请访问<a href="http://jinja.procc.org/docs/2.10/templates/#builtin-filters" target="_blank" rel="noopener">http://jinja.procc.org/docs/2.10/templates/#builtin-filters</a></p><p>在使用过滤器时，列表中过滤器函数的第一个参数表示被过滤的变量值(value)或字符串(s)，即竖线符号左侧的值，其他参数可以通过添加括号传入，另外过滤器可以叠加使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello, &#123;&#123;name|default(&apos;陌生人&apos;)|title&#125;&#125;!&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>使用<code>app.template_filter()</code>装饰器可以注册自定义过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">from flask import Markup</span><br><span class="line"></span><br><span class="line">@app.template_filter()</span><br><span class="line">def musical(s):</span><br><span class="line">    return s+Markup(&apos; &amp;#9835&apos;) # 在变量字符后添加一个音符图标，用markup将其标记为安全字符</span><br></pre></td></tr></table></figure><p>和注册全局函数类似，可以在app.template_filter()中使用name关键字设置过滤器的名称，默认为函数名称。   <br><br>过滤器需要接受被处理的值为输入，返回处理后的值。</p><h2 id="模板组织结构"><a href="#模板组织结构" class="headerlink" title="模板组织结构"></a>模板组织结构</h2><h3 id="局部模板"><a href="#局部模板" class="headerlink" title="局部模板"></a>局部模板</h3><p>在web程序中，我们通常会为每一页面编写一个独立的模板，比如主页模板，设置模板，这些模板可以<strong>直接在试图函数中渲染并作为html响应主体</strong><br><br>除了这类模板我们还会用到另一类非独立模板，被称为<strong>局部模板或次模板</strong>，因为他们仅包含部分代码，使用不会再视图函数中直接渲染它，而是插入到其他独立模板中。<br><br>为了避免重复，当多个独立模板中都会使用同一块html代码时，我们可以把这部分代码抽离出来，存储在局部模板中。比如多个页面都要在顶部显示一个提示条，这个横幅抗议定义在局部模板<code>_banner.html</code>中。<br><br>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlcude &apos;_banner.html&apos; %&#125;</span><br></pre></td></tr></table></figure></p><p>来插入一个局部模板，这会吧局部模板的全部内容插在此标签的位置。</p><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><p>宏类似于python里的函数。使用宏可以把一部分模板代码封装到宏里，使用传递的参数来构建内容，最后返回构建后的内容。功能上和局部模板相似，都是为了方便代码块的重用。<br><br>在创建宏时使用<code>macro</code>和<code>endmacro</code>标签声明宏的开始和结束，在开始标签中定义宏的名称和接收的参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% macro qux(amount=1) %&#125;</span><br><span class="line">    &#123;% if amount == 1 %&#125;</span><br><span class="line">        i am qux</span><br><span class="line">    &#123;% elif amount &gt;1 %&#125;</span><br><span class="line">        we are quxs</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure><p>使用示例</p>{% from 'macros.html' import qux %}<br>...<br>{{ qux(amount=5) }}<br><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>当子模板继承基模板后，子模板会包含基模板的内容和结构，为了让子模板能插入或覆盖内容到基模板中，我们需要在<strong>基模板</strong>中定义block。在子模板中使用{% extend 'base.html' %}来声明扩展基模板。<br><em>extend必须是子模板的第一个标签！</em></p><h4 id="覆盖内容"><a href="#覆盖内容" class="headerlink" title="覆盖内容"></a>覆盖内容</h4><p>当在子模板里创建同名的块时，会用子块内容覆盖父块内容</p><h4 id="追加内容"><a href="#追加内容" class="headerlink" title="追加内容"></a>追加内容</h4><p>如果想向基模板的块中追加内容，需要用<code>super()</code>函数声明</p>{% block styles %}<br>{{ super() }}<br><style></br>    .foo{color:red}</br></style><br>{% endblock %}<br><h2 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h2><p>Flask中默认需要将静态文件存储在与主脚本（包含程序实例的脚本）同级目录的static文件夹中， 如果想在其他文件夹中储存静态文件，可以在在实例化Flask类是使用<code>static_folder</code>参数指定，静态文件的url路径中的static也会自动随着文件夹名称变化。<br><br>为了在html文件中引用静态文件，需要用<code>url_for()</code>函数获取静态文件url。flask内置了用于获取静态文件的师徒函数，端点值为static，它的默认url规则为<code>static/&lt;path:filename&gt;</code>，url变量filename是相对于static文件夹根目录的文件路径。</p><h3 id="添加favicon（网站头像）"><a href="#添加favicon（网站头像）" class="headerlink" title="添加favicon（网站头像）"></a>添加favicon（网站头像）</h3><p>在static文件夹下放入favicon文件，命名为favicon.ico，然后再html页面中声明favicon路径<br><link rel="icon" type="image/x-icon" href="{{url_for('static'," filename="favicon.ico" )}}=""></p><h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><p>flask提供的<code>flash()</code>函数发送消息储存在session中，在模板中使用全局函数<code>get_flashed_messages()</code>获取消息，并将其显示出来。 <br><br>通过flash()函数发送的消息储存在session中，所以我们需要为程序设置密钥，可以通过<code>app.secret_key</code>属性或者配置环境变量<code>SECRET_KEY</code>设置</p><p>示例<br>from flask import Flask, render_template, flash<br>app = Flask(__name__)<br>app.secret_key = 'secret string'<br>@app.route('/flash')<br>def just_flash():<br>flash('i am flash')<br>return redirect(url_for('index'))<br></p><p>在templates中的代码如下</p><main><br>    {% for message in get_flashed_messages() %}<br>        <div class="alert"> {{message}} </div><br>    {% endfor %}<br>    {% block content %} {% endblock %}<br></main><br><h2 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from flask import Flask, render_template</span><br><span class="line">...</span><br><span class="line">@app.errorhandler(404)</span><br><span class="line">def page_not_found(e):</span><br><span class="line">    return render_template(&apos;errors/404.html&apos;), 404</span><br></pre></td></tr></table></figure><p>错误处理函数接收异常对象为参数，异常对象提供了以下常用属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">code  状态码</span><br><span class="line">name    原因短语</span><br><span class="line">description 错误描述</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++文件操作</title>
      <link href="/2018/10/23/iocaozuo/"/>
      <url>/2018/10/23/iocaozuo/</url>
      
        <content type="html"><![CDATA[<h2 id="文本类型"><a href="#文本类型" class="headerlink" title="文本类型"></a>文本类型</h2><p>文件的类型分为文本文件和二进制文件，<br><a id="more"></a><br>文本文件又称为ASCII文件，它的每个字节存放一个ASCII码，代表一个字符。<br>二进制文件则是把内存中的数据，按照其在内存中的存储形式原样写在磁盘上存放。<br>比如一个 short 类型的整数20000，在内存中占用2个字节，而按文本形式输出则占5个字节。<br>因此在以文本形式输出时，一个字节对应一个字符，因而便于字符的输出，缺点则是占用存储空间较多。<br>用二进制形式输出数据，节省了转化时间和存储空间，但不能直接以字符的形式输出。</p><h2 id="c-中的文件操作类"><a href="#c-中的文件操作类" class="headerlink" title="c++中的文件操作类"></a>c++中的文件操作类</h2><ul><li>fstream（输入输出文件流）：支持文件的输入与输出操作；</li><li>ifstream（输入文件流）：支持从文件中输入操作；</li><li>ofstream（输出文件流）：支持向文件写入的操作；</li></ul><h2 id="文件的打开和关闭"><a href="#文件的打开和关闭" class="headerlink" title="文件的打开和关闭"></a>文件的打开和关闭</h2><h3 id="文件的打开"><a href="#文件的打开" class="headerlink" title="文件的打开"></a>文件的打开</h3><p>打开文件有两种方式：</p><ol><li>利用构造函数: 在实例化时传入参数<code>ofstream fs(path);</code></li><li>利用open方法: <code>fs.open(path);</code></li></ol><p>open方法有很多哥参数，第二个参数指明打开模式</p><ul><li>ios::in<br>打开文件以便读取</li><li>ios::out<br>打开文件以便写入</li><li>ios::ate<br>初始位置：文件尾</li><li>ios::app<br>所有输出附加在文件末尾</li><li>ios::trunc<br>如果文件已存在则先删除该文件</li><li>ios::binary<br>二进制方式</li></ul><p>这些方式可以组合使用，使用”|”符号连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ofstream fs;  </span><br><span class="line">fs.open(&quot;123.txt&quot;, ios::in|ios::out|ios::binary);</span><br></pre></td></tr></table></figure></p><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p><strong>ofstream、ifstream、fstream 的open函数或者构造函数都有默认的打开文件的方式</strong></p><p><code>ofstream fs1(&quot;123.txt&quot;, ios::out);</code></p><p><code>ifstream fs2(&quot;123.txt&quot;, ios::in);</code></p><p><code>fstream fs3(&quot;123.txt&quot;, ios::in|ios::out);</code></p><h4 id="判断文件是否打开成功"><a href="#判断文件是否打开成功" class="headerlink" title="判断文件是否打开成功"></a>判断文件是否打开成功</h4><ol><li><p>直接 if 判断 fs 对象；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ofstream fs(&apos;123.txt&apos;);</span><br><span class="line">if(!fs)</span><br><span class="line">    fs.close();</span><br></pre></td></tr></table></figure></li><li><p>用 is_open 方法判断；<br>fs.is_open()  打开成功返回1，否则返回0</p></li><li>用 good 方法判断；<br>用法同上</li><li>用 fail 方法判断；<br>返回值和good相反 </li></ol><h3 id="文件流的关闭"><a href="#文件流的关闭" class="headerlink" title="文件流的关闭"></a>文件流的关闭</h3><p><code>fs.close();</code></p><h2 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h2><h3 id="文本类型-1"><a href="#文本类型-1" class="headerlink" title="文本类型"></a>文本类型</h3><h4 id="读-gt-gt-get-getline"><a href="#读-gt-gt-get-getline" class="headerlink" title="读 &gt;&gt; get() getline()"></a>读 &gt;&gt; get() getline()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    var = 3000;</span><br><span class="line">    </span><br><span class="line">    ifstream fs_in;</span><br><span class="line">    fs_in.open(&quot;d:\\123.txt&quot;);</span><br><span class="line">    if (!fs_in) return 0;</span><br><span class="line">    fs_in &gt;&gt; var;</span><br><span class="line">    char ch = fs_in.get();</span><br><span class="line">    fs_in.close();</span><br><span class="line">    return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>getline()函数原型</li></ul><p><code>istream&amp; getline (char* s, streamsize n );</code><br>s 为一个字符数组，不能是string，n为获取字符的长度, 若读取的行数不为最后一行则返回true，使用可以<code>利用while(fs.getline(ch, n)); 来遍历文件的每一行</code></p><h4 id="写"><a href="#写" class="headerlink" title="写"></a>写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    short var = 20000;</span><br><span class="line">    ofstream fs;</span><br><span class="line">    fs.open(&quot;d:\\123.txt&quot;);</span><br><span class="line">    if (!fs) return 0;</span><br><span class="line"></span><br><span class="line">    fs &lt;&lt; var &lt;&lt; endl;</span><br><span class="line">    fs &lt;&lt; &quot;真的是你吗？&quot; &lt;&lt; endl;</span><br><span class="line">    fs.put(&apos;Y&apos;);   // 只能输出**单个字符**到文件</span><br><span class="line">    fs.close();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二进制类型"><a href="#二进制类型" class="headerlink" title="二进制类型"></a>二进制类型</h3><p>使用write()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    short var = 20000;</span><br><span class="line">    ofstream fs;</span><br><span class="line">    fs.open(&quot;d:\\123.txt&quot;);</span><br><span class="line">    if (!fs) return 0;</span><br><span class="line">    </span><br><span class="line">    fs.write((char*)&amp;var, sizeof(var));</span><br><span class="line">    fs.close();</span><br><span class="line">    return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>###</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件操作 </tag>
            
            <tag> C++ </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask03-cookies, session</title>
      <link href="/2018/09/23/flask03/"/>
      <url>/2018/09/23/flask03/</url>
      
        <content type="html"><![CDATA[<p>使用session和cookies制作一个简单的登录系统</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h4 id="设置cookie"><a href="#设置cookie" class="headerlink" title="设置cookie"></a>设置cookie</h4><p>在flask中，在响应中添加cookie最方便的方法是使用Response类提供的<code>set_cookie()</code>方法，要使用这个方法需要先试用<code>make_response()</code>方法生成一个response对象</p><p>set_cookie()方法支持多个参数来设置Cookie的选项</p><hr><p>key cookie的键<br>value  cookie的值<br>max_age   cookie保持的时间，单位为秒；默认在用户关闭浏览器过期<br>expires   具体过期时间<br>path<br>domain<br>secure<br>httponly</p><hr><h4 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h4><p>cookie可以通过request的cookies属性来获取<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        name = request.cookies.get(<span class="string">'name'</span>, <span class="string">'游客'</span>)</span><br><span class="line">       <span class="keyword">return</span> <span class="string">'hello %s'</span> %s name</span><br></pre></td></tr></table></figure></p><h3 id="session：更安全的cookie"><a href="#session：更安全的cookie" class="headerlink" title="session：更安全的cookie"></a>session：更安全的cookie</h3><h4 id="设置程序密钥"><a href="#设置程序密钥" class="headerlink" title="设置程序密钥"></a>设置程序密钥</h4><p>session用来将cookie数据加密储存，所以需要设置一个密钥，是一个随机复杂的字符串</p><ol><li>通过Flask.secret_key或配置变量SECRET_KEY设置<br><code>app.secret_key= &#39;secret string&#39;</code></li><li>更安全的办法是将其写入环境变量中(在命令行使用<code>export</code>/<code>set</code>命令),或者保存在.env文件中<br>然后用os.getenv()方法获取<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 第二个参数是没有获取到SECRET_KEY取的默认值</span></span><br><span class="line">app.secret_key = os.getenv(<span class="string">'SECRET_KEY'</span>, <span class="string">'secret string'</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="模拟用户登录"><a href="#模拟用户登录" class="headerlink" title="模拟用户登录"></a>模拟用户登录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect, session, url_for</span><br><span class="line">...</span><br><span class="line"><span class="meta">@app.route('/login')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'logged_in'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><p>在hello视图中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 从query string里获取name参数</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        name = request.cookies.get(<span class="string">'name'</span>, <span class="string">'游客'</span>)</span><br><span class="line">    <span class="comment"># escape 防止XSS攻击</span></span><br><span class="line">    response = <span class="string">'hello %s'</span> % escape(name)</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'logged_in'</span>):</span><br><span class="line">        response += <span class="string">'[已登录]'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response += <span class="string">'[请登录]'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></p><h4 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h4><p>登出账户的世纪操作就是把代表用户认证的cookie删除，这通过session.pop()方法实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    session.pop(<span class="string">'logged_in'</span>)</span><br><span class="line">   <span class="keyword">return</span> redirect(url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, make_response, redirect, url_for, session</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> escape</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.secret_key = <span class="string">'adadanjkdhoaf29891'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 从query string里获取name参数</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        name = request.cookies.get(<span class="string">'name'</span>, <span class="string">'游客'</span>)</span><br><span class="line">    <span class="comment"># escape 防止XSS攻击</span></span><br><span class="line">    response = <span class="string">'hello %s'</span> % escape(name)</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">'logged_in'</span>):</span><br><span class="line">        response += <span class="string">'[已登录]'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response += <span class="string">'[请登录]'</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/login/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(name)</span>:</span></span><br><span class="line">    response = make_response(redirect(url_for(<span class="string">'hello'</span>)))</span><br><span class="line">    response.set_cookie(<span class="string">'name'</span>, name)</span><br><span class="line">    session[<span class="string">'logged_in'</span>] = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/logout')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'logged_in'</span> <span class="keyword">in</span> session:</span><br><span class="line">        session.pop(<span class="string">'logged_in'</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'hello'</span>))</span><br></pre></td></tr></table></figure><p>在浏览器分别访问</p><ul><li><code>localhost:5000/</code></li><li><code>localhost:5000/hello</code></li><li><code>localhost:5000/login/baichen</code></li><li><code>localhost:5000/logout</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> cookies </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask02-启动开发服务器</title>
      <link href="/2018/09/22/flask02/"/>
      <url>/2018/09/22/flask02/</url>
      
        <content type="html"><![CDATA[<p>flask通过依赖包Click安装了一个CLI(命令行交互界面)系统, 可以通过flask命令执行内置命令<br>使用<code>flask run</code>来启动内置的开发服务器<br><a id="more"></a><br>使用命令之前确保激活了虚拟环境</p><p>如果执行<code>flask run</code>命令后显示(command not found)或其他错误，可以尝试使用<code>python -m flask run</code>启动服务器</p><p>旧的启动开发服务器的方式是使用<code>app.run()</code>方法，目前已不推荐使用</p><h3 id="自动发现程序实例"><a href="#自动发现程序实例" class="headerlink" title="自动发现程序实例"></a>自动发现程序实例</h3><p>在执行flask run 命令之前我们需要提供程序实例所在模块的位置，我们之所以可以直接运行是因为flask会自动探测程序实例，自动探测存在下面的规则</p><ol><li>从当前目录寻找app.py或wsgi.py的模块，并从中寻找名为app.py或application的程序实例</li><li>从环境变量FLASK_APP对应的值寻找名为app.py或application的程序实例</li></ol><p>如果程序主模块是其他名称，比如<code>hello.py</code> ，需要设置环境变量FLASK_APP<br>在macos/linux下<br><code>$ export FLASK_APP=hello</code></p><p>在windows下<br><code>&gt; set FLASK_APP=hello</code></p><h3 id="管理环境变量"><a href="#管理环境变量" class="headerlink" title="管理环境变量"></a>管理环境变量</h3><p>环境变量在创建新命令行和重启电脑之后就清除了，为了避免频繁设置环境变量，可以使用python-dotenv管理项目的环境变量<br>安装: <code>pipenv install python-dotenv</code></p><ol><li>在项目根目录创建两个文件<code>.flask</code>和<code>.env</code>，环境变量使用键值对定义，每行一个，#为注释<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOME_VAR=<span class="number">1</span></span><br><span class="line"><span class="comment">#这是注释</span></span><br><span class="line">FOO = <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="更多启动选项"><a href="#更多启动选项" class="headerlink" title="更多启动选项"></a>更多启动选项</h3><h4 id="使服务器对外部可见"><a href="#使服务器对外部可见" class="headerlink" title="使服务器对外部可见"></a>使服务器对外部可见</h4><p><code>$ flask run --host=0.0.0.0</code></p><h4 id="设置端口"><a href="#设置端口" class="headerlink" title="设置端口"></a>设置端口</h4><p><code>4 flask run --port=8000</code></p>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask01-路由</title>
      <link href="/2018/09/22/flask01-1/"/>
      <url>/2018/09/22/flask01-1/</url>
      
        <content type="html"><![CDATA[<h3 id="route装饰器"><a href="#route装饰器" class="headerlink" title="route装饰器"></a>route装饰器</h3><p>route()装饰器的第一个参数是<strong>URL规则</strong>，用字符串表示，必须以斜杠开始，这里的URL是相对URL。<br>以<code>www.blacston.com</code>为例，’/‘ 对应的是根地址 <code>www.blacton.com</code>, ‘/hello’对应的是 <code>www.blacton.com/hello</code><br><a id="more"></a></p><h3 id="为视图函数绑定多个URL"><a href="#为视图函数绑定多个URL" class="headerlink" title="为视图函数绑定多个URL"></a>为视图函数绑定多个URL</h3><p>一个视图函数可以绑定多个URL<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hi')</span></span><br><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say_hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello'</span></span><br></pre></td></tr></table></figure></p><p>这样访问两个URL时都会出发say_hello()函数</p><h3 id="动态URL"><a href="#动态URL" class="headerlink" title="动态URL"></a>动态URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/greet/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greet</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br></pre></td></tr></table></figure><p>Flask会解析请求并把请求的URL与视图函数的URL规则进行匹配，比如这里的URL规则是/greet/<name><br>那么/greet/baichen，/greet/bar 的请求都会出发这个视图函数</name></p><h3 id="设置默认值"><a href="#设置默认值" class="headerlink" title="设置默认值"></a>设置默认值</h3><p>当URL规则包含变量时，如果用户访问的url没有变量，flask在匹配失败后会返回一个404错误响应，解决方法是在route()函数里使用defaults参数设置变量的默认值，这个参数接收字典作为输入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello', defaults=&#123;'name': '游客'&#125;)</span></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br></pre></td></tr></table></figure></p><p>它其实相当于<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello')</span></span><br><span class="line"><span class="meta">@app.route('/hello/&lt;name&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(name=<span class="string">'游客'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello %s'</span> % name</span><br></pre></td></tr></table></figure></p><h3 id="URL处理"><a href="#URL处理" class="headerlink" title="URL处理"></a>URL处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/hello/&lt;int:year&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(year)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'year is : '</span> % year</span><br></pre></td></tr></table></figure><p>其中int把year转换成了整型，flask还提供了其他的转换器，有以下几种</p><ul><li>string</li><li>int</li><li>float</li><li>path  （包含斜线的字符串）</li><li>any   匹配一系列给定值的一个元素</li><li>uuid</li></ul><p>any的用法如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/colors/any(blue, red, white):color')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">three_colors</span><span class="params">(color)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'i like %s'</span> % color</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> flask学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> route </tag>
            
            <tag> 路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针,引用和常量</title>
      <link href="/2018/09/13/pointer-reference-constant/"/>
      <url>/2018/09/13/pointer-reference-constant/</url>
      
        <content type="html"><![CDATA[<h3 id="常量指针和指针常量"><a href="#常量指针和指针常量" class="headerlink" title="常量指针和指针常量"></a>常量指针和指针常量</h3><p><strong>常量指针</strong>是指向常量的指针，如：<code>const int* p</code> 其中p是一个指针，指向了一个常量，也就是<code>*p</code>不能修改，而p的值可以修改</p><p><strong>指针常量</strong>是个常量，如：<code>int *const p</code> p是个指针，p（指针的指向）不能修改，但是<code>*p</code>可以修改</p><p><strong>指向常量的指针常量</strong>，如：<code>const int const* p</code> p是个指针常量，而且指向的值也是个常量<br><a id="more"></a></p><h4 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h4><p>字符串处理函数的函数的声明。它们的参数一般声明为常量指针。例如，字符串比较函数的声明是这样的：<br><code>int strcmp(const char *str1, const char *str2);</code><br>这样做的目的是，函数的参数声明用了常量指针的形式，保证了在函数内部，那个常量不被更改，<br>可以接受<strong>非常量</strong>的字符串，这是因为变量可以当作常量，而常量不可以当作变量，比如下面这段代码就是错误的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const int a = 5;</span><br><span class="line">int* p = &amp;a;</span><br></pre></td></tr></table></figure><h3 id="引用和常量引用"><a href="#引用和常量引用" class="headerlink" title="引用和常量引用"></a>引用和常量引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int a =10;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;&quot;b:&quot;&lt;&lt;endl;</span><br><span class="line">const int&amp; b = a;</span><br><span class="line">cout&lt;&lt;b&lt;&lt;&apos; &apos;;</span><br><span class="line">a = 20;</span><br><span class="line">cout&lt;&lt;b&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cout&lt;&lt;&quot;c: &quot;&lt;&lt;endl;</span><br><span class="line">const int&amp; c = a*2;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;&apos; &apos;;</span><br><span class="line">a=30;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b:</span><br><span class="line">10 20</span><br><span class="line">c: </span><br><span class="line">40 40</span><br></pre></td></tr></table></figure><p>可以看出来，当常量引用的初始值是变量时，可以通过变量修改常量，当初始值是const时是不能修改的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">double val = 3.14;</span><br><span class="line">const int &amp;r4 = val;</span><br><span class="line">std::cout &lt;&lt; &quot;r4 = &quot; &lt;&lt; r4 &lt;&lt; std::endl;</span><br><span class="line">val = 5.2;</span><br><span class="line">std::cout &lt;&lt; &quot;r4 = &quot; &lt;&lt; r4 &lt;&lt; &quot;     val = &quot; &lt;&lt; val &lt;&lt; std::endl;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r4 =3</span><br><span class="line">r4 = 3       val = 5.2</span><br></pre></td></tr></table></figure><p>这种情况似乎与r2一样，但是仔细观察就会发现val是<code>double</code>型，而r4是<code>int</code>型，<br>所以我们可以知道：当常量引用的类型和它的初始值的类型不同时，无法通过变量修改引用值。</p><h4 id="使用引用常量传递参数"><a href="#使用引用常量传递参数" class="headerlink" title="使用引用常量传递参数"></a>使用引用常量传递参数</h4><p>如果不想让函数修改原来的变量，可以使用传值和传入常量引用的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">upper(char* a);</span><br><span class="line">upper(char* const &amp;a);</span><br></pre></td></tr></table></figure><p>这两种方法那个更好呢？答案是使用常量引用，因为使用传值会在函数内部创建一个副本，这样会降低效率。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.cnblogs.com/FlyGee/p/7424852.html" target="_blank" rel="noopener">常量指针与指针常量的区别-flyge</a><br><br><a href="https://blog.csdn.net/liupeng1985/article/details/23534485" target="_blank" rel="noopener">尽量使用“引用常量”传递函数参数</a><br><br><a href="https://www.cnblogs.com/yang666/p/6546966.html" target="_blank" rel="noopener">对const的引用(常量引用)</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 指针 </tag>
            
            <tag> 引用 </tag>
            
            <tag> 常量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie处理(requests库)</title>
      <link href="/2018/06/25/shu-cookies/"/>
      <url>/2018/06/25/shu-cookies/</url>
      
        <content type="html"><![CDATA[<p>以登录上海大学教务处并获取课程表为例, 分析cookie处理</p><h3 id="cookie与session"><a href="#cookie与session" class="headerlink" title="cookie与session"></a>cookie与session</h3><p>session机制采用的是在服务器端保持状态的方案，而cookie机制则是在客户端保持状态的方案，cookie又叫会话跟踪机制。打开一次浏览器到关闭浏览器算是一次会话。说到这里，讲下HTTP协议，前面提到，HTTP协议是一种无状态协议，在数据交换完毕后，服务器端和客户端的链接就会关闭，每次交换数据都需要建立新的链接。此时，服务器无法从链接上跟踪会话。cookie可以跟踪会话，弥补HTTP无状态协议的不足。<br><a id="more"></a></p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ol><li>首先创建一个session对象<code>s = requests.session()</code></li><li>使用session的get方法, <code>s.get(url, headers)</code>, 获取验证码并保存在本地,此时已经获得cookie, 然后使用post方法提交表单数据</li><li>上一步的cookie已经保留, 所以再使用s的get方法, 请求课程表的url地址<br>url是’<a href="http://cj.shu.edu.cn/StudentPortal/CtrlStudentSchedule&#39;" target="_blank" rel="noopener">http://cj.shu.edu.cn/StudentPortal/CtrlStudentSchedule&#39;</a></li></ol><h3 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.168 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = s.get(<span class="string">'http://cj.shu.edu.cn/User/GetValidateCode?+%20GetTimestamp()'</span>, headers=headers)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'verify.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">form_data = &#123;</span><br><span class="line">    <span class="string">'url'</span>:<span class="string">''</span> ,</span><br><span class="line">    <span class="string">'txtUserNo'</span>: <span class="string">'17121122'</span>,</span><br><span class="line">    <span class="string">'txtPassword'</span>: <span class="string">'xxxxxx'</span>, <span class="comment"># 这里填密码</span></span><br><span class="line">    <span class="string">'txtValidateCode'</span>: input(<span class="string">'verify: '</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://cj.shu.edu.cn/'</span></span><br><span class="line">result = s.post(url, headers=headers, data=form_data)</span><br><span class="line"></span><br><span class="line">sche = s.post(<span class="string">'http://cj.shu.edu.cn/StudentPortal/CtrlStudentSchedule'</span>, headers=headers, data=&#123;<span class="string">'academicTermID'</span> : <span class="string">'20173'</span>&#125;)</span><br><span class="line">print(sche.text)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1- 验证码图片和课程表地址是通过chrome浏览器的Network获得的<br>2- <code>academicTermID&#39; : &#39;20173&#39;</code> 中的20173是学期的代码</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程</title>
      <link href="/2018/06/17/threads/"/>
      <url>/2018/06/17/threads/</url>
      
        <content type="html"><![CDATA[<p>Python标准库提供了两个模块: thread 和 threading, thread是低级模块, threading是对其的封装, 绝大多数情况下我们只需要使用threading<br><a id="more"></a></p><h2 id="使用threading创建多线程"><a href="#使用threading创建多线程" class="headerlink" title="使用threading创建多线程"></a>使用threading创建多线程</h2><p>有两种方法</p><p>第一种方法是:把一个函数传入并创建Thread实例,然后调用start方法开始执行</p><p>第二种方法是:从threading.Thread<strong>继承</strong>并创建线程类, 然后<strong>重写</strong><strong>init</strong>方法和run方法</p><p>方法一演示如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time, threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">thread_run</span><span class="params">(urls)</span>:</span></span><br><span class="line">    print(<span class="string">"Current process %s is running"</span> % threading.current_thread().name)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        print(<span class="string">"%s ------&gt; %s"</span> % (threading.current_thread().name, url))</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"%s ended"</span> % threading.current_thread().name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"%s is running..."</span> % threading.current_thread().name)</span><br><span class="line">t1 = threading.Thread(target=thread_run, name=<span class="string">"thread1"</span>, args=([<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>],))</span><br><span class="line">t2 = threading.Thread(target=thread_run, name=<span class="string">"thread2"</span>, args=([<span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>],))</span><br><span class="line"></span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line"></span><br><span class="line">print(<span class="string">"%s ended"</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure></p><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">MainThread is running...</span><br><span class="line">Current process thread1 is running</span><br><span class="line">thread1 ------&gt; 1</span><br><span class="line">Current process thread2 is running</span><br><span class="line">thread2 ------&gt; 5</span><br><span class="line">thread1 ------&gt; 2</span><br><span class="line">thread2 ------&gt; 6</span><br><span class="line">thread1 ------&gt; 3</span><br><span class="line">thread2 ------&gt; 7</span><br><span class="line">thread2 ------&gt; 8</span><br><span class="line">thread1 ------&gt; 4</span><br><span class="line">thread1 ended</span><br><span class="line">thread2 ended</span><br><span class="line">MainThread ended</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random, threading, time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, urls)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self, name=name)</span><br><span class="line">        self.urls = urls</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Current %s is running..."</span> % threading.current_thread().name)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.urls:</span><br><span class="line">            print(<span class="string">"%s ---&gt;&gt;&gt; %s"</span> % (threading.current_thread().name, url))</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">"%s ended"</span> % threading.current_thread().name)</span><br><span class="line">print(<span class="string">"%s is running"</span> % threading.current_thread().name)</span><br><span class="line">t1 = MyThread(name=<span class="string">"Thread1"</span>, urls=[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>])</span><br><span class="line">t2 = MyThread(name=<span class="string">"Thread2"</span>, urls=[<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>])</span><br><span class="line">t1.start()</span><br><span class="line">t2.start()</span><br><span class="line">t1.join()</span><br><span class="line">t2.join()</span><br><span class="line">print(<span class="string">"%s ended"</span> % threading.current_thread().name)</span><br></pre></td></tr></table></figure></p><p>运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MainThread is running</span><br><span class="line">Current Thread1 is running...</span><br><span class="line">Thread1 ---&gt;&gt;&gt; 1</span><br><span class="line">Current Thread2 is running...</span><br><span class="line">Thread2 ---&gt;&gt;&gt; 4</span><br><span class="line">Thread2 ---&gt;&gt;&gt; 5</span><br><span class="line">Thread1 ---&gt;&gt;&gt; 2</span><br><span class="line">Thread2 ---&gt;&gt;&gt; 6</span><br><span class="line">Thread1 ---&gt;&gt;&gt; 3</span><br><span class="line">Thread2 ended</span><br><span class="line">Thread1 ended</span><br><span class="line">MainThread ended</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>多个线程对某个数据进行修改可能会出现错误, 使用Thread对象的Lock和RLock方法可以实现简单的线程同步,这两个对象都有acquire方法和release方法, 对于哪些每次只允许一个线程操作的数据, 可以将其操作放到acquire和release之间<br>对于<strong>Lock对象</strong>如果一个线程进行两次aquire,由于没有release第二次的aquire将会挂起,造成死锁<br><strong>RLock</strong>对象允许一个线程多次对其进行acquire操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RLock使多个线程不能同时更改变量</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">mylock = threading.RLock()</span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        初始化</span></span><br><span class="line"><span class="string">        :param name: 线程名称</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        threading.Thread.__init__(self, name=name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> num</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            mylock.acquire()</span><br><span class="line">            print(<span class="string">"%s locked, Number: %d"</span> % (threading.current_thread().name, num))</span><br><span class="line">            <span class="keyword">if</span> num &gt;= <span class="number">4</span>:</span><br><span class="line">                mylock.release()</span><br><span class="line">                print(<span class="string">"%s released, Number: %d"</span> % (threading.current_thread().name, num))</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"%s released, Number: %d"</span> % (threading.current_thread().name, num))</span><br><span class="line">            mylock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    thread1 = MyThread(<span class="string">'thread1'</span>)</span><br><span class="line">    thread2 = MyThread(<span class="string">'thread2'</span>)</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2.start()</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">thread1 locked, Number: 0</span><br><span class="line">thread1 released, Number: 1</span><br><span class="line">thread1 locked, Number: 1</span><br><span class="line">thread1 released, Number: 2</span><br><span class="line">thread1 locked, Number: 2</span><br><span class="line">thread1 released, Number: 3</span><br><span class="line">thread1 locked, Number: 3</span><br><span class="line">thread1 released, Number: 4</span><br><span class="line">thread1 locked, Number: 4</span><br><span class="line">thread1 released, Number: 4</span><br><span class="line">thread2 locked, Number: 4</span><br><span class="line">thread2 released, Number: 4</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/2018/06/15/jincheng/"/>
      <url>/2018/06/15/jincheng/</url>
      
        <content type="html"><![CDATA[<h3 id="单核如何实现多任务"><a href="#单核如何实现多任务" class="headerlink" title="单核如何实现多任务?"></a>单核如何实现多任务?</h3><p>依次轮流执行, 看上去像是同时进行</p><h3 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行?"></a>并发与并行?</h3><p><strong>并发</strong>是看上去一起执行,任务数大于CPU核心数  <strong>并行</strong>是真正的一起执行, 任务数小于CPU核心数<br><a id="more"></a></p><h3 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h3><p>. 线程：是程序执行流的最小单元，是系统独立调度和分配CPU（独立运行）的基本单位<br>. 进程：是资源分配的基本单位。一个进程包括多个线程。 对于操作系统而言, 一个任务就是一个进程</p><p><strong>区别</strong>：</p><ol><li><p>线程与资源分配无关，它属于某一个进程，并与进程内的其他线程一起共享进程的资源。</p></li><li><p>每个进程都有自己一套独立的资源（数据），供其内的所有线程共享。</p></li><li><p>不论是大小，开销线程要更“轻量级”</p></li><li><p>一个进程内的线程通信比进程之间的通信更快速，有效。（因为共享变量）</p></li></ol><h3 id="实现多任务的方式"><a href="#实现多任务的方式" class="headerlink" title="实现多任务的方式"></a>实现多任务的方式</h3><ol><li>多进程模式</li><li>多线程模式</li><li>协程模式</li><li>多进程+多线程模式</li></ol><h3 id="单任务现象"><a href="#单任务现象" class="headerlink" title="单任务现象"></a>单任务现象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'bye'</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p><strong>这样不会执行run(), 只有上面的while循环结束后才可以执行</strong></p><h3 id="实现多任务"><a href="#实现多任务" class="headerlink" title="实现多任务"></a>实现多任务</h3><p><strong>multiprocessing库</strong> –跨平台的多进程模块<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">"hello---%s"</span>%os.getpid()) <span class="comment"># os.getpid()获取当前进程id号, os.getppid()获取当前进程的父进程的id号</span></span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"主(父)进程启动---%s"</span>%os.getpid())</span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    p = Process(target=run)   <span class="comment"># 创建进程是为了执行函数, 需要传入两个参数 target=函数和arg=() 传入的参数必须元组, 如果元组只有一个元素后面必须加个逗号, 这样才构成元组</span></span><br><span class="line">    <span class="comment"># 启动进程</span></span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        print(<span class="string">'bye'</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure></p><h3 id="父子进程的先后顺序"><a href="#父子进程的先后顺序" class="headerlink" title="父子进程的先后顺序"></a>父子进程的先后顺序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(str)</span>:</span></span><br><span class="line">    print(<span class="string">"子进程启动"</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"子进程结束"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"父进程启动"</span>)</span><br><span class="line">    p = Process(target=run, args=(<span class="string">"nice"</span>,))</span><br><span class="line">    p.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"父进程结束"</span>)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父进程启动</span><br><span class="line">父进程结束</span><br><span class="line">子进程启动</span><br><span class="line">子进程结束</span><br></pre></td></tr></table></figure></p><p><strong>父进程的结束不影响子进程, 怎么让父进程等大子进程结束再执行父进程?</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(str)</span>:</span></span><br><span class="line">    print(<span class="string">"子进程启动"</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">"子进程结束"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"父进程启动"</span>)</span><br><span class="line">    p = Process(target=run, args=(<span class="string">"nice"</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">    p.join() <span class="comment"># 等待进程结束</span></span><br><span class="line">    print(<span class="string">"父进程结束"</span>)</span><br></pre></td></tr></table></figure></p><h3 id="全局变量在多个进程中不能共享"><a href="#全局变量在多个进程中不能共享" class="headerlink" title="全局变量在多个进程中不能共享"></a>全局变量在多个进程中不能共享</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"子进程开始"</span>)</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    print(<span class="string">"子进程结束--%d"</span> % num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"父进程开始"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建子进程</span></span><br><span class="line">    p = Process(target=run)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join() <span class="comment"># 等待进程结束</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"父进程结束--%s"</span>%num)</span><br></pre></td></tr></table></figure><p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">父进程开始</span><br><span class="line">子进程开始</span><br><span class="line">子进程结束--101</span><br><span class="line">父进程结束--100</span><br></pre></td></tr></table></figure></p><ul><li>在子进程中修改全局变量对父进程全局变量没有影响, 因为在创建子进程时对全局变量做了一个备份, 父进程和子进程的变量独立</li><li>每个进程都有自己的代码段, 堆栈段, 数据段</li></ul><p>如果再创建一个子进程<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建子进程</span></span><br><span class="line">p2 = Process(target=run)</span><br><span class="line">p2.start()</span><br><span class="line">p2.join()  <span class="comment"># 等待进程结束</span></span><br></pre></td></tr></table></figure></p><p>变量依然独立</p><h3 id="启动大量子进程"><a href="#启动大量子进程" class="headerlink" title="启动大量子进程"></a>启动大量子进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"子进程%s启动--%s"</span> % (name, os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    time.sleep(random.choice[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">    end = time.time()</span><br><span class="line">    print(<span class="string">"子进程%s结束--%s--耗时%.2f"</span> % (name, os.getpid(), end - start))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"父进程启动"</span>)</span><br><span class="line">    <span class="comment"># 创建多个进程使用进程池</span></span><br><span class="line">    pp = Pool(<span class="number">2</span>) <span class="comment"># 表示可以同时执行的进程数, 默认值是CPU核心数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="comment"># 创建进程, 放入进程池, 同一管理</span></span><br><span class="line">        pp.apply_async(run, args=(i,))</span><br><span class="line">    <span class="comment"># 使用进程池时,在调用之前必须先调用close(), 调用close之后就不能添加新的进程了 </span></span><br><span class="line">    pp.close() </span><br><span class="line">    <span class="comment"># 等待进程池中所有子进程结束再去执行父进程</span></span><br><span class="line">    pp.join()</span><br><span class="line">    print(<span class="string">"父进程结束"</span>)</span><br></pre></td></tr></table></figure><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>进程间通过队列通信, 队列相当于一个中间人的角色<br>Process之间肯定是需要通信的，操作系统提供了很多机制来实现进程间的通信。Python的multiprocessing模块包装了底层的机制，提供了Queue、Pipes等多种方式来交换数据。</p><p>我们以Queue为例，在父进程中创建两个子进程，一个往Queue里写数据，一个从Queue里读数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">import</span> os, time, random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to write: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]:</span><br><span class="line">        print(<span class="string">'Put %s to queue...'</span> % value)</span><br><span class="line">        q.put(value)</span><br><span class="line">        time.sleep(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读数据进程执行的代码:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(q)</span>:</span></span><br><span class="line">    print(<span class="string">'Process to read: %s'</span> % os.getpid())</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        value = q.get(<span class="keyword">True</span>)</span><br><span class="line">        print(<span class="string">'Get %s from queue.'</span> % value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = Queue()</span><br><span class="line">    pw = Process(target=write, args=(q,))</span><br><span class="line">    pr = Process(target=read, args=(q,))</span><br><span class="line">    <span class="comment"># 启动子进程pw，写入:</span></span><br><span class="line">    pw.start()</span><br><span class="line">    <span class="comment"># 启动子进程pr，读取:</span></span><br><span class="line">    pr.start()</span><br><span class="line">    <span class="comment"># 等待pw结束:</span></span><br><span class="line">    pw.join()</span><br><span class="line">    <span class="comment"># pr进程里是死循环，无法等待其结束，只能强行终止:</span></span><br><span class="line">    pr.terminate()</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础爬虫</title>
      <link href="/2018/06/08/basic-spider/"/>
      <url>/2018/06/08/basic-spider/</url>
      
        <content type="html"><![CDATA[<h1 id="基础爬虫"><a href="#基础爬虫" class="headerlink" title="基础爬虫"></a>基础爬虫</h1><h2 id="基础架构和流程"><a href="#基础架构和流程" class="headerlink" title="基础架构和流程"></a>基础架构和流程</h2><ul><li>简单的爬虫架构由以下几部分构成：</li><li>爬虫调度器：总体协调其它几个模块的工作</li><li>URL管理器(UrlManager)：负责管理URL，维护已经爬取的URL集合和未爬取的URL集合</li><li>网页下载器(HtmlDownloader)：对未爬取的URL下载</li><li>网页解析器(HtmlParser)：解析已下载的html，并从中提取新的URL交给URL管理器，数据交给存储器处理</li><li>数据存储器(DataOutput)：将html解析出来的数据进行存取<a id="more"></a>流程图如下<br><img src="http://i2.51cto.com/images/blog/201801/09/516fe1c29bedf43d2ee5676558ba0ea4.jpg?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt=""><br>以爬取百度百科为例子来理解基础爬虫</li></ul><h3 id="URL管理器-UrlManager"><a href="#URL管理器-UrlManager" class="headerlink" title="URL管理器(UrlManager)"></a>URL管理器(UrlManager)</h3><p>URL管理器包括两个变量, 即已爬取URL集合与未爬取URL集合, 还需提供以下接口:</p><ol><li>判断是否有待取URL  has_new_url()</li><li>添加新的URL到未爬取的集合中  add_new_url()  add_new_urls()</li><li>获取一个未爬取的URL   get_new_url()</li><li>获取未爬取URL集合的大小  new_url_size()</li><li>获取已经爬取的URL集合的大小  old_url_size()</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UrlManager</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.new_urls = set()<span class="comment">#未爬取URL集合</span></span><br><span class="line">        self.old_urls = set()<span class="comment">#已爬取URL集合</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_new_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        判断是否有未爬取的URL</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.new_url_size()!=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_new_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取一个未爬取的URL</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        new_url = self.new_urls.pop()</span><br><span class="line">        self.old_urls.add(new_url)</span><br><span class="line">        <span class="keyword">return</span> new_url</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_url</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">         将新的URL添加到未爬取的URL集合中</span></span><br><span class="line"><span class="string">        :param url:单个URL</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.new_urls <span class="keyword">and</span> url <span class="keyword">not</span> <span class="keyword">in</span> self.old_urls:</span><br><span class="line">            self.new_urls.add(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_urls</span><span class="params">(self,urls)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        将新的URLS添加到未爬取的URL集合中</span></span><br><span class="line"><span class="string">        :param urls:url集合</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> urls <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> len(urls)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            self.add_new_url(url)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">new_url_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取未爬取URL集合的s大小</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> len(self.new_urls)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">old_url_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        获取已经爬取URL集合的大小</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> len(self.old_urls)</span><br></pre></td></tr></table></figure><h3 id="Html下载器-HtmlDownloader"><a href="#Html下载器-HtmlDownloader" class="headerlink" title="Html下载器(HtmlDownloader)"></a>Html下载器(HtmlDownloader)</h3><ul><li>Html下载器用来下载网页, 需要注意网页的编码, 只需要提供一个接口  download(url)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlDownloader</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> url <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        user_agent = <span class="string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span></span><br><span class="line">        headers=&#123;<span class="string">'User-Agent'</span>:user_agent&#125;</span><br><span class="line">        r = requests.get(url,headers=headers, timeout=<span class="number">60</span>)  <span class="comment"># 防止爬取过快被限制 </span></span><br><span class="line">        <span class="keyword">if</span> r.status_code==<span class="number">200</span>:</span><br><span class="line">            r.encoding=<span class="string">'utf-8'</span></span><br><span class="line">            <span class="keyword">return</span> r.text</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Html解析器"><a href="#Html解析器" class="headerlink" title="Html解析器"></a>Html解析器</h3><ul><li>Html解析器需要提供一个parser对外接口, 输入参数为url和Html下载器返回的内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HtmlParser</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parser</span><span class="params">(self,page_url,html_cont)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        用于解析网页内容抽取URL和数据</span></span><br><span class="line"><span class="string">        :param page_url: 下载页面的URL</span></span><br><span class="line"><span class="string">        :param html_cont: 下载的网页内容</span></span><br><span class="line"><span class="string">        :return:返回URL和数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> page_url <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> html_cont <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        soup = BeautifulSoup(html_cont,<span class="string">'html.parser'</span>)</span><br><span class="line">        new_urls = self._get_new_urls(page_url,soup)</span><br><span class="line">        new_data = self._get_new_data(page_url,soup)</span><br><span class="line">        <span class="keyword">return</span> new_urls,new_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_new_urls</span><span class="params">(self,page_url,soup)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        抽取新的URL集合</span></span><br><span class="line"><span class="string">        :param page_url: 下载页面的URL</span></span><br><span class="line"><span class="string">        :param soup:soup</span></span><br><span class="line"><span class="string">        :return: 返回新的URL集合</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        new_urls = set()</span><br><span class="line">        <span class="comment">#抽取符合要求的a标签</span></span><br><span class="line">        <span class="comment">#原书代码</span></span><br><span class="line">        <span class="comment"># links = soup.find_all('a',href=re.compile(r'/view/\d+\.htm'))</span></span><br><span class="line">        <span class="comment">#2017-07-03 更新,原因百度词条的链接形式发生改变</span></span><br><span class="line">        links = soup.find_all(<span class="string">'a'</span>, href=re.compile(<span class="string">r'/item/.*'</span>))</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            <span class="comment">#提取href属性</span></span><br><span class="line">            new_url = link[<span class="string">'href'</span>]</span><br><span class="line">            <span class="comment">#拼接成完整网址</span></span><br><span class="line">            new_full_url = urllib.parse.urljoin(page_url,new_url)</span><br><span class="line">            new_urls.add(new_full_url)</span><br><span class="line">        <span class="keyword">return</span> new_urls</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_new_data</span><span class="params">(self,page_url,soup)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        抽取有效数据</span></span><br><span class="line"><span class="string">        :param page_url:下载页面的URL</span></span><br><span class="line"><span class="string">        :param soup:</span></span><br><span class="line"><span class="string">        :return:返回有效数据</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        data=&#123;&#125;</span><br><span class="line">        data[<span class="string">'url'</span>]=page_url</span><br><span class="line">        title = soup.find(<span class="string">'dd'</span>,class_=<span class="string">'lemmaWgt-lemmaTitle-title'</span>).find(<span class="string">'h1'</span>)</span><br><span class="line">        data[<span class="string">'title'</span>]=title.get_text()</span><br><span class="line">        summary = soup.find(<span class="string">'div'</span>,class_=<span class="string">'lemma-summary'</span>)</span><br><span class="line">        <span class="comment">#获取到tag中包含的所有文版内容包括子孙tag中的内容,并将结果作为Unicode字符串返回</span></span><br><span class="line">        data[<span class="string">'summary'</span>]=summary.get_text()</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h3 id="数据存储器-DataOutput"><a href="#数据存储器-DataOutput" class="headerlink" title="数据存储器(DataOutput)"></a>数据存储器(DataOutput)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataOutput</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.datas=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">store_data</span><span class="params">(self,data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> data <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.datas.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">output_html</span><span class="params">(self)</span>:</span></span><br><span class="line">        fout=codecs.open(<span class="string">'baike.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;html&gt;"</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;head&gt;&lt;meta charset='utf-8'/&gt;&lt;/head&gt;"</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;body&gt;"</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;table border='8'&gt;"</span>)</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> self.datas:</span><br><span class="line">            fout.write(<span class="string">"&lt;tr&gt;"</span>)</span><br><span class="line">            fout.write(<span class="string">"&lt;td&gt;&lt;a href=%s&gt;%s&lt;/a&gt;&lt;/td&gt;"</span>%(data[<span class="string">'url'</span>],data[<span class="string">'url'</span>]))</span><br><span class="line">            fout.write(<span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span>%data[<span class="string">'title'</span>])</span><br><span class="line">            fout.write(<span class="string">"&lt;td&gt;%s&lt;/td&gt;"</span>%data[<span class="string">'summary'</span>])</span><br><span class="line">            fout.write(<span class="string">"&lt;/tr&gt;"</span>)</span><br><span class="line"></span><br><span class="line">        fout.write(<span class="string">"&lt;/table&gt;"</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;/body&gt;"</span>)</span><br><span class="line">        fout.write(<span class="string">"&lt;/html&gt;"</span>)</span><br><span class="line">        fout.close()</span><br></pre></td></tr></table></figure><h3 id="爬虫调度器"><a href="#爬虫调度器" class="headerlink" title="爬虫调度器"></a>爬虫调度器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> URLManager <span class="keyword">import</span> UrlManager</span><br><span class="line"><span class="keyword">from</span> HtmlDownloader <span class="keyword">import</span> HtmlDownloader</span><br><span class="line"><span class="keyword">from</span> HtmlParser <span class="keyword">import</span> HtmlParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> DataOutput <span class="keyword">import</span> DataOutput</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderMan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.manager = UrlManager()</span><br><span class="line">        self.downloader = HtmlDownloader()</span><br><span class="line">        self.parser = HtmlParser()</span><br><span class="line">        self.output = DataOutput()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">crawl</span><span class="params">(self,root_url)</span>:</span></span><br><span class="line">        <span class="comment">#添加入口URL</span></span><br><span class="line">        self.manager.add_new_url(root_url)</span><br><span class="line">        <span class="comment">#判断url管理器中是否有新的url，同时判断抓取了多少个url</span></span><br><span class="line">        <span class="keyword">while</span>(self.manager.has_new_url() <span class="keyword">and</span> self.manager.old_url_size()&lt;<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment">#从URL管理器获取新的url</span></span><br><span class="line">                new_url = self.manager.get_new_url()</span><br><span class="line">                <span class="comment">#HTML下载器下载网页</span></span><br><span class="line">                html = self.downloader.download(new_url)</span><br><span class="line">                <span class="comment">#HTML解析器抽取网页数据</span></span><br><span class="line">                new_urls,data = self.parser.parser(new_url,html)</span><br><span class="line">                <span class="comment">#将抽取到url添加到URL管理器中</span></span><br><span class="line">                self.manager.add_new_urls(new_urls)</span><br><span class="line">                <span class="comment">#数据存储器储存文件</span></span><br><span class="line">                self.output.store_data(data)</span><br><span class="line">                print(<span class="string">"已经抓取%s个链接"</span>%self.manager.old_url_size())</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">"crawl failed"</span> + str(e))</span><br><span class="line">            <span class="comment">#数据存储器将文件输出成指定格式</span></span><br><span class="line">        self.output.output_html()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    spider_man = SpiderMan()</span><br><span class="line">    spider_man.crawl(<span class="string">"http://baike.baidu.com/view/284853.htm"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> 基础爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫-数据存储(二)</title>
      <link href="/2018/06/07/spider-csv/"/>
      <url>/2018/06/07/spider-csv/</url>
      
        <content type="html"><![CDATA[<p><strong>csv 逗号分隔值, 有时也称为字符分隔值, 因为分隔字符可以不是逗号</strong><br><strong>文件以 纯文本 形式存储表格数据(数字和文本), 纯文本不含必须像二进制数字那样被解读的数据</strong><br><a id="more"></a></p><h1 id="csv文件实例"><a href="#csv文件实例" class="headerlink" title="csv文件实例"></a>csv文件实例</h1> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ID,UserName,PassWord</span><br><span class="line">1,bc,123</span><br><span class="line"> 2,dis,456</span><br><span class="line">3,ad,789</span><br></pre></td></tr></table></figure><h1 id="储存为csv文件的实例"><a href="#储存为csv文件的实例" class="headerlink" title="储存为csv文件的实例"></a>储存为csv文件的实例</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import csv</span><br><span class="line">headers = [&quot;ID&quot;,&quot;UserName&quot;,&quot;PassWord&quot;]</span><br><span class="line">rows = [</span><br><span class="line">    (&quot;1&quot;,&quot;bc&quot;,&quot;123&quot;),</span><br><span class="line">    (&quot;2&quot;,&quot;dis&quot;,&quot;456&quot;),</span><br><span class="line">    (&quot;3&quot;,&quot;ad&quot;,&quot;789&quot;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">with open(&apos;csv_test.csv&apos;, &apos;w&apos;, newline=&apos;&apos;) as f:  # 如果没有newline参数会有空行出现  参考资料 https://blog.csdn.net/chuan_yu_chuan/article/details/53671587</span><br><span class="line">    f_csv = csv.writer(f)  # 构造一个csv.writer类的实例</span><br><span class="line">    f_csv.writerow(headers)</span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure><h1 id="rows列表中的数据元组也可以是字典"><a href="#rows列表中的数据元组也可以是字典" class="headerlink" title="rows列表中的数据元组也可以是字典"></a>rows列表中的数据元组也可以是字典</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rows = [</span><br><span class="line">    (&#123;&quot;ID&quot;:&quot;1&quot;, &quot;UserName&quot;:&quot;bc&quot;, &quot;PassWord&quot;:&quot;123&quot;&#125;),</span><br><span class="line">    (&#123;&quot;ID&quot;:&quot;2&quot;, &quot;UserName&quot;:&quot;dis&quot;, &quot;PassWord&quot;:&quot;456&quot;&#125;),</span><br><span class="line">    (&#123;&quot;ID&quot;:&quot;3&quot;, &quot;UserName&quot;:&quot;ad&quot;, &quot;PassWord&quot;:&quot;789&quot;&#125;)</span><br><span class="line">]</span><br><span class="line">with open(&apos;csv_dict.csv&apos;, &apos;w&apos;) as f:</span><br><span class="line">    f_csv = csv.DictWriter(f, headers)</span><br><span class="line">    f_csv.writeheader()</span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure><h1 id="读取csv文件需要创建reader对象"><a href="#读取csv文件需要创建reader对象" class="headerlink" title="读取csv文件需要创建reader对象"></a>读取csv文件需要创建reader对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">with open(&apos;csv_test.csv&apos;) as f:</span><br><span class="line">    f_csv = csv.reader(f)</span><br><span class="line">    headers = next(f_csv)</span><br><span class="line">    print(headers)</span><br><span class="line">    for row in f_csv:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫-数据存储(一)</title>
      <link href="/2018/06/06/spider-json/"/>
      <url>/2018/06/06/spider-json/</url>
      
        <content type="html"><![CDATA[<p><em>JSON的格式是 <code>键:值</code>  类似于python中的字典</em><br><em>JSON数组:   JSON数组在方括号中书写,可包含多个对象 如<code>[{&#39;name&#39;:&#39;blackstone&#39;, &#39;age&#39;, 21},{&#39;name&#39;:&#39;marry&#39;, &#39;age&#39;, 19}]</code></em><br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.168 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">'http://www.seputu.com/'</span></span><br><span class="line">r = requests.get(url, headers)</span><br><span class="line">soup = BeautifulSoup(r.text, <span class="string">'html.parser'</span>)</span><br><span class="line">content = []</span><br><span class="line"><span class="keyword">for</span> mulu <span class="keyword">in</span> soup.find_all(class_=<span class="string">'mulu'</span>):</span><br><span class="line">    h2 = mulu.find(<span class="string">'h2'</span>)</span><br><span class="line">    <span class="keyword">if</span> h2 != <span class="keyword">None</span>:</span><br><span class="line">        h2_title = h2.string  <span class="comment"># find返回的是tag类型  有.string方法</span></span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> mulu.find(class_=<span class="string">'box'</span>).find_all(<span class="string">'a'</span>): <span class="comment"># find方法返回匹配的第一个tag   find_all方法返回匹配的tag的列表</span></span><br><span class="line">            href = a.get(<span class="string">'href'</span>)   <span class="comment"># tag.get('attr')</span></span><br><span class="line">            box_title = a.get(<span class="string">'title'</span>)</span><br><span class="line">            list.append(&#123;<span class="string">'href'</span>:href, <span class="string">'box_title'</span>:box_title&#125;)</span><br><span class="line">        content.append(&#123;<span class="string">'title'</span>:h2_title, <span class="string">'content'</span>:list&#125;)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'T1.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="comment"># dump的作用: 1.将Python对象转换成JSON对象,2.将JSON对象通过fp文件流写入文件</span></span><br><span class="line">    json.dump(content, fp=fp, indent=<span class="number">4</span>)  <span class="comment"># indent是缩进   设置缩进为几个空格</span></span><br></pre></td></tr></table></figure><h2 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h2><h3 id="dumps与dump"><a href="#dumps与dump" class="headerlink" title="dumps与dump"></a>dumps与dump</h3><p><strong>dumps是生成了一个字符串, 并没有写入文件<br>dump把python对象转换成JSON对象, 并且写入文件</strong></p><h3 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h3><p><code>json.load(json_str)</code>或者<code>json.loads(str)</code>  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>dumps和loads方法都在内存中转换，dump和load的方法会多一个步骤，dump是把序列化后的字符串写到一个文件中load是从一个文件中读取文件</p>]]></content>
      
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
