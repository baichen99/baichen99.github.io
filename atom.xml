<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AzureManor</title>
  
  <subtitle>黑石的家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blacston.com/"/>
  <updated>2021-01-16T03:05:41.661Z</updated>
  <id>http://blacston.com/</id>
  
  <author>
    <name>baichen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://blacston.com/2021/01/15/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2-%E7%9F%A9%E9%98%B5/"/>
    <id>http://blacston.com/2021/01/15/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2-%E7%9F%A9%E9%98%B5/</id>
    <published>2021-01-15T04:07:32.027Z</published>
    <updated>2021-01-16T03:05:41.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p>$(x, y)  -&gt;  (u, y)$</p><p>$u = a_1x+b_1y+c_1$</p><p>$v = a_2x+b_2+c_2$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>a_1 &amp; b_1\<br>a_2 &amp; b_2\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>c_1\<br>c_2\<br>\end{pmatrix}<br>$$</p><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>绕原点旋转。</p><p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>cos\theta &amp; -sin\theta\<br>-sin\theta &amp; cos\theta\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="刚体变换"><a href="#刚体变换" class="headerlink" title="刚体变换"></a>刚体变换</h2><p>旋转+平移也称刚体变换（Rigid Transform），就是说如果图像变换前后<strong>两点间的距离</strong>仍然保持不变，那么这种变化就称为刚体变换。<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>cos\theta &amp; -sin\theta\<br>sin\theta &amp; cos\theta\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>t_X\<br>t_y\<br>\end{pmatrix}<br>$$</p><h2 id="翻转"><a href="#翻转" class="headerlink" title="翻转"></a>翻转</h2><h3 id="垂直翻转"><a href="#垂直翻转" class="headerlink" title="垂直翻转"></a>垂直翻转</h3><p>$u=x; v=-y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>1 &amp; 0\<br>0 &amp; -1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h3 id="水平翻转"><a href="#水平翻转" class="headerlink" title="水平翻转"></a>水平翻转</h3><p>$u=-x; v=y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>-1 &amp; 0\<br>0 &amp; 1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h3 id="垂直水平翻转"><a href="#垂直水平翻转" class="headerlink" title="垂直水平翻转"></a>垂直水平翻转</h3><p>$u=-x; v=-y$</p><p>矩阵形式<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>-1 &amp; 0\<br>0 &amp; -1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p>$u = s_xx; v = s_yy$</p><p>矩阵形式</p><p>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>s_x &amp; 0\<br>0 &amp; s_y\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>0\<br>0\<br>\end{pmatrix}<br>$$</p><h2 id="相似变换"><a href="#相似变换" class="headerlink" title="相似变换"></a>相似变换</h2><p>相似变换又称缩放旋转，相似变换包含了旋转、等比例缩放和平移等变换。<br>若缩放比例为scale，旋转角度为θ，旋转中心是$ (center_x,center_y) $，则仿射变换可以表示为：<br>$$<br>\begin{pmatrix}<br>u\<br>v\<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>\alpha &amp; \beta\<br>-\beta &amp; \alpha\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>(1-\alpha)center_x &amp; -\beta center_y\<br>\beta center_x &amp; (1-\alpha)center_y\<br>\end{pmatrix}<br>$$</p><h2 id="透视变换"><a href="#透视变换" class="headerlink" title="透视变换"></a>透视变换</h2><p><a href="https://baike.baidu.com/item/透视变换" target="_blank" rel="noopener">透视变换</a>（Perspective Transformation）是将二维的图片投影到一个三维视平面上，然后再转换到二维坐标下，所以也称为投影映射（Projective Mapping）。简单来说就是二维→三维→二维的一个过程。</p><p>$X=a_1x+b_1y+c_1 $</p><p>$Y=a_2x+b_2y+c_2$</p><p>$Z=a_3x+b_3y+c_3$<br>$$<br>\begin{pmatrix}<br>X\<br>Y\<br>Z<br>\end{pmatrix}<br>=<br>\begin{pmatrix}<br>a_1 &amp; b_1 &amp; c_1\<br>a_1 &amp; b_1 &amp; c_1\<br>a_1 &amp; b_1 &amp; c_1\<br>\end{pmatrix}<br>\begin{pmatrix}<br>x\<br>y\<br>1<br>\end{pmatrix}<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;平移&quot;&gt;&lt;a href=&quot;#平移&quot; class=&quot;headerlink&quot; title=&quot;平移&quot;&gt;&lt;/a&gt;平移&lt;/h2&gt;&lt;p&gt;$(x, y)  -&amp;gt;  (u, y)$&lt;/p&gt;
&lt;p&gt;$u = a_1x+b_1y+c_1$&lt;/p&gt;
&lt;p&gt;$v = a_2x+b_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://blacston.com/2021/01/14/opencv%E7%AC%94%E8%AE%B0/"/>
    <id>http://blacston.com/2021/01/14/opencv%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-14T15:51:53.566Z</published>
    <updated>2021-01-15T04:07:13.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="opencv-笔记"><a href="#opencv-笔记" class="headerlink" title="opencv 笔记"></a>opencv 笔记</h1><p><a href="http://codec.wang/" target="_blank" rel="noopener">opencv教程</a></p><p><a href="https://www.runoob.com/numpy/numpy-ndarray-object.html" target="_blank" rel="noopener">numpy教程</a></p><ul><li><p><a href="https://blog.csdn.net/weixin_44049693/article/details/106271643" target="_blank" rel="noopener">cv2.waitKey用法</a></p></li><li><p><a href="https://blog.csdn.net/xbinworld/article/details/65660665" target="_blank" rel="noopener">线性插值，双线性插值</a></p></li><li><p><a href="http://codec.wang/#/opencv/start/extra-02-high-quality-save-and-matplotlib" target="_blank" rel="noopener">使用matplotlib.pyplot显示彩色图</a>  <code>img = img[:, :, ::-1]</code></p></li><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;opencv-笔记&quot;&gt;&lt;a href=&quot;#opencv-笔记&quot; class=&quot;headerlink&quot; title=&quot;opencv 笔记&quot;&gt;&lt;/a&gt;opencv 笔记&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codec.wang/&quot; target=&quot;_blan
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python 深浅拷贝 值传递 引用传递</title>
    <link href="http://blacston.com/2021/01/14/python-copy/"/>
    <id>http://blacston.com/2021/01/14/python-copy/</id>
    <published>2021-01-14T11:09:25.000Z</published>
    <updated>2021-01-14T13:37:41.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="可变对象-不可变对象"><a href="#可变对象-不可变对象" class="headerlink" title="可变对象 不可变对象"></a>可变对象 不可变对象</h2><p>参考内容:</p><p> <a href="https://zhuanlan.zhihu.com/p/34395671" target="_blank" rel="noopener">python可变对象与不可变对象</a></p><p><a href="http://winterttr.me/2015/10/24/python-passing-arguments-as-value-or-reference/" target="_blank" rel="noopener">Python的函数参数传递：传值？引用？</a></p><p>可变对象：list dict set<br>不可变对象：tuple string int float bool</p><p>可变对象修改后地址不会改变，不可变对象修改后地址会改变。因为修改不可变对象时，原来的对象被丢弃，变量指向新的对象。修改可变对象时，比如修改列表中的第一个元素，是有一个新的对象被指定给列表对象的第一个元素，但是列表本身没有变化，只是内容发生了变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nfoo = <span class="number">1</span></span><br><span class="line">nfoo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">lstFoo = [<span class="number">1</span>]</span><br><span class="line">lstFoo[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>代码第2行中，内存中原始的1对象因为不能改变，于是被“抛弃”，另nfoo指向一个新的int对象，其值为2</p><p>代码第5行中，更改list中第一个元素的值，因为list是可改变的，所以，第一个元素变更为2。其实应该说，lstFoo指向一个<code>包含一个对象的数组</code>。赋值所发生的事情，是有一个新int对象被指定给lstFoo所指向的数组对象的第一个元素，但是对于lstFoo本身来说，所指向的数组对象并没有变化，只是数组对象的内容发生变化了。这个看似void*的变量所指向的对象仍旧是刚刚的那个有一个int对象的list。</p><p><img src="https://i.loli.net/2021/01/14/RkraAjZYH2gJtKq.jpg" alt=""></p><p>所以函数传参的时候不要传可变对象，否则可能会影响传入对象的值。</p><p>深浅拷贝的例子都可以在<a href="http://pythontutor.com/" target="_blank" rel="noopener">这个网站</a>上可视化编程，非常直观。</p><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>赋值是将一个对象的地址赋值给一个变量，让变量指向该地址。<br>修改不可变对象（int, str、tuple）需要开辟新的空间<br>修改可变对象（list等）不需要开辟新的空间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = a</span><br><span class="line">b[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>a和b两个变量指向的内存空间完全相同，此时对a修改会影响b的值。<br><img src="https://i.loli.net/2021/01/14/qQBzXxC2iUbEsYo.png" alt=""></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>浅拷贝是在另一块地址中创建一个新的变量或容器，但是容器内的元素的地址均是源对象的元素的地址的拷贝。也就是说新的容器中指向了旧的元素（ 新瓶装旧酒 ）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = a.copy()</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2021/01/14/EqosgdjKfwL6Tva.png" alt=""></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>深拷贝完全拷贝了一个副本，容器内部元素地址都不一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">1</span>, <span class="number">2</span>]]</span><br><span class="line">b = copy.deepcopy(a)</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sdcv8K" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2021/01/14/sdcv8K.png" alt="sdcv8K.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;可变对象-不可变对象&quot;&gt;&lt;a href=&quot;#可变对象-不可变对象&quot; class=&quot;headerlink&quot; title=&quot;可变对象 不可变对象&quot;&gt;&lt;/a&gt;可变对象 不可变对象&lt;/h2&gt;&lt;p&gt;参考内容:&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;https://zhuanla
      
    
    </summary>
    
    
      <category term="python" scheme="http://blacston.com/categories/python/"/>
    
    
      <category term="python" scheme="http://blacston.com/tags/python/"/>
    
      <category term="深拷贝" scheme="http://blacston.com/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="浅拷贝" scheme="http://blacston.com/tags/%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    
  </entry>
  
  <entry>
    <title>CSRF跨站请求伪造</title>
    <link href="http://blacston.com/2021/01/10/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/"/>
    <id>http://blacston.com/2021/01/10/CSRF%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0/</id>
    <published>2021-01-10T05:14:48.000Z</published>
    <updated>2021-01-10T08:05:09.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSRF跨站请求伪造"><a href="#CSRF跨站请求伪造" class="headerlink" title="CSRF跨站请求伪造"></a>CSRF跨站请求伪造</h1><p>CSRF(Cross Site Request Forgery)是一种攻击者盗用用户身份，在当前<strong>已登录</strong>的Web上执行非本意操作的攻击方法。攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><a href="https://zhuanlan.zhihu.com/p/46592479" target="_blank" rel="noopener">如何防止CSRF攻击？</a></p><p>一个典型的CSRF攻击有着如下的流程：</p><ul><li>受害者登录<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>，并保留了登录凭证（Cookie）。</li><li>攻击者引诱受害者访问了<a href="https://link.zhihu.com/?target=http%3A//b.com" target="_blank" rel="noopener">http://b.com</a>。</li><li><a href="https://link.zhihu.com/?target=http%3A//b.com" target="_blank" rel="noopener">http://b.com</a> 向 <a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a> 发送了一个请求：<a href="https://link.zhihu.com/?target=http%3A//a.com/act%3Dxx" target="_blank" rel="noopener">http://a.com/act=xx</a>。浏览器会默认携带<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>的Cookie。</li><li><a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。</li><li><a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>以受害者的名义执行了act=xx。</li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让<a href="https://link.zhihu.com/?target=http%3A//a.com" target="_blank" rel="noopener">http://a.com</a>执行了自己定义的操作。</li></ul><h2 id="CSRF的特点"><a href="#CSRF的特点" class="headerlink" title="CSRF的特点"></a><strong>CSRF的特点</strong></h2><ul><li>攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。</li><li>攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；而不是直接窃取数据。</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。</li><li>跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。</li></ul><p>CSRF通常是跨域的，因为外域通常更容易被攻击者掌控。但是如果本域下有容易被利用的功能，比如可以发图和链接的论坛和评论区，攻击可以直接在本域下进行，而且这种攻击更加危险。</p><h2 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h2><ul><li><p>阻止不明外域的访问</p></li><li><ul><li>同源检测</li><li>Samesite Cookie</li></ul></li><li><p>提交时要求附加本域才能获取的信息</p></li><li><ul><li>CSRF Token</li><li>双重Cookie验证</li></ul></li></ul><h3 id="同源检测"><a href="#同源检测" class="headerlink" title="同源检测"></a>同源检测</h3><h4 id="验证-HTTP-Referer-字段"><a href="#验证-HTTP-Referer-字段" class="headerlink" title="验证 HTTP Referer 字段"></a>验证 HTTP Referer 字段</h4><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 Referer，它记录了该 HTTP 请求的来源地址。<br>如果黑客要对银行网站实施 CSRF 攻击，他只能在他自己的网站构造请求，当用户通过黑客的网站发送请求到银行时，该请求的 Referer 是指向黑客自己的网站。因此，要防御 CSRF 攻击，银行网站只需要对于每一个转账请求验证其 Referer 值，如果是以 bank.example 开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果 Referer 是其他网站的话，则有可能是黑客的 CSRF 攻击，拒绝该请求。</p><p>问题在于这种方法把安全性都依赖于浏览器来保障，从理论上来讲，这样并不安全。</p><h3 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h3><p>前面讲到CSRF的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用Cookie中的信息。</p><p>而CSRF攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个CSRF攻击者无法获取到的Token。服务器通过校验请求是否携带正确的Token，来把正常的请求和攻击的请求区分开，也可以防范CSRF的攻击。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>CSRF Token的防护策略分为三个步骤：</p><ol><li>将CSRF Token输出到页面中</li></ol><p>首先，用户打开页面的时候，服务器需要给这个用户生成一个Token，该Token通过加密算法对数据进行加密，一般Token都包括随机字符串和时间戳的组合，显然在提交时Token<strong>不能再放在Cookie中</strong>了，否则又会被攻击者冒用。因此，为了安全起见Token最好还是<strong>存在服务器的Session</strong>中，之后在每次页面加载时，使用JS遍历整个DOM树，对于DOM中所有的a和form标签后加入Token。这样可以解决大部分的请求，但是对于在页面加载之后<strong>动态生成</strong>的HTML代码，这种方法就没有作用，还需要程序员在编码时手动添加Token。</p><ol start="2"><li>页面提交的请求携带这个Token</li></ol><p>对于GET请求，Token将附在请求地址之后，这样URL 就变成 <a href="http://url?csrftoken=tokenvalue。" target="_blank" rel="noopener">http://url?csrftoken=tokenvalue。</a> 而对于 POST 请求来说，要在 form 的最后加上：<br><code>&lt;input type=”hidden” name=”csrftoken” value=”tokenvalue”/&gt;</code><br>这样，就把Token以参数的形式加入请求了。</p><ol start="3"><li>服务器验证Token是否正确</li></ol><p>当用户从客户端得到了Token，再次提交给服务器的时候，服务器需要判断Token的有效性，验证过程是先解密Token，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个Token就是有效的。</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener"><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener">如何通过JWT防御CSRF</a></a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin" target="_blank" rel="noopener">Origin</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer" target="_blank" rel="noopener">Referer</a><br><a href="https://developer.ibm.com/zh/articles/1102-niugang-csrf/" target="_blank" rel="noopener">CSRF 攻击的应对之道</a><br><a href="https://segmentfault.com/a/1190000003716037" target="_blank" rel="noopener">CSRF JWT</a><br><a href="https://stackoverflow.com/questions/37959945/how-to-destroy-jwt-tokens-on-logout" target="_blank" rel="noopener">如何在logout时销毁JWT–在client端删除</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSRF跨站请求伪造&quot;&gt;&lt;a href=&quot;#CSRF跨站请求伪造&quot; class=&quot;headerlink&quot; title=&quot;CSRF跨站请求伪造&quot;&gt;&lt;/a&gt;CSRF跨站请求伪造&lt;/h1&gt;&lt;p&gt;CSRF(Cross Site Request Forgery)是一种攻击者
      
    
    </summary>
    
    
      <category term="web" scheme="http://blacston.com/categories/web/"/>
    
    
      <category term="web" scheme="http://blacston.com/tags/web/"/>
    
      <category term="CSRF" scheme="http://blacston.com/tags/CSRF/"/>
    
  </entry>
  
  <entry>
    <title>XSS跨站脚本攻击</title>
    <link href="http://blacston.com/2021/01/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/"/>
    <id>http://blacston.com/2021/01/10/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB/</id>
    <published>2021-01-10T03:56:48.000Z</published>
    <updated>2021-01-10T05:12:36.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>跨站脚本攻击(Cross Site Sript)是指攻击者利用网站对<strong>用户输入过滤不足</strong>，输入内容可以<strong>显示在页面上</strong>对其他人造成影响的HTML代码，利用用户身份进行某种动作，从而完成盗取用户资料、进行病毒侵害的一种攻击方式。为了和层叠样式表(Cascading Style Sheets)的缩写区分，跨站脚本攻击通常简写为XSS。</p><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>原理：简单的将用户输入的数据直接或未经过完善的<strong>安全过滤</strong>就在浏览器中进行输出，导致输出的数据中存在可被浏览器执行的代码数据，由于此种类型的跨站代码存在于URL中，所以黑客通常需要诱骗或加密变形等方式将存在恶意代码的链接发给用户，<strong>只有用户点击以后才能使得攻击成功实施</strong>。</p><p>假如有个程序是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="meta">@route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"hello"</span> + name</span><br></pre></td></tr></table></figure><p>那么当访问’/?name=’Bob’时，网页会显示hello bob。但这个程序对用户输入内容没有过滤和转义，也就是说我们可以将一些js代码写在参数中，这样服务器返回的响应中就会包含着写代码。比如当把name的值改为js代码，也就是访问<code>/?name=&lt;script&gt;alert(1)&lt;/script&gt;</code>的时候，页面执行了<code>alert(1)</code>，然后会出现一个弹窗。所以黑客会把这段url藏到超链接中，然后诱导用户去点击链接，就能完成XSS攻击。</p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>原理：存储型XSS脚本攻击是指由于Web应用程序对用户输入数据的处理不严格，导致Web应用程序将黑客输入的恶意跨站攻击数据信息保存在服务端的数据库或其他文件中，当王爷进行数据查询展示时，会从数据库中获取数据内容，并将数据内容在网页中进行输出展示，进而导致XSS代码执行。</p><p>常见场景：留言板、博客、新闻发布系统中，恶意代码的数据信息直接写入文章、评论中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 伪代码</span></span><br><span class="line"><span class="meta">@route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="comment"># 返回所有消息</span></span><br><span class="line">message_list = Message.objects.all()</span><br><span class="line">  <span class="keyword">return</span> <span class="number">200</span>, &#123;message_list: message_list&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@route('/', method=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">message = request.form.get(<span class="string">'msg'</span>)</span><br><span class="line">  <span class="comment"># 数据库中新增一条记录</span></span><br><span class="line">  m = Message(text=message)</span><br><span class="line">  m.save()</span><br><span class="line">  <span class="comment"># 201 表示创建成功</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">201</span></span><br></pre></td></tr></table></figure><h2 id="反射型和存储型对比"><a href="#反射型和存储型对比" class="headerlink" title="反射型和存储型对比"></a>反射型和存储型对比</h2><p>反射型和存储型是根据表现形式来区分的，其实他们的本质都是一样的：网页可以直接显示用户输入的内容。区别在于：存储型xss指的是用户输入内容可以保存在服务器中，可以影响到其他用户的。</p><h2 id="预防方法"><a href="#预防方法" class="headerlink" title="预防方法"></a>预防方法</h2><ul><li>对输入、输出信息进行过滤和转义<ul><li>表单验证，对符合格式的输入允许通过检查。比如邮件地址必须是<a href="mailto:xx@xx.xx" target="_blank" rel="noopener">xx@xx.xx</a>格式，age必须是int类型。</li><li>对特殊字符进行过滤：比如HTML中的<code>&quot; &#39; &lt; &gt; % &amp;</code></li></ul></li><li>使用<a href="https://blog.csdn.net/qq_38553333/article/details/80055521" target="_blank" rel="noopener">HttpOnly</a>, 将重要的cookie标记为httponly，这样的话当浏览器向Web服务器发起请求的时就会带上<code>cookie</code>字段，<strong>但是在<code>js</code>脚本中却不能访问这个cookie</strong>，这样就避免了XSS攻击利用<code>JavaScript</code>的<code>document.cookie</code>获取<code>cookie</code>。</li></ul><h2 id="参考内容："><a href="#参考内容：" class="headerlink" title="参考内容："></a>参考内容：</h2><p><a href="https://www.bilibili.com/video/BV1WK411V7Sz" target="_blank" rel="noopener">视频演示-XSS跨站脚本漏洞原理</a></p><p><a href="https://zhuanlan.zhihu.com/p/37295186" target="_blank" rel="noopener">对于跨站脚本攻击（XSS攻击）的理解和总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;headerlink&quot; title=&quot;XSS&quot;&gt;&lt;/a&gt;XSS&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="web" scheme="http://blacston.com/categories/web/"/>
    
    
      <category term="web" scheme="http://blacston.com/tags/web/"/>
    
      <category term="xss" scheme="http://blacston.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python 命令行参数</title>
    <link href="http://blacston.com/2020/12/17/pyton-commandline-arguments/"/>
    <id>http://blacston.com/2020/12/17/pyton-commandline-arguments/</id>
    <published>2020-12-17T14:44:40.000Z</published>
    <updated>2021-01-07T07:21:51.014Z</updated>
    
    <content type="html"><![CDATA[<p>本分翻译自 <a href="https://realpython.com/python-command-line-arguments" target="_blank" rel="noopener">https://realpython.com/python-command-line-arguments</a></p><p>python处理命令行参数的功能为一些<strong>基于文本命令行</strong>的程序提供了一个用户友好的界面。这类似于图形用户界面（一个由图形元素或部件操作的可视化应用程序）。</p><p>python提供了可以获取、提取命令行参数的机制。这些参数可以用来更改程序的行为。举个例子，假如你的程序要处理一个文件中的数据，那么你可以把文件路径传给程序，而不是在源代码中写死。</p><p><strong>通过此教程，你将会了解：</strong></p><ul><li>python命令行参数的起源</li><li>python命令行参数的底层支持</li><li>设计命令行界面的指导标准</li><li>手动定制以及处理命令行参数的简单方法</li><li>使用python中的库简化复杂命令行界面的开发</li></ul><p>如果你想在不使用专用库的情况下开发一个用户友好的命令行界面，或者是想更好的理解现有的python命令行参数库的一些共识，那么请继续阅读！</p><h2 id="命令行界面-The-Command-Line-Interface"><a href="#命令行界面-The-Command-Line-Interface" class="headerlink" title="命令行界面 The Command Line Interface"></a>命令行界面 The Command Line Interface</h2><p><strong>命令行界面(CLI)</strong> 为用户提供了一种方式，使用户可以和运行在<strong>基于文本的shell解释器</strong>中的程序进行交互。</p><p>shell解释器有Linux上的bash，windows上的命令提示行等。命令行界面由能显示命令提示符的shell解释器支持。它一般有以下几个要素：</p><ul><li>一个命令或一段程序</li><li>0或多个命令行参数</li><li>一个输出，代表命令结果</li><li>使用或帮助的参考文档</li></ul><p>不是每个命令行界面都提供以上要素，这些也不是命令行界面的全部特点。命令行的复杂性表现在从传递单个参数到多个参数和选项，很像领域专用语言(Domain Specific Language)。举个例子，一些程序可能会从命令行启动web版的文档，或者像python那样打开一个交互解释器。</p><p>下面两个python命令的例子展示出了命令行界面的样子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -c "print(Real Python)"</span><br><span class="line">Real Python</span><br></pre></td></tr></table></figure><p>在这个例子里，python解释器接收<code>-c</code>参数，它表示将在选项<code>-c</code>之后的参数作为Python程序执行。</p><p>下面这个例子展示了使用<code>-h</code>调用python来显示<code>help</code>信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -h</span><br><span class="line">usage: python3 [option] ... [-c cmd | -m mod | file | -] [arg] ...</span><br><span class="line">Options and arguments (and corresponding environment variables):</span><br><span class="line">-b     : issue warnings about str(bytes_instance), str(bytearray_instance)</span><br><span class="line">         and comparing bytes/bytearray with str. (-bb: issue errors)</span><br><span class="line">[ ... complete help text not shown ... ]</span><br></pre></td></tr></table></figure><h2 id="C语言历史遗留"><a href="#C语言历史遗留" class="headerlink" title="C语言历史遗留"></a>C语言历史遗留</h2><p>Python命令行参数是从c语言继承而来的。在<a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" target="_blank" rel="noopener">Guido Van Rossum</a> 于1993年写的<a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.47.4180" target="_blank" rel="noopener">写给Unix/C程序员的Python介绍</a>中提到了，C对Python是有很大的影响的。Guido提及了字面量的定义，标识符，操作符以及像<code>break</code>, <code>continue</code>,<code>return</code>之类的语句。Python命令行参数也很大程度上受到了C语言的影响。</p><p>为了说明两个语言之间的相似性，情况下面的C语言程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Arguments count: %d\n"</span>, argc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Argument %6d: %s\n"</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四行定义了<code>main()</code>, c程序的入口函数。下面的参数要记好笔记：</p><ol><li><p><strong>argc</strong> 是代表参数个数的一个整数</p></li><li><p><strong>argv</strong> 是是一个字符指针的数组，包含程序名(第一个参数)，后面是其他参数(如果有的话)</p></li></ol><p>你可以在linux环境下使用<code>gcc -o main main.c</code>上面的代码，然后用<code>./main</code>执行得到下面的结果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> gcc -o main main.c</span><br><span class="line"><span class="meta">$</span> ./main</span><br><span class="line">Arguments count: 1</span><br><span class="line">Argument      0: ./main</span><br></pre></td></tr></table></figure><p>如果没有用<code>-o</code>选项指明，gcc编译器将默认使用<code>a.out</code>作为输出可执行文件名。它代表<strong>汇编输出(assembler output)</strong>, 让人想起在旧的UNIX系统上生成的可执行文件。而且观察到，可执行文件的名称./main是唯一的参数。<br>让我们使用同一个程序，并传递几个Python命令行参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./main Python Command Line Arguments</span><br><span class="line">Arguments count: 5</span><br><span class="line">Argument      0: ./main</span><br><span class="line">Argument      1: Python</span><br><span class="line">Argument      2: Command</span><br><span class="line">Argument      3: Line</span><br><span class="line">Argument      4: Arguments</span><br></pre></td></tr></table></figure><p>输出结果显示参数的个数是5，参数列表包括程序名main，后面是在命令行传递的“Python Command Line Arguments”的每个单词。</p><blockquote><p><strong>注意</strong>: <code>argc</code> 代表 <strong>argument count</strong>, 而 <code>argv</code> 代表 <strong>argument vector</strong>. 想知道更多内容, 可以查看 <a href="https://en.wikibooks.org/wiki/A_Little_C_Primer/C_Command_Line_Arguments" target="_blank" rel="noopener">A Little C Primer/C Command Line Arguments</a>.</p></blockquote><p>上述编译<code>main.c</code>文件假定你是用的是Linux或Mac OS系统。在Windows上你也可以用以下几个方法来编译C程序。</p><ul><li><a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noopener"><strong>Windows Subsystem for Linux (WSL):</strong></a> It’s available in a few Linux distributions, like <a href="https://ubuntu.com/" target="_blank" rel="noopener">Ubuntu</a>, <a href="https://www.opensuse.org/" target="_blank" rel="noopener">OpenSUSE</a>, and <a href="https://www.debian.org/" target="_blank" rel="noopener">Debian</a>, among others. You can install it from the Microsoft Store.</li><li><a href="https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2019" target="_blank" rel="noopener"><strong>Windows Build Tools:</strong></a> This includes the Windows command line build tools, the Microsoft C/C++ compiler <a href="https://docs.microsoft.com/en-us/cpp/build/walkthrough-compiling-a-cpp-cli-program-on-the-command-line?view=vs-2019" target="_blank" rel="noopener"><code>cl.exe</code></a>, and a compiler front end named <a href="https://en.wikipedia.org/wiki/Clang" target="_blank" rel="noopener"><code>clang.exe</code></a> for C/C++.</li><li><a href="https://visualstudio.microsoft.com/downloads/" target="_blank" rel="noopener"><strong>Microsoft Visual Studio:</strong></a> This is the main Microsoft integrated development environment (IDE). To learn more about IDEs that can be used for both Python and C on various operating systems, including Windows, check out <a href="https://realpython.com/python-ides-code-editors-guide/" target="_blank" rel="noopener">Python IDEs and Code Editors (Guide)</a>.</li><li><a href="http://mingw-w64.org/" target="_blank" rel="noopener"><strong>mingw-64 project:</strong></a> This supports the <a href="https://gcc.gnu.org/" target="_blank" rel="noopener">GCC compiler</a> on Windows.</li></ul><p>如果你已经安装了Microsoft Visual Studio或者Windows Build Tools，那么你可以用下面的方法编译main.c:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:/&gt;cl main.c</span><br></pre></td></tr></table></figure><p> 你将会获得一个名为<code>main.exe</code>的可执行文件，可以用下面命令执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:/&gt;main</span><br><span class="line">Arguments count: 1</span><br><span class="line">Argument      0: main</span><br></pre></td></tr></table></figure><p>你可以实现一个Python程序，main.py，这和上面的C程序main.c是一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">f"Arguments count: <span class="subst">&#123;len(sys.argv)&#125;</span>"</span>)</span><br><span class="line">    <span class="keyword">for</span> i, arg <span class="keyword">in</span> enumerate(sys.argv):</span><br><span class="line">        print(<span class="string">f"Argument <span class="subst">&#123;i:&gt;<span class="number">6</span>&#125;</span>: <span class="subst">&#123;arg&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>在代码中并没有看到像C语言中argc的变量，他在Python中并不存在，因为<code>sys.argv</code>已经够用了。你可以不用知道参数列表长度，来解析<code>sys.argv</code>的命令行参数，如果你的程序需要知道参数长度的话，也可以调用内置<code>len()</code>函数。</p><p>请注意<code>enumerate()</code>，当应用于一个可迭代对象时，他返回一个可枚举对象(enumerate object)，该对象可以同时返回sys.argv元素的索引和它对应的值。这让我们可以遍历sys.argv，而不用维护一个计数变量。</p><p>main.py运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python main.py Python Command Line Arguments</span><br><span class="line">Arguments count: 5</span><br><span class="line">Argument      0: main.py</span><br><span class="line">Argument      1: Python</span><br><span class="line">Argument      2: Command</span><br><span class="line">Argument      3: Line</span><br><span class="line">Argument      4: Arguments</span><br></pre></td></tr></table></figure><p>sys.argv包含了和C语言中argv相同的信息:</p><ul><li><strong>程序名称</strong><code>main.py</code>是参数列表第一个参数</li><li><code>Python</code>, <code>Command</code>, <code>Line</code>, and <code>Arguments</code>是剩下的参数</li><li>译者注：代码中:&gt;6是让变量i代表的字符串占据6个字符宽度并且右对齐，类似于C语言中的”%6d”</li></ul><p>通过对C语言比较难懂部分的一些简短的介绍，你现在可以去学习更多关于Python命令行参数的内容了。</p><h2 id="两个Unix实用工具"><a href="#两个Unix实用工具" class="headerlink" title="两个Unix实用工具"></a>两个Unix实用工具</h2><p>为了在本教程中使用Python命令行参数，你将实现Unix生态系统中两个实用程序的部分功能。</p><ol><li><a href="https://en.wikipedia.org/wiki/Sha1sum" target="_blank" rel="noopener">sha1sum</a></li><li><a href="https://en.wikipedia.org/wiki/Seq_(Unix" target="_blank" rel="noopener">seq</a>)</li></ol><p>在下面几个部分中，你将会熟悉这些unix工具。</p><h3 id="sha1sum"><a href="#sha1sum" class="headerlink" title="sha1sum"></a>sha1sum</h3><p>sha1sum 计算SHA-1哈希值，它通常用来验证文件的完整性。给定一个输入，哈希函数返回相同的值。任何对输入的改变都将会导致输出不同的哈希值。在使用带有具体参数的实用工具之前，你可以先打印一下help信息。</p><blockquote><p>译者注：<strong>SHA-1</strong>（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种<a href="https://baike.baidu.com/item/密码散列函数" target="_blank" rel="noopener">密码散列函数</a>。SHA-1可以生成一个被称为消息摘要的160位散列值，通常为40个十六进制数。（1个十六进制数是4位二进制数）</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum --help</span><br><span class="line">Usage: sha1sum [OPTION]... [FILE]...</span><br><span class="line">Print or check SHA1 (160-bit) checksums.</span><br><span class="line"></span><br><span class="line">With no FILE, or when FILE is -, read standard input.</span><br><span class="line"></span><br><span class="line">  -b, --binary         read in binary mode</span><br><span class="line">  -c, --check          read SHA1 sums from the FILEs and check them</span><br><span class="line">      --tag            create a BSD-style checksum</span><br><span class="line">  -t, --text           read in text mode (default)</span><br><span class="line">  -z, --zero           end each output line with NUL, not newline,</span><br><span class="line">                       and disable file name escaping</span><br><span class="line">[ ... complete help text not shown ... ]</span><br></pre></td></tr></table></figure><p>显示命令行程序的帮助信息是命令行界面提供的常用功能。</p><p>要计算一个文件内容的SHA-1 hash值，可以按如下操作进行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.c</span><br><span class="line">125a0f900ff6f164752600550879cbfabb098bc3  main.c</span><br></pre></td></tr></table></figure><p>返回的结果第一部分显示的是SHA-1哈希值，第二部分是文件名。而且此命令可以接受多个文件名作为参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.c main.py</span><br><span class="line">125a0f900ff6f164752600550879cbfabb098bc3  main.c</span><br><span class="line">d84372fc77a90336b6bb7c5e959bcb1b24c608b4  main.py</span><br></pre></td></tr></table></figure><p>由于Unix终端的通配符扩展特性，也可以提供带有通配符字符的命令行参数。这其中一个字符是asterisk，或者可以称作星号(*)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sha1sum main.*</span><br><span class="line">3f6d5274d6317d580e2ffc1bf52beee0d94bf078  main.c</span><br><span class="line">f41259ea5835446536d2e71e566075c1c1bfc111  main.py</span><br></pre></td></tr></table></figure><p>shell把main.*转换成main.c和main.py并且把他们传入sha1sum，因为当前文件夹下的这两个文件，都和main.*所匹配。该程序会计算参数列表的每个文件的SHA1值。在Windows上你会发现他的行为有所不同。Windows没有通配符扩展，所以程序可能必须得适应这一点。你可能需要在内部扩展通配符。</p><p>在没有参数的情况下，sha1sum从标准输入中读取。你可以通过在键盘上输入字符来传入数据。输入的字符流包括任何字符，包括回车键。要终止输入，必须用Enter发出文件结束的信号，然后输入Ctrl+D。</p><p>结果是为文本<code>Real\nPython\n</code>生成的SHA1哈希值。文件的名称是-。这是一个表示标准输入的惯例。当你执行以下命令时，会得到相同的哈希值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> python -c "print('Real\nPython\n', end='')" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br><span class="line"><span class="meta">$</span> python -c "print('Real\nPython')" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br><span class="line"><span class="meta">$</span> printf "Real\nPython\n" | sha1sum</span><br><span class="line">87263a73c98af453d68ee4aab61576b331f8d9d6  -</span><br></pre></td></tr></table></figure><p>接下来，你将会阅读的是对<strong>seq</strong>的简单介绍 。</p><h3 id="seq"><a href="#seq" class="headerlink" title="seq"></a>seq</h3><p><a href="https://en.wikipedia.org/wiki/Seq_%28Unix%29" target="_blank" rel="noopener">seq</a>可以生成数字<strong>序列</strong>。在最基本的形式中，比如生成1-5的序列，你可以依照如下指令执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> seq 5</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>为了seq提供的所有功能，你可以在命令行打印出帮助信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ seq --<span class="built_in">help</span></span><br><span class="line">Usage: seq [OPTION]... LAST</span><br><span class="line">  or:  seq [OPTION]... FIRST LAST</span><br><span class="line">  or:  seq [OPTION]... FIRST INCREMENT LAST</span><br><span class="line">Print numbers from FIRST to LAST, <span class="keyword">in</span> steps of INCREMENT.</span><br><span class="line"></span><br><span class="line">Mandatory arguments to long options are mandatory <span class="keyword">for</span> short options too.</span><br><span class="line">  -f, --format=FORMAT      use <span class="built_in">printf</span> style floating-point FORMAT</span><br><span class="line">  -s, --separator=STRING   use STRING to separate numbers (default: \n)</span><br><span class="line">  -w, --equal-width        equalize width by padding with leading zeroes</span><br><span class="line">      --<span class="built_in">help</span>     display this <span class="built_in">help</span> and <span class="built_in">exit</span></span><br><span class="line">      --version  output version information and <span class="built_in">exit</span></span><br><span class="line">[ ... complete <span class="built_in">help</span> text not shown ... ]</span><br></pre></td></tr></table></figure><p>在此教程中，你将会编写一些sha1sum和seq的简单变体。在每个例子中，你将会了解到Python命令行参数不同的特点和功能。</p><p>在Mac OS和Linux上，sha1sum和seq需要预先安装，尽管不同的系统或发布版本的特性和帮助信息可能会有所不同。如果你正在使用Windows 10，那么运行sha1sum和seq的最简单的方法则是在<a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">WSL</a>中安装Linux环境。如果你无法访问提供标准Unix实用程序的终端，你或许可以使用一些在线终端：</p><ul><li>在<a href="https://www.pythonanywhere.com/" target="_blank" rel="noopener">PythonAnywhere</a>上创建一个免费账户，然后启动一个Bash控制台。</li><li>在<a href="https://repl.it/languages" target="_blank" rel="noopener">repl.it</a>上创建一个临时Bash。</li></ul><p>以上只是两个例子，你也可以找到其他的替代品。</p><h2 id="sys-argv-Arrary"><a href="#sys-argv-Arrary" class="headerlink" title="sys.argv.Arrary"></a>sys.argv.Arrary</h2><p>在探索一些公认的约定和了解如何处理Python命令行参数之前，你需要知道对所有Python命令行参数的底层支持是由<a href="https://docs.python.org/library/sys.html?highlight=sys argv#sys.argv" target="_blank" rel="noopener"><code>sys.argv</code></a>所提供的。 以下各节中的示例将向你展示如何处理存储在sys.argv中的Python命令行参数以及处理当访问它时所遇到的典型的错误。在这章你将会了解：</p><ul><li>如何<strong>访问</strong>sys.argv的内容</li><li>如何<strong>消除</strong>sys.argv的全局特性所带来的副作用</li><li>如何在Pythobn命令行参数中<strong>处理</strong>空格</li><li>如何在访问Python命令行参数时<strong>处理</strong>错误 </li><li>如何<strong>接收</strong>以字节形式传递的Python命令行参数的原始格式</li></ul><p>让我们开始吧！</p><h3 id="显示参数"><a href="#显示参数" class="headerlink" title="显示参数"></a>显示参数</h3><p>sys模块提供了一个列表叫做argv，它包括：</p><ol><li>argv[0] 包含当前Python程序的名称</li><li>argv[1:]，列表剩余部分，包含所有传给这个程序的Python命令行参数</li></ol><p>下面这个例子展示了sys.argv的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">f"Name of the script      : <span class="subst">&#123;sys.argv[<span class="number">0</span>]=&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"Arguments of the script : <span class="subst">&#123;sys.argv[<span class="number">1</span>:]=&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>下面是代码解释：</p><ul><li>第2行倒入了Python的内部模块sys。</li><li>第4行通过访问sys.argv的第一个元素提取了程序名称。</li><li>第5行通过获取sys.argv的剩余元素，显示了Python命令行参数。</li></ul><blockquote><p><strong>注意：</strong>在上面argv.py中使用的<a href="https://realpython.com/python-f-strings/" target="_blank" rel="noopener">f-string</a>语法使用了Python 3.8中的新调试说明符。 要了解有关此f字符串新功能和其他功能的更多信息，请查看Python 3.8中的新功能。</p><p>如果你的Python版本低于3.8，那么只需要移除两个f-string中的=使程序得以运行。输出结果回展示变量名而不是它们的名字。</p></blockquote><p>使用任意参数列表执行上面的脚本argv.py：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python argv.py un deux trois quatre</span></span><br><span class="line">Name of the script      : sys.argv[0]='argv.py'</span><br><span class="line">Arguments of the script : sys.argv[1:]=['un', 'deux', 'trois', 'quatre']</span><br></pre></td></tr></table></figure><h3 id="反转首个参数"><a href="#反转首个参数" class="headerlink" title="反转首个参数"></a>反转首个参数</h3><p>现在你对sys.argv有了足够的了解，接下来你将会对命令行传递的参数进行操作。示例程序example.py把在命令行传递的第一个参数逆转了过来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># reverse.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">arg = sys.argv[<span class="number">1</span>]</span><br><span class="line">print(arg[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>在reverse.py中程序通过以下几个步骤反转第一个参数：</p><ul><li>第5行获取程序存储在<code>sys.argv</code>中的index为1的参数。记住程序名存储在sys.argv的index 0的位置。</li><li>第6行打印了反转字符串。 args[::-1]是python中使用分片操作来反转列表的方法。</li></ul><p>按照下面运行脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python reverse.py <span class="string">"Real Python"</span></span></span><br><span class="line">nohtyP laeR</span><br></pre></td></tr></table></figure><p>如预期的那样，<code>reverse.py</code>对”Real Python”进行处理，并且反转了唯一参数并输出”nohtyP laeR”。注意多个单词”Real Python”周围的引号确保解释器将其处理为唯一参数而不是两个。你将在后面的部分中深入探讨参数分隔符。</p><h3 id="转换-sys-argv"><a href="#转换-sys-argv" class="headerlink" title="转换 sys.argv"></a>转换 sys.argv</h3><p>sys.argv对正在运行的Python程序全局可用。 在执行过程中导入的所有模块都可以直接访问sys.argv。 这种全局访问可能很方便，但是sys.argv并非一成不变。 您可能想要实现一种更可靠的机制，以<em>将程序参数提供给Python程序中的不同模块</em>，尤其是在具有多文件的复杂程序中。</p><p>观察如果你随意使用<code>sys.argv</code>会发生什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv_pop.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line">sys.argv.pop()</span><br><span class="line">print(sys.argv)</span><br></pre></td></tr></table></figure><p>调用<a href="https://docs.python.org/tutorial/datastructures.html#more-on-lists" target="_blank" rel="noopener"><code>.pop()</code></a>方法移除<code>sys.argv</code>中最后一个元素。</p><p>执行上面的脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python argv_pop.py un deux trois quatre</span></span><br><span class="line">['argv_pop.py', 'un', 'deux', 'trois', 'quatre']</span><br><span class="line">['argv_pop.py', 'un', 'deux', 'trois']</span><br></pre></td></tr></table></figure><p>注意，第四个参数从sys.argv中被移除。</p><p>在上述简短的脚本中，您可以安全地依靠对sys.argv的全局访问，但是在较大规模的程序中，您可能希望将参数存储在单独的变量中。 前面的示例可以进行如下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># argv_var_pop.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.argv)</span><br><span class="line">args = sys.argv[<span class="number">1</span>:]</span><br><span class="line">print(args)</span><br><span class="line">sys.argv.pop()</span><br><span class="line">print(sys.argv)</span><br><span class="line">print(args)</span><br></pre></td></tr></table></figure><p>这次尽管<code>sys.argv</code>移除了最后一个元素，但<code>args</code>仍然保持不变。<code>args</code>不是全局的，你可以将其传递给程序，以根据程序的逻辑来解析参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> args <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        args = sys.argv[<span class="number">1</span>:]</span><br></pre></td></tr></table></figure><p>在此摘录自<a href="https://realpython.com/what-is-pip/" target="_blank" rel="noopener"><code>pip</code></a> 源码中，main()将sys.argv切片保存到args中，该片仅包含参数而不包含文件名。 sys.argv保持不变，并且对sys.argv的任何更改都不会影响arg。</p><h3 id="转义空格字符"><a href="#转义空格字符" class="headerlink" title="转义空格字符"></a>转义空格字符</h3><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h3 id="计算sha1sum"><a href="#计算sha1sum" class="headerlink" title="计算sha1sum"></a>计算sha1sum</h3><h5 id="剖析python命令行参数"><a href="#剖析python命令行参数" class="headerlink" title="剖析python命令行参数"></a>剖析python命令行参数</h5><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><h3 id="选项-option"><a href="#选项-option" class="headerlink" title="选项 option"></a>选项 option</h3><h3 id="参数-arguments"><a href="#参数-arguments" class="headerlink" title="参数 arguments"></a>参数 arguments</h3><h3 id="子命令-subcommand"><a href="#子命令-subcommand" class="headerlink" title="子命令 subcommand"></a>子命令 subcommand</h3><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><h3 id="视觉"><a href="#视觉" class="headerlink" title="视觉"></a>视觉</h3><h2 id="一些解析python命令行参数的方法"><a href="#一些解析python命令行参数的方法" class="headerlink" title="一些解析python命令行参数的方法"></a>一些解析python命令行参数的方法</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><h3 id="标准输入"><a href="#标准输入" class="headerlink" title="标准输入"></a>标准输入</h3><h3 id="标准输出和标准错误"><a href="#标准输出和标准错误" class="headerlink" title="标准输出和标准错误"></a>标准输出和标准错误</h3><h3 id="自定义解析器"><a href="#自定义解析器" class="headerlink" title="自定义解析器"></a>自定义解析器</h3><h2 id="一些验证python命令行参数的方法"><a href="#一些验证python命令行参数的方法" class="headerlink" title="一些验证python命令行参数的方法"></a>一些验证python命令行参数的方法</h2><h3 id="使用python-data-classes进行类型验证"><a href="#使用python-data-classes进行类型验证" class="headerlink" title="使用python data classes进行类型验证"></a>使用python data classes进行类型验证</h3><h3 id="自定义验证"><a href="#自定义验证" class="headerlink" title="自定义验证"></a>自定义验证</h3><h2 id="python标准库"><a href="#python标准库" class="headerlink" title="python标准库"></a>python标准库</h2><h3 id="argparse"><a href="#argparse" class="headerlink" title="argparse"></a>argparse</h3><h3 id="getopt"><a href="#getopt" class="headerlink" title="getopt"></a>getopt</h3><h2 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h2><h3 id="Click"><a href="#Click" class="headerlink" title="Click"></a>Click</h3><h3 id="Python-Prompt-Toolkit"><a href="#Python-Prompt-Toolkit" class="headerlink" title="Python Prompt Toolkit"></a>Python Prompt Toolkit</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本分翻译自 &lt;a href=&quot;https://realpython.com/python-command-line-arguments&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://realpython.com/python-command
      
    
    </summary>
    
    
      <category term="python" scheme="http://blacston.com/categories/python/"/>
    
    
      <category term="python2" scheme="http://blacston.com/tags/python2/"/>
    
      <category term="命令行" scheme="http://blacston.com/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
      <category term="参数" scheme="http://blacston.com/tags/%E5%8F%82%E6%95%B0/"/>
    
      <category term="commandline" scheme="http://blacston.com/tags/commandline/"/>
    
      <category term="arguments" scheme="http://blacston.com/tags/arguments/"/>
    
  </entry>
  
  <entry>
    <title>vim笔记</title>
    <link href="http://blacston.com/2020/11/21/vim-notes/"/>
    <id>http://blacston.com/2020/11/21/vim-notes/</id>
    <published>2020-11-21T04:33:48.000Z</published>
    <updated>2021-01-14T11:08:38.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p>gg 移动到第一行<br>G    移动到最后一行<br>0 到行首（第 1 列）<br>^ 到第一个非空白字符<br>$ 到行尾</p><p><n>gg  移动到第n行<br>Ctrl-d 向下移动半页<br>Ctrl-u 向上移动半页</n></p><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>a (append)<br>i (insert)<br>o (open a line)<br>以上三种都是在当前字符/行后插入</p><p>A    行尾插入<br>I    行头插入<br>O    向上新建一行</p><h3 id="删-d-delete"><a href="#删-d-delete" class="headerlink" title="删 d delete"></a>删 d delete</h3><p>d$    删除当前字符到行末的内容<br>x    删除当前字符<br>dd    剪切当前行<br>di(    删除()中间的字符<br>dw    删除当前单词</p><h3 id="改-c-change"><a href="#改-c-change" class="headerlink" title="改 c change"></a>改 c change</h3><p>u    撤销<br>.     重复<br>:%s/a/b   全局把a替换成b<br>:s/a/b    替换当前行第一个a为b<br>:s/a/b/g    替换当前行所有a为b<br>:n,$s/a/b    替换第n行到最后一行的a为b</p><p>ciw     change inner word</p><ul><li>比如(asdasd) 输入ci(就可以修改括号中间的内容<br>ctw    change to word</li><li>比如ct) 就修改 asdasd) 做括号左边的内容</li></ul><h3 id="查-f-find"><a href="#查-f-find" class="headerlink" title="查 f find"></a>查 f find</h3><p>f<x>    在当前行查找第一个字符x，按;查找下一个，按,查找上一个<br>F<x>    反向查找</x></x></p><p>/word    全文查找单词 按n查找下一个，按N查找上一个<br>?word    反向查找</p><h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><p>y    复制<br>yy    复制当前行<br>p    粘贴<br>P    在上一行粘贴</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p><opration> <motion><br>d3h    向左删除三个字符<br>df:    删除当前行:前的内容<br>y$    复制当前字符到末尾</motion></opration></p><h2 id="配置文件-vimrc"><a href="#配置文件-vimrc" class="headerlink" title="配置文件 .vimrc"></a>配置文件 .vimrc</h2><p>在<code>~</code>文件夹下新建一个.vimrc文件</p><h2 id="visual-模式"><a href="#visual-模式" class="headerlink" title="visual 模式"></a>visual 模式</h2><p>在普通模式下按v进入可视模式<br>V    进入可视行模式</p><ul><li>选中后输入:normal <command> 可以执行normal指令</li><li>选中后:normal A.png 在每行后面添加.png后缀<br>ctrl+v    进入可视块模式</li></ul><h2 id="分屏"><a href="#分屏" class="headerlink" title="分屏"></a>分屏</h2><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>到<a href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">https://github.com/junegunn/vim-plug</a>根据提示安装<code>vim-plug</code> 并且修改配置文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动光标&quot;&gt;&lt;a href=&quot;#移动光标&quot; class=&quot;headerlink&quot; title=&quot;移动光标&quot;&gt;&lt;/a&gt;移动光标&lt;/h2&gt;&lt;p&gt;gg 移动到第一行&lt;br&gt;G    移动到最后一行&lt;br&gt;0 到行首（第 1 列）&lt;br&gt;^ 到第一个非空白字符&lt;br&gt;$ 
      
    
    </summary>
    
    
      <category term="vim" scheme="http://blacston.com/categories/vim/"/>
    
    
      <category term="vim" scheme="http://blacston.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装系统</title>
    <link href="http://blacston.com/2020/11/05/raspberry-os/"/>
    <id>http://blacston.com/2020/11/05/raspberry-os/</id>
    <published>2020-11-05T06:53:11.000Z</published>
    <updated>2020-11-07T06:38:14.673Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.raspberrypi.org/downloads/raspberry-pi-os/" target="_blank" rel="noopener">系统镜像下载地址</a></p><ol><li>插上读卡器</li><li>查看存储设备 <code>df -h</code></li><li>卸载sd卡: <code>sudo diskutil unmount /Volumes/BOOT</code></li><li>烧录系统 <code>sudo dd if=/Users/chenbai/Downloads/2020-08-20-raspios-buster-armhf.img of=/dev/rdisk2 bs=128m</code></li><li>根目录创建空ssh文件，以及<code>wpa_supplicant.conf</code>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">country=CN</span><br><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">network=&#123;</span><br><span class="line">    ssid=&quot;624net&quot;</span><br><span class="line">    psk=&quot;imsosorry&quot;</span><br><span class="line">    priority=1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>sd卡插入树莓派 启动</li><li>获取ip  用ssh连接</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/downloads/raspberry-pi-os/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;系统镜像下载地址&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;插上读卡器&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="树莓派" scheme="http://blacston.com/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
    
      <category term="树莓派" scheme="http://blacston.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="烧录" scheme="http://blacston.com/tags/%E7%83%A7%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://blacston.com/2020/08/17/linux/"/>
    <id>http://blacston.com/2020/08/17/linux/</id>
    <published>2020-08-17T06:53:11.000Z</published>
    <updated>2020-08-18T05:29:43.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ps-elf"><a href="#ps-elf" class="headerlink" title="ps -elf"></a>ps -elf</h2><p>-e 显示所有进程</p><p>-f full format 完整格式</p><p>-l long formart </p><p>UID： 说明该程序被谁拥有<br>PID：就是指该程序的 ID<br>PPID： 就是指该程序父级程序的 ID<br>C： 指的是 CPU 使用的百分比<br>STIME： 程序的启动时间<br>TTY： 指的是登录终端<br>TIME : 指程序使用掉 CPU 的时间<br>CMD： 下达的指令</p><h2 id="软硬链接-ln"><a href="#软硬链接-ln" class="headerlink" title="软硬链接 ln"></a>软硬链接 ln</h2><p>软链接：ln -s target linkname<br>硬链接：ln target linkname</p><p>硬链接 不占用空间，源文件和硬链接实际上是同一个文件，当两个文件都删除时，这个文件才会被删除，不能对目录进行链接</p><p>软链接相当于一个快捷方式，指向源文件，修改一个文件另一个文件也会跟着改变，但是删除源文件后，软链接就会失效，可以对目录进行链接</p><h2 id="复制-cp-r"><a href="#复制-cp-r" class="headerlink" title="复制 cp [-r]"></a>复制 cp [-r]</h2><p>cp src target</p><p>cp -r src target  // 复制文件夹</p><h2 id="删除-rm-r"><a href="#删除-rm-r" class="headerlink" title="删除 rm [-r]"></a>删除 rm [-r]</h2><p>rm -r dir // 递归删除</p><p>##chmod</p><p><a href="https://blog.csdn.net/pythonw/article/details/80263428" target="_blank" rel="noopener">https://blog.csdn.net/pythonw/article/details/80263428</a></p><p>修改文件权限</p><p>chomod 用户 操作符 权限 filename</p><p>用户有 u(文件所有者), g(文件所隶属的用户组), o(其他用户), a(全部用户)</p><p>权限分为w, r, x 分别是只读 只写 可执行</p><p>7 = 4 + 2 + 1    读写运行权限</p><p>5 = 4 + 1       读和运行权限</p><p>4 = 4          只读权限</p><p><code>chmod a=rwx main.go</code> 给所有用户读写执行main.go的权限</p><p><code>chmod 777 main.go</code> 三个7分别给文件所有者、群组用户、其他用户权限</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>匹配正则表达式</p><p><code>ps -ef | grep pid</code>查找特定进程</p><h2 id="查看命令历史-history"><a href="#查看命令历史-history" class="headerlink" title="查看命令历史 history"></a>查看命令历史 history</h2><p>hitory</p><h2 id="查看磁盘使用状况"><a href="#查看磁盘使用状况" class="headerlink" title="查看磁盘使用状况"></a>查看磁盘使用状况</h2><p><code>df -hl</code></p><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><code>netstat -l</code> 显示监听的套接字</p><p><code>netstat -lnp</code> l 显示监听，n不解析name，p显示程序/进程名称</p><h2 id="查看-修改主机名2"><a href="#查看-修改主机名2" class="headerlink" title="查看/修改主机名2"></a>查看/修改主机名2</h2><p><code>hostname</code></p><p>显示： ecs-sn3-medium-2-linux-20200107151549</p><p>修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=centos6.5-1</span><br></pre></td></tr></table></figure><p>##进程状态</p><p>running 可执行状态，只有在该状态的进程才可能在CPU上运行。</p><p>sleeping 中断 在等待某个条件的形成或接收到信号</p><p>stopped</p><p>zombie  进程已终止，但进程描述还在，等到父进程调用wait后释放</p><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><p>性能分析工具，能够实时显示系统中各个进程的资源占用状况</p><p>shift+f可以设置排序, 显示字段等选项</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ps-elf&quot;&gt;&lt;a href=&quot;#ps-elf&quot; class=&quot;headerlink&quot; title=&quot;ps -elf&quot;&gt;&lt;/a&gt;ps -elf&lt;/h2&gt;&lt;p&gt;-e 显示所有进程&lt;/p&gt;
&lt;p&gt;-f full format 完整格式&lt;/p&gt;
&lt;p&gt;-l long 
      
    
    </summary>
    
    
      <category term="linux" scheme="http://blacston.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://blacston.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>go 排序算法</title>
    <link href="http://blacston.com/2020/08/17/sort-go/"/>
    <id>http://blacston.com/2020/08/17/sort-go/</id>
    <published>2020-08-17T05:45:07.000Z</published>
    <updated>2020-08-17T05:49:29.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BubbleSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// n个元素只要走n-1趟</span></span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=<span class="number">0</span>; j&lt;n-i<span class="number">-1</span>; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>] &#123;</span><br><span class="line">arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">BubbleSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 不断地将尚未排好序的数插入到已经排好序的部分</span></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Insertionsort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 第一个认为是有序的，从第二个元素开始，一共n-1次插入</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j&gt;<span class="number">0</span>; j-- &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[j<span class="number">-1</span>] &#123;</span><br><span class="line">arr[j], arr[j<span class="number">-1</span>] = arr[j<span class="number">-1</span>], arr[j]</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">Insertionsort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 在每次遍历后，把未排序的最小的元素放到前面</span></span><br><span class="line"><span class="comment">// 不稳定  eg  3 2 3 1 第一个3和1交换  破坏了稳定性</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SelectionSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="keyword">var</span> minIndex <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j&lt;n; j++ &#123;</span><br><span class="line"><span class="keyword">if</span> arr[j] &lt; arr[minIndex] &#123;</span><br><span class="line">minIndex = j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> minIndex != i &#123;</span><br><span class="line">arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;</span><br><span class="line">SelectionSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔"><a href="#希尔" class="headerlink" title="希尔"></a>希尔</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 希尔排序是按照不同步长对元素进行插入排序</span></span><br><span class="line"><span class="comment">// 不稳定  eg  5 2 2 步长为2时，5和第二个2交换，破坏稳定性</span></span><br><span class="line"><span class="comment">// 时间复杂度O(n^2)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ShellSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 遍历间隔</span></span><br><span class="line"><span class="keyword">for</span> gap:=n/<span class="number">2</span>; gap&gt;<span class="number">0</span>; gap/=<span class="number">2</span> &#123;</span><br><span class="line"><span class="comment">// 从第gap个开始</span></span><br><span class="line"><span class="keyword">for</span> i:=gap; i&lt;n; i++ &#123;</span><br><span class="line"><span class="comment">// 之前的分组都要过一遍，比如gap=2时，42比较，21比较</span></span><br><span class="line"><span class="keyword">for</span> j:=i; j-gap&gt;=<span class="number">0</span> &amp;&amp; arr[j-gap] &gt; arr[j]; j -= gap&#123;</span><br><span class="line">arr[j-gap], arr[j] = arr[j], arr[j-gap]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;</span><br><span class="line">ShellSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 一开始先把数组从中间划分成两个子数组，一直递归地把子数组划分成更小的子数组，直到子数组里面只有一个元素，这个时候才开始排序，排序的方法就是按照大小顺序合并两个元素，接着依次按照递归的返回顺序，不断地合并排好序的子数组，直到最后把整个数组的顺序排好。</span></span><br><span class="line"><span class="comment">// 稳定</span></span><br><span class="line"><span class="comment">// 时间复杂度 O(nlogn)  进行logn层切分, 每层合并复杂度都是O(n)</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(n)结果需要用一个O(n)的数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Merge</span><span class="params">(left []<span class="keyword">int</span>, right []<span class="keyword">int</span>)</span> <span class="params">(res []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">res = <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br><span class="line">m, n := <span class="built_in">len</span>(left), <span class="built_in">len</span>(right)</span><br><span class="line">i, j:=<span class="number">0</span>, <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ; i&lt;m &amp;&amp; j&lt;n;  &#123;</span><br><span class="line"><span class="keyword">if</span> left[i] &lt; right[j] &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, left[i])</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, right[j])</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i == m &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, right[j:]...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> j == n &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res, left[i:]...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MergeSort</span><span class="params">(arr []<span class="keyword">int</span>)</span> <span class="params">(res []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(arr) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i := <span class="built_in">len</span>(arr) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">left := MergeSort(arr[<span class="number">0</span>:i])</span><br><span class="line">right := MergeSort(arr[i:])</span><br><span class="line"></span><br><span class="line">result := Merge(left, right)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;</span><br><span class="line">res := MergeSort(arr)</span><br><span class="line">fmt.Println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本思想 一开始先把数组从中间划分成两个子数组，一直递归地把子数组划分成更小的子数组，直到子数组里面只有一个元素，这个时候才开始排序，排序的方法就是按照大小顺序合并两个元素，接着依次按照递归的返回顺序，不断地合并排好序的子数组，直到最后把整个数组的顺序排好。</span></span><br><span class="line"><span class="comment">// 不稳定  eg 1 2 2* 3 把2*作为key 那么2将会放在2*后</span></span><br><span class="line"><span class="comment">// 时间复杂度O(nlogn) logn次分解，每次都要进行n次比较  最佳情况：每次选出来的数都是中间值  最坏：数组为逆序</span></span><br><span class="line"><span class="comment">// 空间复杂度 O(logn)递归次数为logn, 每次都需要额外的O(1)空间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QuickSort</span><span class="params">(arr []<span class="keyword">int</span>, start <span class="keyword">int</span>, end <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> start &gt;= end &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i, j := start, end</span><br><span class="line">key := arr[(start+end)/<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt;= j &#123;</span><br><span class="line"><span class="keyword">for</span> arr[i] &lt; key  &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arr[j] &gt; key &#123;</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt;= j &#123;</span><br><span class="line">arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">i++</span><br><span class="line">j--</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> start &lt; j &#123;</span><br><span class="line">QuickSort(arr, start, j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i &lt; end &#123;</span><br><span class="line">QuickSort(arr, i, end)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>&#125;</span><br><span class="line">QuickSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr)<span class="number">-1</span>)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapAdjust</span><span class="params">(arr []<span class="keyword">int</span>, k, length <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// k为父节点，i为左子节点</span></span><br><span class="line">i := <span class="number">2</span>*k+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i &gt;= length &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 选择左右节点中最大的, 如果没有有右节点就是左节点最大</span></span><br><span class="line"><span class="keyword">if</span> i+<span class="number">1</span> &lt; length &amp;&amp; arr[i] &lt; arr[i+<span class="number">1</span>] &#123;</span><br><span class="line">i++</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父节点和最大的子节点交换</span></span><br><span class="line"><span class="keyword">if</span> arr[k] &lt; arr[i] &#123;</span><br><span class="line">arr[k], arr[i] = arr[i], arr[k]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继续调整子节点</span></span><br><span class="line">k = i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HeapSort</span><span class="params">(arr []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(arr)</span><br><span class="line"><span class="comment">// 自底向上调整</span></span><br><span class="line"><span class="keyword">for</span> i:=n/<span class="number">2</span>; i&gt;=<span class="number">0</span>; i-- &#123;</span><br><span class="line">HeapAdjust(arr, i, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">arr[n<span class="number">-1</span>], arr[<span class="number">0</span>] = arr[<span class="number">0</span>], arr[n<span class="number">-1</span>]</span><br><span class="line">n--</span><br><span class="line">HeapAdjust(arr, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">124</span>&#125;</span><br><span class="line">HeapSort(arr)</span><br><span class="line">fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡&quot;&gt;&lt;a href=&quot;#冒泡&quot; class=&quot;headerlink&quot; title=&quot;冒泡&quot;&gt;&lt;/a&gt;冒泡&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
      <category term="interview" scheme="http://blacston.com/categories/interview/"/>
    
    
      <category term="golang" scheme="http://blacston.com/tags/golang/"/>
    
      <category term="sort" scheme="http://blacston.com/tags/sort/"/>
    
      <category term="排序" scheme="http://blacston.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试问题(计算机基础)</title>
    <link href="http://blacston.com/2020/08/05/interview/"/>
    <id>http://blacston.com/2020/08/05/interview/</id>
    <published>2020-08-05T12:52:45.000Z</published>
    <updated>2020-08-18T11:28:10.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><ul><li><p>A, atomacity 原子性 事务必须是原子工作单元；对于其数据修改，要么全都执行，要么全都不执行。通常，与某个事务关联的操作具有共同的目标，并且是相互依赖的。如果系统只执行这些操作的一个子集，则可能会破坏事务的总体目标。原子性消除了系统处理操作子集的可能性。</p></li><li><p>C, consistency 一致性</p><p>事务在完成时，必须使所有的数据都保持一致状态（各种 constraint 不被破坏）。</p></li><li><p>I, isolation 隔离性  一个事务的影响在该事务提交前对其他事务都不可见。</p></li><li><p>D, durability 持久性</p><p>事务完成之后，它对于系统的影响是永久性的。该修改即使出现致命的系统故障也将一直保持。</p></li></ul><h4 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h4><p><a href="https://cloud.tencent.com/developer/article/1415705" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1415705</a></p><p><a href="https://juejin.im/post/6844904029617651720" target="_blank" rel="noopener">https://juejin.im/post/6844904029617651720</a></p><h5 id="1NF"><a href="#1NF" class="headerlink" title="1NF:"></a>1NF:</h5><p>数据原子性，表中的字段不可再分。eg地区字段可以分解为省份，城市，和具体地址三个字端。</p><h5 id="2NF"><a href="#2NF" class="headerlink" title="2NF:"></a>2NF:</h5><p>在1NF的基础上，消除了部分函数依赖，即每个非主属性完全依赖于主键。</p><p>eg：一个选课关系表有（学号，姓名，课号）三个字段，因为一个学生对应多个课程，一个课程对应多个学生，所以（学号，课号）可以唯一确定一条记录。用（学号，课号）作为主键，但是姓名可以根据学号唯一确定，所以姓名部分函数依赖于学号，这不符合第二范式的定义。</p><p><strong>带来的问题</strong></p><p>数据冗余</p><p>增删改出现问题 eg：如果想增加一个课程，这个课程如果没有人选就无法添加，如果一个课程只有一个人选，那么退课的时候也会删除课程，如果要更新课程的名称，那就要更新所有包含此课程的记录。</p><h5 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h5><p>在2NF的基础上，消除非主属性对主属性的传递函数依赖。</p><p>不符合3NF会带来数据冗余和更新异常的问题。（更新异常：有重复的冗余信息，修改时需要同时修改多条记录，否则会出现数据不一致的情况 。）</p><p>eg：（学号，系号，系名）中，学号决定系号，系号决定系名，这样存在传递函数依赖学号决定系名。</p><p>范式化的优点：</p><ul><li>可以尽量的减少数据冗余，数据表更新快体积小</li><li>范式化的更新操作比反范式化更快</li><li>范式化的表通常比反范式化更小</li></ul><p>缺点：</p><ul><li>对于查询需要对多个表进行关联（导致性能降低）</li><li>更难进行索引优化</li></ul><h4 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h4><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><p>osi模型</p><ol><li>应用层(数据):是计算机用户以及各种应用程序和网络之间的接口</li><li>表示层(数据):它对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层。</li><li><p>会话层(数据):不同机器上的用户建立会话</p></li><li><p>传输层(段):实现网络不同主机上用户进程之间的数据通信，可靠与不可靠的传输，传输层的错误检测，流量控制等</p></li><li>网络层(包):提供逻辑地址(IP)、通过路径选择算法将数据从源端到目的端</li><li>数据链路层(帧):将比特流数据封装成帧，增加错误检测与修正等功能，增加可靠性</li><li>物理层(比特流):利用物理介质提供物理连接，提供比特流传输</li></ol><h3 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h3><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><p>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</p><p>网络层：负责路由以及把分组报文发送给目标网络或主机。点对点</p><p>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</p><p>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</p><h3 id="链路层"><a href="#链路层" class="headerlink" title="链路层"></a>链路层</h3><h4 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h4><p>1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。</p><p>2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。</p><p>3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。</p><p>4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><p>广播发送ARP请求，单播发送ARP响应。</p><ul><li><p>作用</p><p>ARP 为 IP 地址到对应的硬件地址提供动态映射。</p></li><li><p>点对点链路使用 ARP 吗?</p><p>不使用</p></li><li><p>ARP 高效运行的关键是什么?</p><p>关键是每个主机上都有一个 ARP 的高速缓存。</p></li></ul><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><h4 id="TCP-UDP简单介绍"><a href="#TCP-UDP简单介绍" class="headerlink" title="TCP UDP简单介绍"></a>TCP UDP简单介绍</h4><p>TCP提供的是面向连接，可靠的字节流服务。即客户端和服务器交换数据前，必须现在双方之间建立一个TCP连接，之后才能传输数据。并且提供超时重发，流量控制等功能，保证数据能从一端传到另一端。</p><p>UDP（User Data Protocol，用户数据报协议）是一个简单的面向数据报的运输层协议。它不提供可靠性，只是把数据报发送出去，但是不能保证它们能到达目的地。由于UDP在传输数据报前不用再客户和服务器之间建立一个连接，且没有超时重发等机制，所以传输速度很快。</p><p><strong>使用场景</strong></p><p>对实时性要求高和高速传输的场合下使用UDP;在可靠性要求低，追求效率的情况下使用UDP;<br>需要传输大量数据且对可靠性要求高的情况下使用TCP</p><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><p>三次握手的目的是为了建立安全可靠的连接。</p><p>第一次握手：客户端给服务端发送一个报文，报文中SYN位置1</p><p>第二次握手：服务端接收到报文后，就知道客户端想建立一个连接，然后服务端给客户端发送一个确认报文，在这个报文中 ACK位置1</p><p>两次握手之后，对于客户端而言，已经知道服务端的接收、发送能⼒是正常的，但是服务端并不能确认客户端的接收能力是否正常，所以要进行第三次握手</p><p>第三次握手：客户端给服务端发送报文，报文中ACK位置1</p><p>通过三次握手之后，服务端和客户端都知道彼此的发送和接收能力都是正常的，那么这个连接就可以被安全的建立了。</p><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><p>四次挥手也是由客户端首先发起的</p><p>第一次挥手：客户端会发送一个报文，在报文中FIN位置1</p><p>第二次挥手：当服务端收到这个报文后，会发送报文 ACK=1作为应答，此时服务端知道客户端想和他断开连接，但此时服务端不一定能做好准备，所以此时服务端只能告诉客户端已经收到断开连接的请求</p><p>第三次挥手：当服务端做好断开连接的准备时，发送一个报文给客户端，报文中FIN标志位 置1</p><p>第四次挥手：当这个报文发给客户端时，客户端同样要给服务端发送一个确认报文，ACK=1</p><p>通过这四次挥手就能得出客户端和服务端都做好了断开连接的准备，于是连接可以断开了。</p><ul><li><p>为什么客户端发送 ACK 之后不直接关闭，⽽而是要等一阵子才关闭（TIME_WAIT）。</p><p>这其中的原因就是，要确保服务器是否已经收到了ACK 报文。如果没有收到的话，服务器会重新发 FIN 报文给客户端，客户端再次收到报⽂之后，就知道之前的报⽂文丢失了，然后再次发送 ACK 报⽂。</p></li></ul><h4 id="tcp拥塞控制"><a href="#tcp拥塞控制" class="headerlink" title="tcp拥塞控制"></a>tcp拥塞控制</h4><p><a href="https://blog.csdn.net/qq_43313035/article/details/89069962" target="_blank" rel="noopener">https://blog.csdn.net/qq_43313035/article/details/89069962</a></p><p>拥塞：对资源的需求超过了可用的资源。若网络中许多资源同时供应不足，网络的性能就要明显变坏，整个网络的吞吐量随之负荷的增大而下降。</p><p>拥塞控制是为了提高网络利用率，降低丢包率。发送方维护一个拥塞窗口。</p><p>主要是下面四种机制：</p><p><strong>1- 慢开始</strong></p><p> 慢开始是指在TCP开始发送报文段时先设置拥塞窗口为1。然后指数增加窗口大小</p><p><strong>2-拥塞避免</strong></p><p>当窗口大小&gt;阈值时，拥塞窗口大小增加改为线型增加。</p><p><strong>3- 快速重传</strong></p><ol><li>发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设 置的重传计时器时间到期。</li><li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量。</li></ol><p><strong>4- 快速恢复</strong><br>连续收到3个对数据包的重复确认，发送端就知道需要马上重传。并且把 ssthresh（慢开始门限）和窗口大小设置为当前窗口的一半，然后开始执行拥塞避免算法。</p><h4 id="tcp流量控制"><a href="#tcp流量控制" class="headerlink" title="tcp流量控制"></a>tcp流量控制</h4><p>如果发送端发送数据太快，接收端来不及接收，可能会丢失数据。所以流量控制是控制发送端发送速率，要让接收端来得及接收。</p><p>具体就是：</p><p>接收方每次收到数据包，可以在发送确定报⽂的时候，同时告诉发送方⾃己的缓存区还剩余多少是空闲的，我们也把缓存区的剩余⼤小称之为接收窗口⼤小。</p><p>发送方收到之后，便会调整自己的发送速率，也就是调整自己发送窗口的大小，当发送方收到接收窗口的大小为0时，发送方就会停止发送数据，防止出现大量丢包情况的发生。</p><p>发送方如果收到零窗口通知，就会启动计时器。若计时器的时间到期，就会发送一个报文：如果接收方可以接收数据就告诉他此时接收窗口的大小，如果接收大小还是为0，发送方就重新设置计时器。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><h4 id="http"><a href="#http" class="headerlink" title="http"></a>http</h4><p><a href="[https://troywu0.gitbooks.io/interview/content/http%E5%8D%8F%E8%AE%AE.html](https://troywu0.gitbooks.io/interview/content/http协议.html">http协议-面试</a></p><p>http协议是超文本传输协议，它规定了浏览器怎样向万维网请求文档，以及服务器如何把文档传递给浏览器。从层次的角度来看，http协议是一个应用层协议。</p><p>在浏览器和服务器之间的请求和响应，必须按照规定的格式和遵循一定格式，这些格式和规则就是http。</p><p>HTTP就是一种无状态协议，它对用户的操作没有记忆功能。为了解决这种情况，引出了<strong>Cookie&amp;Session</strong>机制，让浏览器具备了记忆功能</p><p>他的工作流程大概是这样的：每个站点都有一个服务器进程，不断监听tcp的80端口，查看是否有浏览器向它发送连接请求。一旦监听到连接请求并建立了tcp连接之后，浏览器就向服务器发出页面请求，服务器就要返回所请求的页面作为响应。最后tcp连接被释放。</p><h4 id="从输入URL到页面加载发生了什么"><a href="#从输入URL到页面加载发生了什么" class="headerlink" title="从输入URL到页面加载发生了什么"></a><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">从输入URL到页面加载发生了什么</a></h4><ol><li>浏览器请求dns解析域名的ip地址</li><li>浏览器和服务器建立tcp连接</li><li>浏览器向服务器发出请求</li><li>服务器给出响应，并把相应的文件发送给浏览器</li><li>释放tcp连接</li><li>浏览器渲染文本</li></ol><h4 id="http-1-0-1-1"><a href="#http-1-0-1-1" class="headerlink" title="http 1.0 / 1.1"></a>http 1.0 / 1.1</h4><p>http1.1相较于1.0有以下新的特性：</p><ul><li>支持长连接   一个tcp连接上有多个请求，不用重复建立和断开连接，提高带宽利用率</li><li>增加host字段</li><li>新增了24个状态码 （410表示对象被永久删除）</li><li>引入range字段，支持之请求资源的一部分，节省了带宽</li><li>缓存控制字段 cache-control  服务端响应时，回传<strong>max-age参数</strong>，那么客户端在下次请求时，根据上次回传的max-age值，首先判断缓存的<strong>相对时间</strong>如果还未超过时间，则不发起请求，直接从Cache中读取。反之，则重新请求。</li><li>支持断点传输</li></ul><h4 id="http-2-0"><a href="#http-2-0" class="headerlink" title="http 2.0"></a>http 2.0</h4><ul><li>支持二进制传输</li><li>服务器推送：服务器可以额外的向客户端推送资源，而无需客户端明确的请求</li><li>多路复用，一个Tcp中多个http请求是并行的</li></ul><h4 id="https"><a href="#https" class="headerlink" title="https"></a>https</h4><p><a href="https://blog.csdn.net/qq_31967569/article/details/84296432" target="_blank" rel="noopener">https加密原理</a></p><p><strong>发送者-&gt;接收者：</strong></p><ol><li>message通过hash生成消息摘要</li><li>用private key加密摘要生成签名</li><li>把message和签名一起发送给接收者</li><li>接收者对message进行hash处理得到消息摘要，再用public key把签名解密，两者相等表示验证成功</li></ol><p><strong>公钥证书：</strong></p><ol><li>服务端生成密钥对，私钥自己保管，公钥交给CA</li><li>CA生成密钥对，用自己的私钥对服务端的公钥进行签名生成数字证书，证书中包含服务端公钥</li><li>客户端获取证书</li><li>用公钥对证书进行签名认证，成功说明公钥匙服务端的</li><li>客户端可以用公钥加密消息发送给服务端</li><li>服务端收到密文后用私钥解密</li></ol><p><a href="https://segmentfault.com/a/1190000019976390" target="_blank" rel="noopener">https流程</a></p><p><a href="https://www.jianshu.com/p/e30a8c4fa329" target="_blank" rel="noopener">流程详细解释</a></p><ol><li>client请求server获取证书</li><li>客户端验证证书合法性</li><li>若合法，则生成一个随机值（之后对称加密信息要用到）</li><li>用证书中的公钥对这个随机值加密，发送给服务端</li><li>服务端用私钥对密文解密，获取随机值</li><li>服务端将随机值和信息混合在一起进行对称加密，发送给客户端</li><li>客户端解密</li></ol><h4 id="get-post-区别"><a href="#get-post-区别" class="headerlink" title="get post 区别"></a>get post 区别</h4><ul><li>在浏览器回退时，GET是无害的，POST会再次提交请求。</li><li>GET请求参数会被完整保留在浏览历史记录里，而POST中的参数不会被保留</li><li>GET参数通过URL传递，POST放在Request body中。</li><li>GET 请求在url中传送的参数有长度限制，而POST没有</li><li><p>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</p></li><li><p>GET产生一个TCP数据包；POST产生两个TCP数据包。</p><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）；</p><p>而对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。</p></li></ul><h4 id="cookie-session区别"><a href="#cookie-session区别" class="headerlink" title="cookie session区别"></a>cookie session区别</h4><ul><li>cookie是把用户的数据写在用户本地浏览器上, 其他网站也可以扫描使用你的cookie，容易泄露自己网站用户的隐私，而且一般浏览器对单个网站站点有cookie数量与大小的限制。</li><li>Session是把用户的数据写在用户的独占session上，存储在服务器上，一般只将session的id存储在cookie中。但将数据存储在服务器对服务器的成本会高。 </li><li>session是由服务器创建的，开发人员可以在服务器上通过request对象的getsession方法得到session 一般情况，登录信息等重要信息存储在session中，其他信息存储在cookie中</li><li>工作流程：<br>  服务器会为每一个访问服务器的用户创建一个session对象，并且把session对象的id保存在本地cookie上，只要用户再次访问服务器时，带着session的id，服务器就会匹配用户在服务器上的session，根据session中的数据，还原用户上次的浏览状态或提供其他人性化服务。</li></ul><h4 id="url各部分都是什么"><a href="#url各部分都是什么" class="headerlink" title="url各部分都是什么"></a>url各部分都是什么</h4><p>　protocol :// hostname[:port] / path / [?query]</p><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><p>dns的作用是把域名和主机名转换成ip地址。</p><p>解析流程：</p><p>（需要明确的是，每一级域名都有自己的NS记录，NS记录指向该级域名的域名服务器。这些服务器知道下一级域名的各种记录。）</p><p>dns解析是分级查询。</p><p><a href="https://segmentfault.com/a/1190000013522717" target="_blank" rel="noopener">dns查询原理</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h4 id="进程线程区别"><a href="#进程线程区别" class="headerlink" title="进程线程区别"></a>进程线程区别</h4><p><strong>（1）联系</strong></p><p> 线程是进程的一部分，一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</p><p><strong>（2）区别：</strong></p><p>根本区别：进程是CPU资源分配的基本单位，线程是独立运行和独立调度的基本单位（CPU上真正运行的是线程）。</p><p>地址空间：线程共享本进程的地址空间，而进程之间是独立的地址空间。</p><p>资源方面：线程本身不拥有系统资源，只拥有一些在运行过程中必不可少的资源（如程序计数器，寄存器等），所以线程之间切换的开销比较小，而进程之间的切换开销会大一些。</p><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>协程是一种用户态的轻量级线程，<strong>协程的调度完全由用户控制</strong>。协程切换开销比较小。</p><p>线程是抢占式的调度，而协程是协同式的调度，协程避免了无意义的调度，由此可以提高性能，但也因此，程序员必须自己承担调度的责任，同时，协程也失去了标准线程使用多CPU的能力（协程不支持并行）。</p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p><a href="https://www.jianshu.com/p/1f5195dcc75b" target="_blank" rel="noopener">什么是CPU密集型、IO密集型</a></p><p><strong>1）需要频繁创建销毁的优先用线程</strong></p><p><strong>2)   线程和协程推荐在IO密集型的任务(比如网络调用)中使用，而在CPU密集型的任务中，表现较差。</strong></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p><a href="https://www.cnblogs.com/shan1393/p/9046140.html" target="_blank" rel="noopener">产生死锁的四个条件和解决办法</a></p><h4 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h4><p><a href="https://blog.csdn.net/u010889616/article/details/48424501" target="_blank" rel="noopener">批处理系统、分时处理系统、实时处理系统简介</a></p><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><p><a href="https://zhuanlan.zhihu.com/p/135395279" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/135395279</a></p><p>目的：实现信息交换，实现进程的互斥和同步</p><ol><li><p>共享内存</p><p>在内存中划出一块共享存储区域，各个进程可通过对该共享区的读写来实现通信。</p><p><strong>特点</strong>：<br> ​   1. 不用从用户态到内核态的频繁切换和拷贝数据，直接从内存中读取就可以。<br> ​   2. 共享内存是临界资源，所以需要操作时必须要保证原子性。使用信号量或者互斥锁都可以。</p></li><li><p>管道通信系统</p><p>管道指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件。发送进程以字符流形式将数据送入管道，接收进程从管道中接受数据。</p><p><strong>特点</strong>:</p><ol><li>半双工。一个进程对pipe进行读写时，另一进程需要等待。</li><li>数据单向流动。</li><li>只能在父子进程或兄弟进程间使用</li></ol><p>named_pipe 命名管道：可以在无亲缘关系的进程之间进行通讯</p></li><li><p>socket</p><p> <strong>优点</strong>：1）传输数据为字节级，传输数据可自定义，数据量小效率高；2）传输数据时间短，性能高；3) 适合于客户端和服务器端之间信息实时交互；4) 可以加密,数据安全性强</p><p><strong>缺点</strong>：1) 需对传输的数据进行解析，转化成应用级的数据。</p></li><li><p>消息队列</p><p>消息队列是消息的链表。克服了管道只能承载无格式字节流以及缓冲区大小受限等特点。</p><p>可以实现任意进程间的通信，并通过系统调用函数来实现消息发送和接收之间的同步，无需考虑同步问题</p></li><li><p>信号量</p><p>本质是一个计数器，用pv操作实现进程间的通信和互斥。</p><p>​        PV操作用于同一进程，实现互斥。</p><p>​        PV操作用于不同进程，实现同步。</p></li></ol><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><ul><li><p>golang</p><p><a href="http://golang.iswbm.com/en/latest/chapters/p02.html" target="_blank" rel="noopener">http://golang.iswbm.com/en/latest/chapters/p02.html</a></p></li><li><p>jwt</p><p><a href="http://blacston.com/2019/07/26/jwt-go/#more">http://blacston.com/2019/07/26/jwt-go/#more</a></p></li><li><p><a href="https://segmentfault.com/a/1190000011450120" target="_blank" rel="noopener">cors</a></p></li><li><p><a href="https://blog.csdn.net/dc8899/article/details/21336467" target="_blank" rel="noopener">mvc架构</a></p></li><li><p>orm</p></li><li><p><a href="https://www.cnblogs.com/wangyongsong/articles/10004370.html" target="_blank" rel="noopener">restful</a></p></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="noopener">稳定性</a></p><p><img src="https://img-blog.csdn.net/20180117112126129?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjQyODAxMg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker将应用程序及其所有依赖项打包在一起。这可以保证无论其环境如何，软件始终运行相同。</p><p><a href="https://hit-alibaba.github.io/interview/basic/arch/Concurrency.html" target="_blank" rel="noopener">面试总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库&quot;&gt;&lt;a href=&quot;#数据库&quot; class=&quot;headerlink&quot; title=&quot;数据库&quot;&gt;&lt;/a&gt;数据库&lt;/h2&gt;&lt;h3 id=&quot;ACID&quot;&gt;&lt;a href=&quot;#ACID&quot; class=&quot;headerlink&quot; title=&quot;ACID&quot;&gt;&lt;/a&gt;ACI
      
    
    </summary>
    
    
      <category term="interview" scheme="http://blacston.com/categories/interview/"/>
    
    
      <category term="golang" scheme="http://blacston.com/tags/golang/"/>
    
      <category term="os" scheme="http://blacston.com/tags/os/"/>
    
      <category term="database" scheme="http://blacston.com/tags/database/"/>
    
      <category term="interview" scheme="http://blacston.com/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>vue 父子组件通信</title>
    <link href="http://blacston.com/2020/03/29/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <id>http://blacston.com/2020/03/29/vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</id>
    <published>2020-03-28T17:06:50.000Z</published>
    <updated>2020-08-07T10:14:29.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="父到子"><a href="#父到子" class="headerlink" title="父到子"></a>父到子</h2><p>通过在父组件的prop属性向子组件传递数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;student :student=&quot;liming&quot;&gt;&lt;/student&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    姓名: &#123;&#123; student.name &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      student: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        default: ()=&gt;(&#123;&#125;),</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="子到父"><a href="#子到父" class="headerlink" title="子到父"></a>子到父</h2><p>子组件通过<code>$emit(&#39;eventName&#39;, data)</code>产生事件, 在父组件中监听此事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;MyInput @update:data=&quot;handleUpdate&quot;&gt;&lt;/MyInput&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">      handleUpdate(data) &#123;</span><br><span class="line">        // do something</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">// 当el-input的输入框的值发生改变, 会触发input事件</span><br><span class="line">&lt;el-input @input=&quot;$emit(&apos;update:data&apos;, value)&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="双向绑定数据"><a href="#双向绑定数据" class="headerlink" title="双向绑定数据"></a>双向绑定数据</h2><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><p>用v-model实现, v-model只是语法糖, 以下两种写法等同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; /&gt;</span><br><span class="line"></span><br><span class="line">// 转换后：</span><br><span class="line">&lt;input</span><br><span class="line">  v-bind:value=&quot;message&quot;</span><br><span class="line">  v-on:input=&quot;message=$event.target.value&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>v-bind把message变量赋值给input的value, 这是<code>input</code>接收数据</li><li>v-on监听input事件, 当检测到数据变化, 修改message的值, 这是input发送数据</li><li>两者在一起实现了当input的value改变, 则修改message变量</li></ul><p>实现思想: 统一数据源</p><h3 id="方案1-用model属性"><a href="#方案1-用model属性" class="headerlink" title="方案1 用model属性"></a>方案1 用model属性</h3><p>这个方案和上面的一样, 只不过v-model默认绑定属性名为value, 默认事件名为input, 这个方法可以<strong>自定义prop和event</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;SearchBar v-models=&quot;text&quot;&gt;&lt;/SearchBar&gt;</span><br><span class="line">&lt;!--等价于--&gt;、</span><br><span class="line">&lt;SearchBar :search=&quot;text&quot; @update:search=&quot;this.text = $event.target.value&quot;&gt;&lt;/SearchBar&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">data: ()=&gt; &#123;</span><br><span class="line">      text: &apos;&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleUpdate(val) &#123;</span><br><span class="line">        this.text = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name: &quot;SearchBar&quot;,</span><br><span class="line">    model: &#123;</span><br><span class="line">      prop: &apos;search&apos;,</span><br><span class="line">      event: &apos;update:search&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      search: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方案2-用setter-getter"><a href="#方案2-用setter-getter" class="headerlink" title="方案2: 用setter, getter"></a>方案2: 用setter, getter</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;model&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;&apos;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    computed: &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        get () &#123;</span><br><span class="line">          return this.value</span><br><span class="line">        &#125;,</span><br><span class="line">        set (newVal) &#123;</span><br><span class="line">          this.$emit(&apos;update:value&apos;, newVal)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上例子中, 父组件传来值为value, 如果直接修改子组件中的value，并不会告知父组件数据已修改, 所以设置一个<strong>中间变量</strong>, 把它的getter设置为value, <strong>setter则通知父组件修改数据</strong></p><h3 id="方案3-使用watch"><a href="#方案3-使用watch" class="headerlink" title="方案3: 使用watch"></a>方案3: 使用watch</h3><p>此方法也是通过监听属性改变, 然后用emit产生事件 实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input :value=&quot;searchText&quot; @update:value=&quot;handleUpdate&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data: ()=&gt; &#123;</span><br><span class="line">searchText: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleUpdate(val) &#123;</span><br><span class="line">        this.searchText = val;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;input v-model=&quot;text&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data: ()=&gt; &#123;</span><br><span class="line">text: &quot;&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &apos;&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    watch: &#123;</span><br><span class="line">      text(newVal, oldVal) &#123;</span><br><span class="line">        this.text = newVal;  // 修改子组件的值</span><br><span class="line">        this.$emit(&apos;update:value&apos;, newVal)// 并且通知父组件</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="方案4-使用-sync-修饰符"><a href="#方案4-使用-sync-修饰符" class="headerlink" title="方案4: 使用 .sync 修饰符"></a>方案4: 使用 .sync 修饰符</h3><p>事实上，<code>.sync</code>修饰符是一个简写，它做了一件事情</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;template&gt;    </span><br><span class="line">&lt;children :msg.sync=&quot;parentMsg&quot;&gt;&lt;/children&gt;    </span><br><span class="line"></span><br><span class="line">&lt;!-- 等价于 --&gt;    </span><br><span class="line">&lt;children :msg=&quot;parentMsg&quot; @update:msg=&quot;parentMsg = $event&quot;&lt;/children&gt;    &lt;!-- 这里的$event就是子组件$emit传递的参数 --&gt; </span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>只是少写了个update:[prop]的监听事件而已, 当然子组件该怎么写还怎么写</p><h3 id="minxin"><a href="#minxin" class="headerlink" title="minxin"></a>minxin</h3><p>为了实现双向数据绑定，每次创建组件时都需要写相同的代码，所以可以写一个mixin文件，增加重用性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// formMixin.js</span><br><span class="line">const formMixin = &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: &quot;data&quot;,</span><br><span class="line">    event: &quot;update&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: () =&gt; (&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    formData: &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        return this.data;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(val) &#123;</span><br><span class="line">        this.$emit(&quot;update&quot;, val);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default formMixin;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;父到子&quot;&gt;&lt;a href=&quot;#父到子&quot; class=&quot;headerlink&quot; title=&quot;父到子&quot;&gt;&lt;/a&gt;父到子&lt;/h2&gt;&lt;p&gt;通过在父组件的prop属性向子组件传递数据&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="vuejs" scheme="http://blacston.com/categories/vuejs/"/>
    
    
      <category term="vuejs" scheme="http://blacston.com/tags/vuejs/"/>
    
      <category term="组件通信" scheme="http://blacston.com/tags/%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>flask+gunicorn+nginx部署</title>
    <link href="http://blacston.com/2019/12/29/nginx%E9%83%A8%E7%BD%B2/"/>
    <id>http://blacston.com/2019/12/29/nginx%E9%83%A8%E7%BD%B2/</id>
    <published>2019-12-29T02:43:00.000Z</published>
    <updated>2020-07-08T04:02:26.489Z</updated>
    
    <content type="html"><![CDATA[<ol><li>买服务器</li><li>ubuntu系统</li><li>开启80 8080端口 <a href="https://www.cnblogs.com/codeman-hf/p/10535923.html" target="_blank" rel="noopener">教程</a></li></ol><ol><li><p>安装nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure></li><li><p>测试nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure><p>然后访问ip地址 <a href="https://blog.csdn.net/ssssSFN/article/details/89501469" target="_blank" rel="noopener">如何查看公网ip</a></p></li><li><p>安装docker <a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">docker安装教程</a></p></li><li><p>编写dockerfile文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span></span><br><span class="line"><span class="keyword">RUN</span> mkdir /home/web &amp;&amp; cd /home/web</span><br><span class="line">WORKDIR /home/web</span><br><span class="line">COPY ./backend/* /home/web/</span><br><span class="line">RUN pip install -r ./requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple/  \</span><br><span class="line">    &amp;&amp; pip install gunicorn</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line">CMD [ "gunicorn", "-w", "5",  "api:app"]</span><br></pre></td></tr></table></figure></li><li><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build . flask:0.1</span><br><span class="line">docker save [image_id] &gt; docker.tar</span><br></pre></td></tr></table></figure></li><li><p>在服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i docker.tar</span><br></pre></td></tr></table></figure></li><li><p><code>npm run build &amp;&amp; scp dist/* root@ip:path/</code></p></li><li><p>编写nginx配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">server_name  ipAddr;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">root /root/app;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen       8081;</span><br><span class="line">server_name  ipAddr;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass  http://127.0.0.1:8080</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Forwarded-For</span><br><span class="line">$proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>docker run -d -p 8080:8080 image_id gunicorn -w 4 api:app</code></p><p>报错说明端口占用</p><p><code>ps aux | grep 8080</code></p><p><code>ps -ef | grep 8080</code></p></li></ol><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ol><li><a href="https://www.cnblogs.com/doocool/p/8847288.html" target="_blank" rel="noopener">Vue+Flask部署到阿里云服务器</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;买服务器&lt;/li&gt;
&lt;li&gt;ubuntu系统&lt;/li&gt;
&lt;li&gt;开启80 8080端口 &lt;a href=&quot;https://www.cnblogs.com/codeman-hf/p/10535923.html&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
      <category term="运维" scheme="http://blacston.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="flask" scheme="http://blacston.com/tags/flask/"/>
    
      <category term="vue" scheme="http://blacston.com/tags/vue/"/>
    
      <category term="nginx" scheme="http://blacston.com/tags/nginx/"/>
    
      <category term="部署" scheme="http://blacston.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>webpack和vue配合使用</title>
    <link href="http://blacston.com/2019/11/18/Vuejs%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%92%8C/"/>
    <id>http://blacston.com/2019/11/18/Vuejs%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%92%8C/</id>
    <published>2019-11-18T04:33:48.000Z</published>
    <updated>2020-07-08T04:01:36.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── dist  # 打包后的资源</span><br><span class="line">│   ├── bundle.js  # 打包后的js文件</span><br><span class="line">│   └── img</span><br><span class="line">├── index.html# 最外层文件</span><br><span class="line">├── node_modules# 模块</span><br><span class="line">├── src# 源代码，在此编写代码</span><br><span class="line">│   ├── css</span><br><span class="line">│   ├── img</span><br><span class="line">│   ├── js</span><br><span class="line">│   ├── main.js# </span><br><span class="line">│   └── vue# 存放vue组件文件</span><br><span class="line">└── webpack.config.js# 配置</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./app.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">        App,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>vue实例中不要写太多代码，把代码都写到<code>*.vue</code>文件中，以模块的方式导入</li><li>实例化一个vue对象时，vue会将el选择的节点替换为template的内容</li><li><a href="[https://cn.vuejs.org/v2/guide/components-registration.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C](https://cn.vuejs.org/v2/guide/components-registration.html#局部注册">组件注册</a>)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button class="btn" @click="btnClick"&gt;按钮&lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                message: <span class="string">'hello webpack'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            btnClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.message = <span class="string">"changed"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;  </span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">    body &#123;</span></span><br><span class="line"><span class="regexp">        background: url('../img</span><span class="regexp">/timg.jpeg');</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    .btn &#123;</span></span><br><span class="line"><span class="regexp">        width: 50px;</span></span><br><span class="line"><span class="regexp">        height: 30px;</span></span><br><span class="line"><span class="regexp">        background: red;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><ul><li><p>script标签里的<code>export default</code>是es6的语法，导出默认对象，这样再其他文件中import的时候就不需要知道原模块定义的变量名</p></li><li><p><a href="https://www.runoob.com/w3cnote/es6-module.html" target="_blank" rel="noopener">ES6模块</a></p></li></ul><h2 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h2><ol><li>npm 下载</li><li>webpack.config.js 配置<h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3>打包代码到dist文件夹后，index.html不在文件夹内，那么打包的js文件也没有意义了，现在用<code>HtmlWebpackPlugin</code>插件解决这个问题</li><li><code>npm install html-webpack-plugin --save-dev</code></li><li>修改<code>webpack.config.js</code>中plugin部分如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">'index.html'</span></span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><ul><li>template指明根据什么模板来生成index.html</li></ul><p><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noopener">HtmlWebpackPlugin</a></p><h3 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h3><p>使用 <code>UglifyjsWebpackPlugin</code>将打包后的代码进行压缩</p><ol><li><code>$ npm install uglifyjs-webpack-plugin --save-dev</code></li><li>修改<code>webpack.config.js</code>中plugin部分如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/plugins/uglifyjs-webpack-plugin/" target="_blank" rel="noopener">UglifyjsWebpackPlugin</a></p><h2 id="开启本地服务器"><a href="#开启本地服务器" class="headerlink" title="开启本地服务器"></a>开启本地服务器</h2><p>不用每次写完代码都npm run build，让页面实时刷新</p><ol><li><code>npm install --save-dev webpack-dev-server</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ... </span><br><span class="line">  devServer: &#123;</span><br><span class="line">      contentBase: <span class="string">'./dist'</span>,<span class="comment">// 把这个文件夹作为</span></span><br><span class="line">      inline: <span class="literal">true</span>,<span class="comment">// 实时更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>输入<code>./node_modules/.bin/webpack-dev-server</code>即可开启，但是这样太麻烦，可以在<code>package.json</code>里配置scripts</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line"></span><br><span class="line">  "dev": "webpack-dev-server --open"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>–open 表示用浏览器打开</li></ul></li></ol><h2 id="配置文件的分离"><a href="#配置文件的分离" class="headerlink" title="配置文件的分离"></a>配置文件的分离</h2><p>上一个例子中为了实现本地开发服务器配置了一些东西，但是在实际编译的时候不需要，压缩代码的插件UglifyJsPlugin在编译的时候才用到，所以要分离配置文件</p><ol><li><p><code>npm install --save-dev webpack-merge</code></p></li><li><p>根目录新建一个build目录, 新建三个文件 base.config.js dev.config.js prod.config.js 分别存放公共部分配置，开发配置，生产配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// base.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">              &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    limit: <span class="number">8192</span>,</span><br><span class="line">                    name: <span class="string">'img/[name].[hash:8].[ext]'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">            exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">              loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">              options: &#123;</span><br><span class="line">                presets: [<span class="string">'@babel/preset-env'</span>]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">            loader: <span class="string">'vue-loader'</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">          template: <span class="string">'index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dev.config.js</span></span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./base.config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// prod.config.js</span></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./base.config'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackMerge(baseConfig, &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>记得修改base.config.js力path中的dist为../dist</li></ul></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/baichen99/webpack_test" target="_blank" rel="noopener">github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── dist  					# 打包后的资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── bundle.js  	# 打包后的js文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── img					&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── index.html			# 最外层文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── node_modules		# 模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── src							# 源代码，在此编写代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── main.js			# &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── vue					# 存放vue组件文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── webpack.config.js	# 配置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://blacston.com/categories/frontend/"/>
    
    
      <category term="vuejs" scheme="http://blacston.com/tags/vuejs/"/>
    
      <category term="webpack" scheme="http://blacston.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>go net/http使用方法</title>
    <link href="http://blacston.com/2019/08/13/go-http/"/>
    <id>http://blacston.com/2019/08/13/go-http/</id>
    <published>2019-08-13T14:10:00.000Z</published>
    <updated>2020-08-17T05:51:24.590Z</updated>
    
    <content type="html"><![CDATA[<h2 id="get-post"><a href="#get-post" class="headerlink" title="get, post"></a>get, post</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resp, err := http.Get(<span class="string">"http://example.com/"</span>)</span><br><span class="line"></span><br><span class="line">resp, err := http.Post(<span class="string">"http://example.com/upload"</span>, <span class="string">"image/jpeg"</span>, &amp;buf)</span><br><span class="line"></span><br><span class="line">resp, err := http.PostForm(<span class="string">"http://example.com/form"</span>,</span><br><span class="line">url.Values&#123;<span class="string">"key"</span>: &#123;<span class="string">"Value"</span>&#125;, <span class="string">"id"</span>: &#123;<span class="string">"123"</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用完respone后要关闭连接</span></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取响应中的内容</span></span><br><span class="line">b, _ := ioutil.ReadAll(resp.Body) <span class="comment">// b 为[]byte类型 需要类型转换</span></span><br><span class="line">s := <span class="keyword">string</span>(b)</span><br></pre></td></tr></table></figure><p>Post方法参数分别为 url, content-type, data。data要和content-type对应。<a href="https://zhuanlan.zhihu.com/p/129057481" target="_blank" rel="noopener">具体看这里</a></p><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><p>要管理HTTP客户端的头域、重定向策略和其他设置，创建一个Client：<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">Transport RoundTripper</span><br><span class="line">  CheckRedirect <span class="function"><span class="keyword">func</span><span class="params">(req *Request, via []*Request)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function">  <span class="title">Jar</span> <span class="title">CookieJar</span> // 给<span class="title">client</span>插入<span class="title">cookie</span>，每次请求都会带上它</span></span><br><span class="line"><span class="function">  <span class="title">Timeout</span> <span class="title">time</span>.<span class="title">Duration</span> // 说明每次请求的最大时间</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p>使用 <code>func NewRequest(method, urlStr string, body io.Reader) (*Request, error)</code>创建一个request 后，可以管理header<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数：请求方法，url，请求数据</span></span><br><span class="line"> req, _ := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"http://blacston.com"</span>, <span class="literal">nil</span>)</span><br><span class="line"> req.Header.Add(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jar := cookiejar.Jar&#123;&#125;</span><br><span class="line">jar.SetCookies(<span class="string">"url"</span>, cookies)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Cookie <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="keyword">string</span></span><br><span class="line">Value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">Path       <span class="keyword">string</span>    <span class="comment">// optional</span></span><br><span class="line">Domain     <span class="keyword">string</span>    <span class="comment">// optional</span></span><br><span class="line">Expires    time.Time <span class="comment">// optional</span></span><br><span class="line">RawExpires <span class="keyword">string</span>    <span class="comment">// for reading cookies only</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MaxAge=0 means no 'Max-Age' attribute specified.</span></span><br><span class="line"><span class="comment">// MaxAge&lt;0 means delete cookie now, equivalently 'Max-Age: 0'</span></span><br><span class="line"><span class="comment">// MaxAge&gt;0 means Max-Age attribute present and given in seconds</span></span><br><span class="line">MaxAge   <span class="keyword">int</span></span><br><span class="line">Secure   <span class="keyword">bool</span></span><br><span class="line">HttpOnly <span class="keyword">bool</span></span><br><span class="line">SameSite SameSite</span><br><span class="line">Raw      <span class="keyword">string</span></span><br><span class="line">Unparsed []<span class="keyword">string</span> <span class="comment">// Raw text of unparsed attribute-value pairs</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><ul><li><p>header</p><p>content-type: application/json</p></li><li><p>body:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"username"</span>: <span class="string">"admin"</span>,</span><br><span class="line"><span class="attr">"password"</span>: <span class="string">"passowrd"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    client := http.DefaultClient</span><br><span class="line">    reqUrl := <span class="string">"http://121.36.63.57:8888/user/login"</span></span><br><span class="line">    data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line">    data[<span class="string">"username"</span>] = <span class="string">"admin"</span></span><br><span class="line">    data[<span class="string">"password"</span>] = <span class="string">"password"</span></span><br><span class="line"></span><br><span class="line">    jsonData, err := json.Marshal(data)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req, _ := http.NewRequest(http.MethodPost, reqUrl, strings.NewReader(<span class="keyword">string</span>(jsonData)))</span><br><span class="line"></span><br><span class="line">    req.Header.Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    resp, _ := client.Do(req)</span><br><span class="line">    b, _ := ioutil.ReadAll(resp.Body)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/AdrianDuan/CCSL/blob/master/utils/password.go" target="_blank" rel="noopener">ShuLogin</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;get-post&quot;&gt;&lt;a href=&quot;#get-post&quot; class=&quot;headerlink&quot; title=&quot;get, post&quot;&gt;&lt;/a&gt;get, post&lt;/h2&gt;&lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://blacston.com/tags/go/"/>
    
      <category term="http" scheme="http://blacston.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>gocv的使用</title>
    <link href="http://blacston.com/2019/08/07/gocv/"/>
    <id>http://blacston.com/2019/08/07/gocv/</id>
    <published>2019-08-07T10:50:39.000Z</published>
    <updated>2020-07-08T04:01:36.132Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gocv"><a href="#gocv" class="headerlink" title="gocv"></a>gocv</h1><h3 id="读取图片"><a href="#读取图片" class="headerlink" title="读取图片"></a>读取图片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(img)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="创建纯色图片"><a href="#创建纯色图片" class="headerlink" title="创建纯色图片"></a>创建纯色图片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateImgByBGR</span><span class="params">(sizex <span class="keyword">int</span>, sizey <span class="keyword">int</span>, b <span class="keyword">float64</span>, g <span class="keyword">float64</span>, r <span class="keyword">float64</span>)</span> <span class="title">gocv</span>.<span class="title">Mat</span></span> &#123;</span><br><span class="line">img := gocv.NewMatWithSizeFromScalar(gocv.NewScalar(b, g, r, <span class="number">255</span>), sizex, sizey, gocv.MatTypeCV8UC3)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">dst := gocv.NewMat()</span><br><span class="line">gocv.CvtColor(img, &amp;dst, gocv.ColorBGRToHSV)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(dst)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="inRange"><a href="#inRange" class="headerlink" title="inRange"></a>inRange</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">img := gocv.IMRead(<span class="string">"test.png"</span>, gocv.IMReadColor)</span><br><span class="line">lb := gocv.NewScalar(<span class="number">68</span>, <span class="number">84</span>, <span class="number">153</span>, <span class="number">255</span>)</span><br><span class="line">ub := gocv.NewScalar(<span class="number">80</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">hsv := gocv.NewMat()</span><br><span class="line">mask := gocv.NewMat()</span><br><span class="line">gocv.CvtColor(img, &amp;hsv, gocv.ColorBGRToHSV)</span><br><span class="line">gocv.InRangeWithScalar(hsv, lb, ub, &amp;mask)</span><br><span class="line">win := gocv.NewWindow(<span class="string">"hi"</span>)</span><br><span class="line">win.IMShow(mask)</span><br><span class="line">win.WaitKey(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="替换绿幕"><a href="#替换绿幕" class="headerlink" title="替换绿幕"></a>替换绿幕</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gocv.io/x/gocv"</span></span><br><span class="line"><span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CreateImg create a solid image based on params</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateImgByBGR</span><span class="params">(sizex <span class="keyword">int</span>, sizey <span class="keyword">int</span>, b <span class="keyword">float64</span>, g <span class="keyword">float64</span>, r <span class="keyword">float64</span>)</span> <span class="title">gocv</span>.<span class="title">Mat</span></span> &#123;</span><br><span class="line">img := gocv.NewMatWithSizeFromScalar(gocv.NewScalar(b, g, r, <span class="number">255</span>), sizex, sizey, gocv.MatTypeCV8UC3)</span><br><span class="line"><span class="keyword">return</span> img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Convert</span><span class="params">(srcPath <span class="keyword">string</span>, dstPath <span class="keyword">string</span>, r, g, b <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lb := gocv.NewScalar(<span class="number">68</span>, <span class="number">84</span>, <span class="number">153</span>, <span class="number">255</span>)</span><br><span class="line">ub := gocv.NewScalar(<span class="number">80</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">hsv := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> hsv.Close()</span><br><span class="line">mask := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> mask.Close()</span><br><span class="line">mask_inv := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> mask.Close()</span><br><span class="line">frame := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> frame.Close()</span><br><span class="line">person := gocv.NewMat()</span><br><span class="line"><span class="keyword">defer</span> frame.Close()</span><br><span class="line">kernel := gocv.GetStructuringElement(gocv.MorphRect, image.Pt(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">defer</span> kernel.Close()</span><br><span class="line"><span class="comment">//result := gocv.NewMat()</span></span><br><span class="line"><span class="comment">//defer frame.Close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">capt, err := gocv.VideoCaptureFile(<span class="string">"video.mp4"</span>)</span><br><span class="line"><span class="keyword">defer</span> capt.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//count := capt.Get(gocv.VideoCaptureFrameCount)</span></span><br><span class="line"></span><br><span class="line">fps := capt.Get(gocv.VideoCaptureFPS)</span><br><span class="line">width := <span class="keyword">int</span>(capt.Get(gocv.VideoCaptureFrameWidth))</span><br><span class="line">height := <span class="keyword">int</span>(capt.Get(gocv.VideoCaptureFrameHeight))</span><br><span class="line">writer, err := gocv.VideoWriterFile(<span class="string">"output.mp4"</span>, <span class="string">"avc1"</span>, fps, width, height, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">defer</span> writer.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ok := capt.Read(&amp;frame); ok &#123;</span><br><span class="line">gocv.CvtColor(frame, &amp;hsv, gocv.ColorBGRToHSV)</span><br><span class="line">gocv.InRangeWithScalar(hsv, lb, ub, &amp;mask)</span><br><span class="line"></span><br><span class="line">gocv.BitwiseNot(mask, &amp;mask_inv)</span><br><span class="line">gocv.Erode(mask_inv, &amp;mask, kernel)</span><br><span class="line">gocv.BitwiseAndWithMask(frame, frame, &amp;person, mask_inv)</span><br><span class="line"></span><br><span class="line">err = writer.Write(person)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"err occur when write frame: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;gocv&quot;&gt;&lt;a href=&quot;#gocv&quot; class=&quot;headerlink&quot; title=&quot;gocv&quot;&gt;&lt;/a&gt;gocv&lt;/h1&gt;&lt;h3 id=&quot;读取图片&quot;&gt;&lt;a href=&quot;#读取图片&quot; class=&quot;headerlink&quot; title=&quot;读取图片&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
      <category term="flask学习笔记" scheme="http://blacston.com/categories/golang/flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="opencv" scheme="http://blacston.com/tags/opencv/"/>
    
      <category term="golang" scheme="http://blacston.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>jwt-go的使用</title>
    <link href="http://blacston.com/2019/07/26/jwt-go/"/>
    <id>http://blacston.com/2019/07/26/jwt-go/</id>
    <published>2019-07-26T04:58:39.000Z</published>
    <updated>2020-07-08T04:04:41.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="go-jwt"><a href="#go-jwt" class="headerlink" title="go jwt"></a>go jwt</h1><h2 id="什么是jwt"><a href="#什么是jwt" class="headerlink" title="什么是jwt"></a>什么是jwt</h2><p>JSON Web Token通常用于 Oauth 2中的<code>Bearer</code> tokens</p><p>一个token分成三个部分，用<code>.</code>连接，前两个部分是用base64url编码的json对象，最后一部分是签名，使用相同的编码方式编码。</p><ol><li><p>第一部分叫header，包含JWT和签名算法比如HMAC, SHA256, RSA</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"typ"</span>: <span class="string">"JWT"</span>,</span><br><span class="line"><span class="string">"alg"</span>: <span class="string">"HS256"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二部分叫Playload(Claims)，存储数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"userId"</span>: <span class="string">"23581935-afsakngh12i-asdfaf"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>JWT规定了7个官方字段<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">iss (issuer)：签发人</span><br><span class="line">exp (expiration time)：过期时间</span><br><span class="line">sub (subject)：主题</span><br><span class="line">aud (audience)：受众</span><br><span class="line">nbf (Not Before)：生效时间</span><br><span class="line">iat (Issued At)：签发时间</span><br><span class="line">jti (JWT ID)：编号</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Signature<br>signature是对前两部分的签名，首先需要指定一个算法，按照下面的公式产生<br>HMACSHA256(<br>base64UrlEncode(header) + “.” +<br>base64UrlEncode(payload),<br>secret)</li></ol><h2 id="jwt使用方式"><a href="#jwt使用方式" class="headerlink" title="jwt使用方式"></a>jwt使用方式</h2><p>客户端收到服务器的JWT后，可以放在cookie里和localstorage里，但是这样不能跨域，更好的方法是放在请求头信息。<br>以后每次客户端与服务器通信都要带上jwt<br><code>Authorization: Bearer &lt;token&gt;</code><br>另一种做法是跨域的时候，jwt放在post数据体中</p><h2 id="对称加密方法"><a href="#对称加密方法" class="headerlink" title="对称加密方法"></a>对称加密方法</h2><p>比如HSA使用单个密钥，所以任意<code>[]byte</code>类型都可以当作一个合法的密钥。对称加密在双方都被信任的情况下最好用。因为签名和验证使用相同的算法，所以不能简单地分发key来验证。</p><h2 id="非对称加密方法"><a href="#非对称加密方法" class="headerlink" title="非对称加密方法"></a>非对称加密方法</h2><p>非对称加密方法，比如RSA使用不同的key来签名和验证token，这就可以用private key产生token，再允许使用者用public key来验证。</p><p>每种签名方法使用不同的类型来签名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The HMAC signing method (HS256,HS384,HS512) expect []byte values for signing and validation</span><br><span class="line"></span><br><span class="line">The RSA signing method (RS256,RS384,RS512) expect *rsa.PrivateKey for signing and *rsa.PublicKey for validation</span><br><span class="line"></span><br><span class="line">The ECDSA signing method (ES256,ES384,ES512) expect *ecdsa.PrivateKey for signing and *ecdsa.PublicKey for validation</span><br></pre></td></tr></table></figure></p><h3 id="HMAC方法演示"><a href="#HMAC方法演示" class="headerlink" title="HMAC方法演示"></a>HMAC方法演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(mc *jwt.MapClaims, secret []<span class="keyword">byte</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用HS256算法(输入HMAC,是对称加密算法)</span></span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodHS256, mc)</span><br><span class="line"><span class="comment">// 签名并且获得完整的字符串</span></span><br><span class="line">tokenString, err := token.SignedString(secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"GenerateToken err: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tokenString</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>, secret []<span class="keyword">byte</span>)</span> <span class="params">(jwt.MapClaims ,error)</span></span>  &#123;</span><br><span class="line">token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 验证加密算法</span></span><br><span class="line"><span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Unexpected signing method: %v"</span>, token.Header[<span class="string">"alg"</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> secret, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 类型</span></span><br><span class="line"><span class="keyword">if</span> claims, ok := token.Claims.(jwt.MapClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line"><span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">secret := []<span class="keyword">byte</span>(<span class="string">"secret_key"</span>)</span><br><span class="line">mc := jwt.MapClaims&#123;</span><br><span class="line"><span class="string">"foo"</span>: <span class="string">"bar"</span>,</span><br><span class="line"><span class="string">"issat"</span>: time.Now().Unix(),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印token</span></span><br><span class="line">tokenString := GenerateToken(&amp;mc, secret)</span><br><span class="line">fmt.Println(tokenString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token</span></span><br><span class="line">claims, err := ParseToken(tokenString, secret)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, claims)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rsa加密方法演示"><a href="#rsa加密方法演示" class="headerlink" title="rsa加密方法演示"></a>rsa加密方法演示</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"crypto/rsa"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/dgrijalva/jwt-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GenerateToken receive MapClaims and return a tokenString</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(mc jwt.MapClaims, privateKey *rsa.PrivateKey)</span> <span class="params">(tokenString <span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">token := jwt.NewWithClaims(jwt.SigningMethodRS256, mc)</span><br><span class="line">tokenString, err = token.SignedString(privateKey)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseToken parse the token and return a MapClaims</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(tokenString <span class="keyword">string</span>, publicKey *rsa.PublicKey)</span> <span class="params">(claims jwt.MapClaims, err error)</span></span> &#123;</span><br><span class="line">token, err := jwt.Parse(tokenString, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 验证加密方法是否符合</span></span><br><span class="line"><span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodRSA); !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unexpected signing method: %v"</span>, token.Header[<span class="string">"alg"</span>])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> publicKey, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> claims, ok := token.Claims.(jwt.MapClaims); ok &amp;&amp; token.Valid &#123;</span><br><span class="line"><span class="keyword">return</span> claims, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path, err := filepath.Abs(<span class="string">"./demo.rsa"</span>)</span><br><span class="line">privateByte, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">path, err = filepath.Abs(<span class="string">"./demo.rsa.pub"</span>)</span><br><span class="line">publicByte, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">privateKey, _ := jwt.ParseRSAPrivateKeyFromPEM(privateByte)</span><br><span class="line">publicKey, _ := jwt.ParseRSAPublicKeyFromPEM(publicByte)</span><br><span class="line"></span><br><span class="line">mc := jwt.MapClaims&#123;</span><br><span class="line"><span class="string">"name"</span>: <span class="string">"baichen"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tokenString, err := GenerateToken(mc, privateKey)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"GenerateToken error: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">claims, err := ParseToken(tokenString, publicKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"ParseToken error: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v"</span>, claims)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JWT</a><br><a href="http://web.chacuo.net/netrsakeypair" target="_blank" rel="noopener">公钥密钥生成</a><br><a href="https://blog.csdn.net/skh2015java/article/details/78954293" target="_blank" rel="noopener">go读取文本内容</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;go-jwt&quot;&gt;&lt;a href=&quot;#go-jwt&quot; class=&quot;headerlink&quot; title=&quot;go jwt&quot;&gt;&lt;/a&gt;go jwt&lt;/h1&gt;&lt;h2 id=&quot;什么是jwt&quot;&gt;&lt;a href=&quot;#什么是jwt&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
    
      <category term="golang" scheme="http://blacston.com/tags/golang/"/>
    
      <category term="jwt" scheme="http://blacston.com/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>go func</title>
    <link href="http://blacston.com/2019/06/13/go-func/"/>
    <id>http://blacston.com/2019/06/13/go-func/</id>
    <published>2019-06-13T14:10:00.000Z</published>
    <updated>2020-08-08T07:59:49.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>多个返回值</li><li>参数传递都是值传递</li><li>函数可以作为变量值</li><li>函数可以作为参数和返回值</li></ol><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>参数数量可变<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(ops ...<span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">  res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> _, op := <span class="keyword">range</span> ops &#123;</span><br><span class="line">    res += op</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><ol><li>defer会在函数执行完成后调用</li><li>panic不会影响defer的执行</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;多个返回值&lt;/li&gt;
&lt;li&gt;参数传递都是值传递&lt;/li&gt;
&lt;li&gt;函数可以作为变量值&lt;/li&gt;
&lt;li&gt;函数可以作为参数和返回
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://blacston.com/tags/go/"/>
    
      <category term="function" scheme="http://blacston.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>go map</title>
    <link href="http://blacston.com/2019/06/13/go-map/"/>
    <id>http://blacston.com/2019/06/13/go-map/</id>
    <published>2019-06-13T14:10:00.000Z</published>
    <updated>2020-08-07T10:18:06.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明赋值初始化"><a href="#声明赋值初始化" class="headerlink" title="声明赋值初始化"></a>声明赋值初始化</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">b[<span class="string">"age"</span>] = <span class="number">1</span></span><br><span class="line">c = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">10</span>) <span class="comment">// 10为容量</span></span><br></pre></td></tr></table></figure><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">  fmt.Println(k, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他要注意的地方"><a href="#其他要注意的地方" class="headerlink" title="其他要注意的地方"></a>其他要注意的地方</h2><h3 id="访问不存在的key会返回0值"><a href="#访问不存在的key会返回0值" class="headerlink" title="访问不存在的key会返回0值"></a>访问不存在的key会返回0值</h3><p>不能通过判断是否为nil来判断是否存在<br>如何判断是0还是不存在？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">if</span> v, ok := a[<span class="number">3</span>]; ok &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"%d's value exists"</span>, v)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  fmt.Printf(<span class="string">"%d's value does not exists"</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map的value可以是一个方法"><a href="#map的value可以是一个方法" class="headerlink" title="map的value可以是一个方法"></a>map的value可以是一个方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestMap</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;&#125;</span><br><span class="line">  m1 := <span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> op &#125;</span><br><span class="line">  m2 := <span class="function"><span class="keyword">func</span><span class="params">(op <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> op*op &#125;</span><br><span class="line">  m[<span class="string">"one"</span>] = m1</span><br><span class="line">  m[<span class="string">"two"</span>] = m2</span><br><span class="line">  fmt.Println(m[<span class="string">"one"</span>](<span class="number">4</span>), m[<span class="string">"two"</span>](<span class="number">4</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用map实现set"><a href="#用map实现set" class="headerlink" title="用map实现set()"></a>用map实现set()</h3><ol><li>元素唯一<br><code>map[type] bool</code></li><li>添加<br><code>m[1]=true</code></li><li>判断存在<br><code>if m[1]</code></li><li>删除<br><code>delete(m, 1)</code></li><li>个数<br><code>len(m)</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;声明赋值初始化&quot;&gt;&lt;a href=&quot;#声明赋值初始化&quot; class=&quot;headerlink&quot; title=&quot;声明赋值初始化&quot;&gt;&lt;/a&gt;声明赋值初始化&lt;/h2&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://blacston.com/tags/go/"/>
    
      <category term="map" scheme="http://blacston.com/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>go string</title>
    <link href="http://blacston.com/2019/06/13/go-string/"/>
    <id>http://blacston.com/2019/06/13/go-string/</id>
    <published>2019-06-13T14:10:00.000Z</published>
    <updated>2020-08-07T11:03:17.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义赋值初始化"><a href="#定义赋值初始化" class="headerlink" title="定义赋值初始化"></a>定义赋值初始化</h2><p>string是不可变的只读的[]byte类型<br>unicode是一种字符集<br>UTF-8是unicode的一种实现，是变长编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"中国"</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="string">"中国"</span></span><br></pre></td></tr></table></figure><p>len(str)获取的是字节数，不一定是字符数</p><p>通过下标访问得到的是字节，需要进行转换或者格式化打印<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"世界"</span></span><br><span class="line">    <span class="comment">//方法一：格式化打印</span></span><br><span class="line">    <span class="keyword">for</span> _, ch1 := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%q"</span>,ch1) <span class="comment">//单引号围绕的字符字面值，由go语法安全的转义</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法二：转化输出格式</span></span><br><span class="line">    <span class="keyword">for</span> _, ch2 := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Println(<span class="keyword">string</span>(ch2))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="strings包"><a href="#strings包" class="headerlink" title="strings包"></a>strings包</h2><p><a href="https://golang.org/pkg/strings/" target="_blank" rel="noopener">strings</a></p><h2 id="strconv包"><a href="#strconv包" class="headerlink" title="strconv包"></a>strconv包</h2><p><a href="https://golang.org/pkg/strconv/#example_AppendBool" target="_blank" rel="noopener">strconv</a></p><h2 id="string常见用法"><a href="#string常见用法" class="headerlink" title="string常见用法"></a>string常见用法</h2><p><a href="http://c.biancheng.net/view/17.html" target="_blank" rel="noopener">http://c.biancheng.net/view/17.html</a></p><h2 id="rune-和-byte-区别"><a href="#rune-和-byte-区别" class="headerlink" title="rune 和 byte 区别"></a>rune 和 byte 区别</h2><p><a href="https://www.cnblogs.com/wanghui-garcia/p/10568354.html" target="_blank" rel="noopener">https://www.cnblogs.com/wanghui-garcia/p/10568354.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义赋值初始化&quot;&gt;&lt;a href=&quot;#定义赋值初始化&quot; class=&quot;headerlink&quot; title=&quot;定义赋值初始化&quot;&gt;&lt;/a&gt;定义赋值初始化&lt;/h2&gt;&lt;p&gt;string是不可变的只读的[]byte类型&lt;br&gt;unicode是一种字符集&lt;br&gt;UTF-8是u
      
    
    </summary>
    
    
      <category term="golang" scheme="http://blacston.com/categories/golang/"/>
    
    
      <category term="go" scheme="http://blacston.com/tags/go/"/>
    
      <category term="string" scheme="http://blacston.com/tags/string/"/>
    
  </entry>
  
</feed>
